#+TITLE: Config
#+PROPERTY: header-args :tangle config.el

* Table of Contents :TOC:
- [[#info][Info]]
- [[#display][Display]]
  - [[#transparency][transparency]]
  - [[#fonts][fonts]]
  - [[#hidpi-fonts][Hidpi-fonts]]
  - [[#themes][Themes]]
  - [[#doom-modeline][doom-modeline]]
  - [[#icons][Icons]]
  - [[#line][Line]]
- [[#editing][Editing]]
  - [[#about-parenthese][About Parenthese]]
  - [[#input-chinese][Input Chinese]]
  - [[#file-templates][File Templates]]
  - [[#latex][Latex]]
- [[#org][Org]]
  - [[#org-1][org]]
  - [[#org-agenda][org-agenda]]
  - [[#color-shell-block-output][Color ~shell~ block output]]
  - [[#org-ref][org-ref]]
  - [[#deft][deft]]
  - [[#org-roam][org-roam]]
- [[#plugins][Plugins]]
  - [[#treemacs][treemacs]]
  - [[#ivy-posframe][ivy-posframe]]
  - [[#leetcode][leetcode]]
  - [[#mu4e][mu4e]]
  - [[#yadm-with-magit][yadm (with magit)]]
  - [[#keycast][keycast]]
  - [[#elfeed][elfeed]]
  - [[#dired-ranger][dired-ranger]]
  - [[#mathematica][mathematica]]
  - [[#projectile][projectile]]
  - [[#tldr][tldr]]
- [[#terminal][Terminal]]
  - [[#vterm-and-plugins][vterm and plugins]]
  - [[#colored-output-issues][Colored output issues]]
  - [[#fish-shell][fish shell]]
- [[#others][Others]]
  - [[#maximize-when-start-up][maximize when start up]]
  - [[#tab-bar][tab bar]]
  - [[#eaf][EAF]]
  - [[#edit-server][edit-server]]
  - [[#proxy][proxy]]

* Info
#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
(setq user-full-name "name"
      user-mail-address "***REMOVED***")
#+end_src
* Display
** transparency
#+begin_src emacs-lisp :tangle yes
(set-frame-parameter (selected-frame) 'alpha '(85 . 50))
(add-to-list 'default-frame-alist '(alpha . (85 . 50)))

(defun toggle-transparency ()
  (interactive)
  (let ((alpha (frame-parameter nil 'alpha)))
    (set-frame-parameter
     nil 'alpha
     (if (eql (cond ((numberp alpha) alpha)
                    ((numberp (cdr alpha)) (cdr alpha))
                    ;; Also handle undocumented (<active> <inactive>) form.
                    ((numberp (cadr alpha)) (cadr alpha)))
              100)
         '(85 . 50) '(100 . 100)))))

(map! :leader
      (:prefix-map ("t" . "toggle")
       :desc "Toggle transparency"    "T" #'toggle-transparency
       ))
#+end_src

** fonts
cnfonts package
#+begin_src emacs-lisp :tangle no
(use-package cnfonts
  ;; 让 cnfonts 随着 Emacs 自动生效。
  :config
  (cnfonts-enable)
  (setq cnfonts--custom-set-fontnames
        '(("PragmataPro" "Ubuntu Mono" "DejaVu Sans Mono")
          ("文泉驿等宽微米黑" "Ubuntu Mono" "隶书" "新宋体")
          ("HanaMinB" "SimSun-ExtB" "MingLiU-ExtB")))
  ;; 让 spacemacs mode-line 中的 Unicode 图标正确显示。
  (cnfonts-set-spacemacs-fallback-fonts)
  )
#+end_src

#+begin_src emacs-lisp :tangle yes
(if (equal (display-pixel-height) 2160)
    (setq doom-font (font-spec :family "agave Nerd Font" :size 43)
          doom-serif-font (font-spec :family "Source Serif Pro")
          doom-unicode-font (font-spec :family "FuraCode Nerd Font" :size 31)
          doom-variable-pitch-font (font-spec :family "Sarasa Gothic SC" :size 28))
  (if (equal (display-pixel-height) 1600)
      (setq doom-font (font-spec :family "agave Nerd Font" :size 36)
            doom-big-font (font-spec :family "mononoki Nerd Font" :size 48)
            doom-unicode-font (font-spec :family "mononoki Nerd Font" :size 24)
            doom-variable-pitch-font (font-spec :family "Sarasa Gothic SC"))
      (setq doom-font (font-spec :family "agave Nerd Font" :size 30)
            doom-big-font (font-spec :family "mononoki Nerd Font" :size 48)
            doom-unicode-font (font-spec :family "mononoki Nerd Font" :size 24)
            doom-variable-pitch-font (font-spec :family "Sarasa Gothic SC" :size 23))
      )
    )
#+end_src

#+begin_src emacs-lisp :tangle yes
(setq +my/font-size
      (cond ((equal (display-pixel-height) 2160) '(43 34))
            ( (equal (display-pixel-height) 1600) '(34 27) )
            ( t '(30 23) )
            ))
#+end_src

+ [2021-07-24 Sat 15:27] doom emacs 下中文字体的设置 - Emacs-general - Emacs China :grasp:
https://emacs-china.org/t/doom-emacs/9628/9
#+begin_src emacs-lisp :tangle yes
(defun +my/better-font()
  (interactive)
  ;; english font
  (if (display-graphic-p)
      (progn
        (set-face-attribute 'default nil :font (format "%s:pixelsize=%d" "agave Nerd Font" (nth 0 +my/font-size))) ;; 11 13 17 19 23
        ;; chinese font
        (dolist (charset '(kana han cjk-misc bopomofo))
          (set-fontset-font (frame-parameter nil 'font)
                            charset
                            (font-spec :family "Sarasa Gothic SC" :size (nth 1 +my/font-size))))) ;; 14 16 20 22 28
    ))

(defun +my|init-font(frame)
  (with-selected-frame frame
    (if (display-graphic-p)
        (+my/better-font))))

(if (and (fboundp 'daemonp) (daemonp))
    (add-hook 'after-make-frame-functions #'+my|init-font)
  (+my/better-font))
#+end_src

** Hidpi-fonts
for hidpi monitor, doom-font setting are bugy
https://unix.stackexchange.com/questions/242067/emacs-on-hidpi-screen-renders-unreadable-fonts-arch-linux
#+begin_src emacs-lisp :tangle no
(if (equal (display-pixel-width) 3840)
    (progn
      (add-to-list 'default-frame-alist '(font . "UbuntuMono Nerd Font Mono-16"))
      (set-face-attribute 'default t :font "FiraCode Nerd Font-10"))
  (progn
    (add-to-list 'default-frame-alist '(font . "Ubuntu Mono-13"))
    (set-face-attribute 'default t :font "Fira Code-10"))
  )
#+end_src

** Themes
*bold* and /italic/ enabled
#+begin_src emacs-lisp :tangle yes
;(setq doom-theme 'doom-palenight)
(use-package doom-themes
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t  ; if nil, italics is universally disabled
        )
  (load-theme 'doom-dracula t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  (doom-themes-org-config))
#+end_src

** doom-modeline
#+begin_src emacs-lisp :tangle yes
(use-package! doom-modeline
  :hook (after-init . doom-modeline-mode)

  ;; The limit of the window width.
  ;; If `window-width' is smaller than the limit, some information won't be displayed.
  (setq doom-modeline-window-width-limit fill-column
        doom-modeline-enable-word-count t
        )

  )
(if (equal (display-pixel-width) 3840)
    (custom-set-faces
     '(mode-line ((t (:family "Comic Shanns" :height 140))))
     '(mode-line-inactive ((t (:family "Comic Shanns" :height 140)))))
  (custom-set-faces
   '(mode-line ((t (:family "Comic Shanns" :height 120))))
   '(mode-line-inactive ((t (:family "Comic Shanns" :height 120)))))
)
;https://github.com/seagle0128/doom-modeline/issues/187
(defun +my/doom-modeline--font-height ()
  "Calculate the actual char height of the mode-line."
  (if (equal (display-pixel-width) 3840)
      26 24))
(advice-add #'doom-modeline--font-height :override #'+my/doom-modeline--font-height)
#+end_src

[[https://github.com/seagle0128/doom-modeline/issues/194][one single modeline when split]]
#+begin_src emacs-lisp :tangle no
;; wrap your mode-line-format
((:eval (when (doom-modeline--active) .)))
(set-face-attribute 'mode-line-inactive nil
                    :underline t
                    :background (face-background 'default))
#+end_src

** Icons
#+begin_src emacs-lisp :tangle yes
(use-package all-the-icons
  :config
  (setq all-the-icons-scale-factor 0.9))
#+end_src

** Line
#+begin_src emacs-lisp
(setq display-line-numbers-type nil)
#+end_src
* Editing
** About Parenthese
#+begin_src emacs-lisp :tangle yes
(setq show-paren-style 'expression)
#+end_src

** Input Chinese
https://emacs-china.org/t/topic/1271
#+begin_src emacs-lisp :tangle no
(use-package pyim
  :demand t
  :config
  ;; 激活 basedict 拼音词库，五笔用户请继续阅读 README
  (use-package pyim-basedict
    :config (pyim-basedict-enable))

  (setq default-input-method "pyim")

  ;; 我使用全拼
  (setq pyim-default-scheme 'quanpin)

  ;; 设置 pyim 探针设置，这是 pyim 高级功能设置，可以实现 *无痛* 中英文切换 :-)
  ;; 我自己使用的中英文动态切换规则是：
  ;; 1. 光标只有在注释里面时，才可以输入中文。
  ;; 2. 光标前是汉字字符时，才能输入中文。
  ;; 3. 使用 M-j 快捷键，强制将光标前的拼音字符串转换为中文。
  (setq-default pyim-english-input-switch-functions
                '(pyim-probe-dynamic-english
                  pyim-probe-isearch-mode
                  pyim-probe-program-mode
                  pyim-probe-org-structure-template))

  (setq-default pyim-punctuation-half-width-functions
                '(pyim-probe-punctuation-line-beginning
                  pyim-probe-punctuation-after-punctuation))

  ;; 开启拼音搜索功能
  (pyim-isearch-mode 1)

  ;; 使用 popup-el 来绘制选词框, 如果用 emacs26, 建议设置
  ;; 为 'posframe, 速度很快并且菜单不会变形，不过需要用户
  ;; 手动安装 posframe 包。
  ;;(setq eim-use-tooltip nil)
  ;;(setq pyim-page-tooltip 'posframe)
  (setq pyim-page-tooltip 'popup)

  ;; 选词框显示5个候选词
  (setq pyim-page-length 5)

  :bind
  (("M-j" . pyim-convert-string-at-point) ;与 pyim-probe-dynamic-english 配合
   ("C-;" . pyim-delete-word-from-personal-buffer)))
#+end_src
** File Templates
+ [2021-07-26 Mon 10:11] How to create files using the file-templates module? · Issue #2134 · hlissner/doom-emacs · GitHub :grasp:
https://github.com/hlissner/doom-emacs/issues/2134

#+begin_src emacs-lisp :tangle yes
(after! yasnippet
  :config
  ;(setq +file-templates-dir "~/.config/doom/templates/")
  (set-file-template! "/leetcode/.+\\.cpp$"
    ;:when +file-templates-in-emacs-dirs-p
    :trigger "__leetcode.cpp" :mode 'c++-mode)
  )
#+end_src
** Latex
#+begin_src emacs-lisp
(eval-after-load 'latex
  '(setq LaTeX-clean-intermediate-suffixes (delete "\\.synctex\\.gz"  LaTeX-clean-intermediate-suffixes)
         LaTeX-clean-intermediate-suffixes (append LaTeX-clean-intermediate-suffixes (list "\\.dvi" "\\.fdb_latexmk"))
         Tex-clean-confirm nil))
(use-package! math-preview
  :config
  (setq math-preview-marks '(("\\begin{equation}" . "\\end{equation}")
                        ("\\begin{equation*}" . "\\end{equation*}")
                        ("\\[" . "\\]")
                        ("\\(" . "\\)")
                        ("$$" . "$$")
                        ("$" . "$")))
  (setq math-preview-preprocess-functions '((lambda (s)
                                         (concat "{\\color{white}" s "}"))))
  )
(autoload 'latex-math-preview-expression "latex-math-preview" nil t)
(autoload 'latex-math-preview-insert-symbol "latex-math-preview" nil t)
(autoload 'latex-math-preview-save-image-file "latex-math-preview" nil t)
(autoload 'latex-math-preview-beamer-frame "latex-math-preview" nil t)
(setq-default enable-local-variables t)
;(setq-default Tex-master (concat (projectile-project-root) "main.tex"))
#+end_src

word completion along with =(:lang (latex +lsp))=
see =company-backends= variable docs
https://github.com/hlissner/doom-emacs/issues/5672
#+begin_src emacs-lisp
;(defun +my/latex-mode-setup ()
;  (setq-local company-backends
;              (append '((company-dabbrev company-yasnippet company-ispell))
;                      company-backends)))
;(add-hook 'LaTeX-mode-hook '+my/latex-mode-setup)

;(defun +my/lsp-init-company-backends-h ()
;  (when (and lsp-completion-mode (not TeX-mode-p))
;    (set (make-local-variable 'company-backends)
;         (cons +lsp-company-backends
;               (remove +lsp-company-backends
;                       (remq 'company-capf company-backends))))))
;
;(advice-add #'+lsp-init-company-backends-h :override #'+my/lsp-init-company-backends-h)

(setq-hook! 'LaTeX-mode-hook +lsp-company-backends '(:separate company-capf company-yasnippet company-dabbrev))
#+end_src

+ add surround
  =V S [e|m|.] .=
  select all line with =V=
+ change surround
  =c s [e|m|.] [e|m|.] .=
+ select surround and add another surround
  =v a [e|m|.] V S [e|m|.] .=
#+begin_src emacs-lisp
(use-package! evil-tex
  :when (featurep! :editor evil +everywhere)
  :config
  (setq evil-tex-include-newlines-in-envs nil
        evil-tex-select-newlines-with-envs nil)
  )
#+end_src

* Org
** org
#+begin_src emacs-lisp
(use-package org
  :init
  (setq org-directory "~/org/")
  (defvar co/org-agenda-directory (expand-file-name "agenda" org-directory))
  (defun co/org-agenda-file-paths (path)
    (if (listp path)
        (mapcar (lambda (x) (expand-file-name (concat x ".org") co/org-agenda-directory)) path)
      (expand-file-name (concat path ".org") co/org-agenda-directory)))

  :custom
  (org-agenda-files (co/org-agenda-file-paths '("todos" "habits" "journal")))
  (org-ellipsis " ▾")
  (org-agenda-start-with-log-mode t)
  (org-log-done 'time)
  (org-log-into-drawer t)
  (org-image-actual-width 400)
  (org-startup-with-inline-images t)
  (org-refile-targets '(("archive.org" :maxlevel . 1)))
  (org-tag-alist
   '((:startgroup)
                                        ; Put mutually exclusive tags here
     (:endgroup)
     ("@home" . ?H)
     ("@work" . ?W)
     ("agenda" . ?a)
     ("publish" . ?P)
     ("batch" . ?b)
     ("idea" . ?i)))

  :config
  ;https://stackoverflow.com/a/50875921
  (setq org-capture-templates
   `(("t" "Tasks / Projects")
     ("tt" "Task" entry (file+olp ,(co/org-agenda-file-paths "todos") "Inbox")
      "* TODO %?\n  %U\n  %i" :empty-lines 1)
     ("tc" "Task from note" entry (file+olp ,(co/org-agenda-file-paths "todos") "Inbox")
      "* TODO [%a] %?\n  %U\n  %i" :empty-lines 1)
     ("ts" "Someday" entry (file+olp ,(co/org-agenda-file-paths "todos") "Someday")
      "* HOLD %?\n  %U\n  %a\n  %i" :empty-lines 1)
     ("tr" "Readings" entry (file+olp ,(co/org-agenda-file-paths "todos") "Readings")
      "* PROJ %?\n  %U\n  %a\n  %i" :empty-lines 1)

     ;; btw, i use org-roam to track dailies
                                        ;("j" "Journal Entries")
                                        ;("jj" "Journal" entry
                                        ;     (file+olp+datetree ,(co/org-agenda-file-paths "journal"))
                                        ;     "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
                                        ;     ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
                                        ;     :clock-in :clock-resume
                                        ;     :empty-lines 1)

     ("m" "Metrics Capture")
     ("mw" "Weight" table-line (file+headline ,(co/org-agenda-file-paths "journal") "Weight")
      "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)
     ("mb" "Billiards" table-line (file+headline ,(co/org-agenda-file-paths "journal") "Billiards")
      "| %U | %^g | %^{minutes} | %^{Notes} |" :kill-buffer t)
     ))
  ;https://github.com/daviwil/emacs-from-scratch/blob/c55d0f5e309f7ed8ffa3c00bc35c75937a5184e4/init.el
  (use-package org-habit
    :custom
    (org-habit-graph-column 60)
    :config
    (add-to-list 'org-modules 'org-habit)
    )

  ;(org-clock-persist 'history)
  (org-clock-persistence-insinuate)
  ; display inline images
  (org-display-inline-images)

  ;; Save Org buffers after refiling!
  (advice-add 'org-refile :after 'org-save-all-org-buffers)
)
#+end_src
** org-agenda
https://emacs.stackexchange.com/a/7840
#+begin_src emacs-lisp
(advice-add 'org-agenda-quit :before 'org-save-all-org-buffers)
#+end_src

** Color ~shell~ block output
[[https://emacs.stackexchange.com/a/52238][How do I attach a custom function to process org-mode babel shell output?]]

#+BEGIN_SRC emacs-lisp :tangle no
(use-package cl-lib
  :init
  (defun org-redisplay-ansi-source-blocks ()
    "Refresh the display of ANSI text source blocks."
    (interactive)
    (org-element-map (org-element-parse-buffer) 'src-block
      (lambda (src)
        (when (equalp "ansi" (org-element-property :language src))
          (let ((begin (org-element-property :begin src))
                (end (org-element-property :end src)))
            (ansi-color-apply-on-region begin end))))))
  :custom
  (add-to-list 'org-babel-after-execute-hook #'org-redisplay-ansi-source-blocks)
  (setq org-babel-default-header-args:shell
        '((:results . "output verbatim drawer")
          (:wrap . "src ansi")))
)
#+END_SRC

** org-ref
#+begin_src emacs-lisp :tangle no
(use-package org-ref)
#+end_src
** deft
#+begin_src emacs-lisp :tangle no
(setq deft-directory "~/org")
(setq deft-default-extension "org")
#+end_src
** org-roam
#+begin_src emacs-lisp :tangle yes
(use-package org-roam
  ;:custom
  ;(org-roam-directory (file-truename "~/org/roam"))
  :custom
  (org-roam-dailies-capture-templates
   '(("d" "default" entry "* %?\n[%<%Y-%m-%d %H:%M>]\n"
      :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n"))))
  (require 'org-roam-dailies)
  )
#+end_src
* Plugins
** treemacs
#+begin_src emacs-lisp :tangle no
(use-package! treemacs
  :config
  (setq treemacs-width 17
        ;https://github.com/hlissner/doom-emacs/issues/1551
        doom-themes-treemacs-enable-variable-pitch nil
        )
  ;https://github.com/Alexander-Miller/treemacs/issues/486
  (dolist (face '(treemacs-root-face
                treemacs-git-unmodified-face
                treemacs-git-modified-face
                treemacs-git-renamed-face
                treemacs-git-ignored-face
                treemacs-git-untracked-face
                treemacs-git-added-face
                treemacs-git-conflict-face
                treemacs-directory-face
                treemacs-directory-collapsed-face
                treemacs-file-face
                treemacs-tags-face))
  (set-face-attribute face nil :family "mononoki nerd font" :height 100))
      (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode 'always)
  (treemacs-git-mode 'extended)
  ;(require 'treemacs-all-the-icons)
  (treemacs-load-all-the-icons-with-workaround-font "Inconsolata nerd font")
  )
(use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
  :after (treemacs persp-mode) ;;or perspective vs. persp-mode
  :config (treemacs-set-scope-type 'Perspectives)
)
;(with-eval-after-load 'treemacs
;  (add-to-list 'treemacs-pre-file-insert-predicates #'treemacs-is-file-git-ignored?))
#+end_src
** ivy-posframe
#+begin_src emacs-lisp :tangle no
(use-package ivy-posframe
  :custom
(setq ivy-posframe-display-functions-alist
      '((swiper          . ivy-display-function-fallback)
        (complete-symbol . ivy-posframe-display-at-point)
        (counsel-M-x     . ivy-posframe-display-at-frame-top-center)
        (t               . ivy-posframe-display)))
(setq ivy-posframe-parameters
        '((left-fringe . 8)
          (right-fringe . 8)))
  :config
  (ivy-posframe-mode 1)
  )
#+end_src
** leetcode
#+begin_src emacs-lisp
(setq leetcode-prefer-language "cpp")
(setq leetcode-save-solutions t)
(setq leetcode-directory "~/Coding/leetcode")
#+end_src
** mu4e
#+begin_src shell :tangle no
paru -S isync mu
mkdir -p ~/.mail/***REMOVED*** ~/.mail/***REMOVED***
mu init --maildir=~/.mail
mbsync -c ~/.config/isync/***REMOVED***-mbsyncrc -c ~/.config/isync/***REMOVED***-mbsyncrc -V -a
#+end_src

#+begin_src emacs-lisp
(use-package mu4e
  ;;:ensure nil
  :defer 20
  :config
  (setq mu4e-update-interval 300)
  (setq mu4e-change-filenames-when-moving t)
  (setq mu4e-maildir "~/.mail")
  (setq mu4e-attachment-dir "~/Downloads")

  ;; enable inline images
  (setq mu4e-view-show-images t)
  ;; every new email composition gets its own frame!
  (setq mu4e-compose-in-new-frame t)

  ;;(mu4e-compose-signature-auto-include nil)

  (setq mu4e-use-fancy-chars t)
  (setq mu4e-view-show-addresses t)
  (setq mu4e-view-prefer-html t)

  ;;(setq mu4e-context-policy 'pick-first)
  ;;(setq mu4e-compose-context-policy nil)
  )

(with-eval-after-load 'mu4e
  (setq mu4e-get-mail-command "mbsync -c ~/.config/isync/***REMOVED***-mbsyncrc -c ~/.config/isync/***REMOVED***-mbsyncrc -a && proxychains -q mbsync -c ~/.config/isync/***REMOVED***-mbsyncrc -a")
  (setq mu4e-contexts
        `(
          ,(make-mu4e-context
            :name "private"
            :enter-func (lambda () (mu4e-message "Entering context private"))
            :leave-func (lambda () (mu4e-message "Leaving context private"))
            :match-func (lambda (msg)
                          (when msg
                            (mu4e-message-contact-field-matches
                             msg '(:from :to :cc :bcc) "***REMOVED***")))
            :vars '((user-mail-address . "***REMOVED***")
                    (user-full-name . "name")
                    (mu4e-sent-folder . "/***REMOVED***/[***REMOVED***]/Sent Mail")
                    (mu4e-trash-folder . "/***REMOVED***/[***REMOVED***]/Bin")
                    (mu4e-compose-signature . (concat "name\n" "From Emacs\n"))
                    (mu4e-compose-format-flowed . t)
                    (mu4e-maildir-shortcuts . ( ("/***REMOVED***/INBOX"            . ?i)
                                                ("/***REMOVED***/[***REMOVED***]/All Mail"  . ?a)
                                                ("/***REMOVED***/[***REMOVED***]/Sent Mail" . ?s)
                                                ("/***REMOVED***/[***REMOVED***]/Starred"   . ?r)
                                                ("/***REMOVED***/[***REMOVED***]/Bin"       . ?t)
                                                ("/***REMOVED***/[***REMOVED***]/Spam"   . ?v)
                                                ))))
          ,(make-mu4e-context
            :name "work"
            :enter-func (lambda () (mu4e-message "Entering context work"))
            :leave-func (lambda () (mu4e-message "Leaving context work"))
            :match-func (lambda (msg)
                          (when msg
                            (mu4e-message-contact-field-matches
                             msg '(:from :to :cc :bcc) "***REMOVED***")))
            :vars '((user-mail-address . "***REMOVED***")
                    (user-full-name . "name")
                    (mu4e-drafts-folder . "/***REMOVED***/Drafts")
                    (mu4e-refile-folder . "/***REMOVED***/Archive")
                    (mu4e-sent-folder . "/***REMOVED***/Sent Items")
                    (mu4e-trash-folder . "/***REMOVED***/Trash")
                    (mu4e-compose-signature . (concat "name\n" "From Emacs\n"))
                    (mu4e-compose-format-flowed . t)
                    (mu4e-maildir-shortcuts . ( ("/***REMOVED***/Inbox"            . ?i)
                                                ("/***REMOVED***/Drafts" . ?D)
                                                ("/***REMOVED***/Sent Items" . ?s)
                                                ("/***REMOVED***/Notifications" . ?n)
                                                ("/***REMOVED***/Junk E-mail" . ?j)
                                                ))))
          ,(make-mu4e-context
            :name "***REMOVED***"
            :enter-func (lambda () (mu4e-message "Entering context work"))
            :leave-func (lambda () (mu4e-message "Leaving context work"))
            :match-func (lambda (msg)
                          (when msg
                            (mu4e-message-contact-field-matches
                             msg '(:from :to :cc :bcc) "***REMOVED***")))
            :vars '((user-mail-address . "***REMOVED***")
                    (user-full-name . "name")
                    (mu4e-drafts-folder . "/***REMOVED***/Drafts")
                    (mu4e-refile-folder . "/***REMOVED***/Archive")
                    (mu4e-sent-folder . "/***REMOVED***/Sent Messages")
                    (mu4e-trash-folder . "/***REMOVED***/Deleted Messages")
                    (mu4e-compose-signature . (concat "name\n" "From Emacs\n"))
                    (mu4e-compose-format-flowed . t)
                    (mu4e-maildir-shortcuts . ( ("/***REMOVED***/Inbox"            . ?i)
                                                ("/***REMOVED***/Drafts" . ?D)
                                                ("/***REMOVED***/Sent Messages" . ?s)
                                                ("/***REMOVED***/Junk" . ?j)
                                                ))))
          ))
  )
#+end_src
*** alert
#+begin_src emacs-lisp :tangle no
(use-package mu4e-alert
  :after mu4e
  :hook ((after-init . mu4e-alert-enable-mode-line-display)
         (after-init . mu4e-alert-enable-notifications))
  :config (mu4e-alert-set-default-style 'libnotify))
#+end_src
** yadm (with magit)
[[https://github.com/TheLocehiliosan/yadm/blob/dd86c8a691deed7fb438b7ef07179040b0f05026/yadm.md#configuration][yadm man page]]
[[https://www.reddit.com/r/emacs/comments/gjukb3/yadm_magit/][reddit:yadm+magit]]
~tramp~ from ~Melpa~ bugy, install it from ~aur~.
#+begin_src emacs-lisp :tangle yes
;(require 'tramp)
(use-package! tramp
  :config
  ;(setenv "SHELL" "/bin/bash")
  (add-to-list 'tramp-methods
               '("yadm"
                 (tramp-remote-shell "/bin/bash")
                 (tramp-remote-shell-args ("-c"))
                 (tramp-login-program "yadm")
                 (tramp-login-args (("enter")))
                 ;(tramp-login-env (("SHELL") ("/bin/bash")))
                 ))
  (defun yadm-status ()
    (interactive)
    (magit-status "/yadm::"))
  (map! :leader
        (:prefix "g"
         :desc "yadm-status" "a" #'yadm-status)
        )
  )
#+end_src

can't set shell rightly, change fish prompt in tramp instead. see [[file:~/.config/omf/init.fish]]

** keycast
#+begin_src emacs-lisp
(after! keycast
  (define-minor-mode keycast-mode
    ;; https://github.com/tarsius/keycast/issues/7#issuecomment-627604064
    "Show current command and its key binding in the mode line."
    :global t
    (if keycast-mode
        (add-hook 'pre-command-hook 'keycast--update t)
      (remove-hook 'pre-command-hook 'keycast--update))))
(add-to-list 'global-mode-string '("" mode-line-keycast))
(keycast-mode) ;; or run keycast-mode by demand
#+end_src
** elfeed
#+begin_src emacs-lisp
(use-package elfeed
  :config
  (add-hook! 'elfeed-search-mode-hook 'elfeed-update)
  :bind (:map elfeed-search-mode-map
              ("A" . bjm/elfeed-show-all)
              ;("E" . bjm/elfeed-show-emacs)
              ("m" . elfeed-toggle-star)
              ;("D" . bjm/elfeed-show-daily)
              ("q" . bjm/elfeed-save-db-and-bury))
  )

(map! :leader
      (:prefix-map ("o" . "open")
       (:when (featurep! :app rss)
        :desc "elfeed"    "e" #'elfeed
        )
       ))

(use-package elfeed-org
  :config
  (elfeed-org)
  (setq rmh-elfeed-org-files (list "~/org/elfeed.org"))
  )
(use-package elfeed-goodies
  :config
  (elfeed-goodies/setup)
  (setq elfeed-goodies/entry-pane-size 0.5)
  )

(defun bjm/elfeed-show-all ()
  (interactive)
  (bookmark-maybe-load-default-file)
  (bookmark-jump "elfeed-all"))

(defun elfeed-mark-all-as-read ()
  (interactive)
  (mark-whole-buffer)
  (elfeed-search-untag-all-unread))

(defalias 'elfeed-toggle-star
  (elfeed-expose #'elfeed-search-toggle-all 'star))

;;functions to support syncing .elfeed between machines
;;makes sure elfeed reads index from disk before launching
(defun bjm/elfeed-load-db-and-open ()
  "Wrapper to load the elfeed db from disk before opening"
  (interactive)
  (elfeed-db-load)
  (elfeed)
  (elfeed-search-update--force))

;;write to disk when quiting
(defun bjm/elfeed-save-db-and-bury ()
  "Wrapper to save the elfeed db to disk before burying buffer"
  (interactive)
  (elfeed-db-save)
  (quit-window))

;(evil-define-key 'normal elfeed-show-mode-map
;  (kbd "J") 'elfeed-goodies/split-show-next
;  (kbd "K") 'elfeed-goodies/split-show-prev)
;(evil-define-key 'normal elfeed-search-mode-map
;  (kbd "J") 'elfeed-goodies/split-show-next
;  (kbd "K") 'elfeed-goodies/split-show-prev)
#+end_src

** dired-ranger
#+begin_src emacs-lisp
(use-package ranger
  :custom
  (ranger-cleanup-eagerly t)
  (ranger-modify-header t)
                                        ;ranger-cleanup-eagerly t
  (ranger-cleanup-on-disable t)
  (ranger-return-to-ranger nil)
  (ranger-excluded-extensions '("mkv" "iso" "mp4" "ipynb"))
  (ranger-max-preview-size 3)
  (ranger-dont-show-binary t)
  (ranger-footer-delay 0.2)
  (ranger-preview-delay 0.040)
  :config
  (ranger-override-dired-mode t)
                                        ;TODO change =ranger-pop-eshell= to vterm
                                        ;(setq helm-descbinds-window-style 'same-window)
  )
(use-package dired
  :config
                                        ;https://github.com/jtbm37/all-the-icons-dired/pull/39/
  (setq all-the-icons-dired-monochrome nil)
  )
#+end_src

** mathematica
#+begin_src emacs-lisp :tangle no
(use-package! lsp-mode
  :config
  (use-package! wolfram-mode
    :config
    (autoload 'wolfram-mode "wolfram-mode" nil t)
    (autoload 'run-wolfram "wolfram-mode" nil t)
    (setq wolfram-program "/usr/local/bin/wolfram")
    (add-to-list 'auto-mode-alist '("\.m$" . wolfram-mode))
    (setq wolfram-path "~/.Mathematica/Applications")
    )

  (add-to-list 'lsp-language-id-configuration '(wolfram-mode . "Mathematica"))

  (lsp-register-client
   (make-lsp-client :language-id 'wolfram
                    :new-connection (lsp-tcp-server-command
                                     (lambda (port)
                                       `("wolfram" ;; or "wolframscript"
                                         "-script" ;; or "-file"
                                         "~/softwares/lsp-wl/init.wls"
                                         ,(concat
                                           "--socket="
                                           (number-to-string port)
                                           ))))
                    :major-modes '(wolfram-mode)
                    :server-id 'lsp-wl
                    ))
  )
#+end_src
** projectile
#+begin_src emacs-lisp
;https://docs.projectile.mx/projectile/configuration.html
(use-package! projectile
  :config
  (setq projectile-file-exists-remote-cache-expire (* 10 60)
        projectile-track-known-projects-automatically nil
        projectile-auto-discover nil)
  )
#+end_src
** tldr
#+begin_src emacs-lisp
(use-package! tldr
  :config
  (setq tldr-enabled-categories '("common" "linux" "osx" "sunos"))
  )
#+end_src
* Terminal
** vterm and plugins
#+begin_src emacs-lisp :tangle yes
(use-package! vterm
  :config
  (setq vterm-shell "/usr/bin/fish"
        vterm-buffer-name-string "vterm %s"
        vterm-kill-buffer-on-exit t)
  )
;(use-package multi-vterm)
(use-package vterm-toggle
  :config

  ;; you can cd to the directory where your previous buffer file exists
  ;; after you have toggle to the vterm buffer with `vterm-toggle'.
  (define-key vterm-mode-map [(control return)]   #'vterm-toggle-insert-cd)
  (setq vterm-toggle-cd-auto-create-buffer nil)
  (define-key vterm-mode-map (kbd "s-n")   'vterm-toggle-forward)
  ;Switch to previous vterm buffer
  (define-key vterm-mode-map (kbd "s-p")   'vterm-toggle-backward)
)
(map! :leader
      (:prefix-map ("o" . "open")
       (:when (featurep! :term vterm)
        :desc "Toggle vterm popup here"    "." #'vterm-toggle-cd
        )
       ))
#+end_src
** Colored output issues
https://wiki.archlinux.org/index.php/Emacs#Colored_output_issues
#+begin_src emacs-lisp :tangle no
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
#+end_src
** fish shell
#+begin_src emacs-lisp
(when (and (executable-find "fish")
           (require 'fish-completion nil t))
  (global-fish-completion-mode))
#+end_src
* Others
** [[https://github.com/hlissner/doom-emacs/issues/397][maximize when start up]]
#+begin_src emacs-lisp :tangle no
(add-to-list 'initial-frame-alist '(fullscreen . maximized))
#+end_src

** tab bar
#+begin_src emacs-lisp :tangle no
(use-package centaur-tabs
  :config
  (centaur-tabs-headline-match)
  (centaur-tabs-mode t)
  (setq centaur-tabs-style "box"
        centaur-tabs-height 26
        centaur-tabs-set-icons t
        ;centaur-tabs-plain-icons t
        centaur-tabs-gray-out-icons 'buffer
        centaur-tabs-set-bar 'left
        centaur-tabs-set-modified-marker t)
  :hook
  (+doom-dashboard-mode . centaur-tabs-local-mode)
  (ranger-mode-hook . centaur-tabs-local-mode)
  (calendar-mode . centaur-tabs-local-mode)
  (org-agenda-mode . centaur-tabs-local-mode)
  :bind
  (:map evil-normal-state-map
	  ("g t" . centaur-tabs-forward)
	  ("g T" . centaur-tabs-backward))
  )
;(map! :leader
;      (:prefix-map ("a" . "tabs")
;       :desc "next-tabs" "j" #'centaur-tabs-forward
;       :desc "previous-tab" "k" #'centaur-tabs-backward
;       ))
#+end_src

** EAF
#+begin_src emacs-lisp :tangle no
(use-package eaf
  :load-path "~/.emacs.d/site-lisp/emacs-application-framework"
  ;:load-path "/usr/share/emacs/site-lisp/eaf" ; Set to "/usr/share/emacs/site-lisp/eaf" if installed from AUR
  :init
  (use-package epc :defer t :ensure t)
  (use-package ctable :defer t :ensure t)
  (use-package deferred :defer t :ensure t)
  (use-package s :defer t :ensure t)
  :custom
  (eaf-browser-continue-where-left-off t)
  :config
  (eaf-setq eaf-browser-enable-adblocker "true")
  ;(eaf-bind-key scroll_up "C-n" eaf-pdf-viewer-keybinding)
  ;(eaf-bind-key scroll_down "C-p" eaf-pdf-viewer-keybinding)
  ;(eaf-bind-key take_photo "p" eaf-camera-keybinding)
  ;(eaf-bind-key nil "M-q" eaf-browser-keybinding)) ;; unbind, see more in the Wiki
)
#+end_src
** edit-server
#+begin_src emacs-lisp :tangle no
(use-package edit-server
  :commands edit-server-start
  :init (if after-init-time
              (edit-server-start)
            (add-hook 'after-init-hook
                      #'(lambda() (edit-server-start))))
  :config (setq edit-server-new-frame-alist
                '((name . "Edit with Emacs FRAME")
                  (top . 200)
                  (left . 200)
                  (width . 80)
                  (height . 25)
                  (minibuffer . t)
                  (menu-bar-lines . t)
                  (window-system . x))))
#+end_src
** proxy
#+begin_src emacs-lisp :tangle no
(setq url-proxy-services
   '(("no_proxy" . "^\\(localhost\\|10\\..*\\|192\\.168\\..*\\)")
     ("http" . "proxy.com:8080")
     ("https" . "proxy.com:8080")))
#+end_src

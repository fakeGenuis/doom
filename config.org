#+TITLE: Doom Emacs Configuration

Literate and modular doom emacs configuration.

*Conventions:*
1. doom module respect orders in [[file:~/.config/emacs/templates/init.example.el]]

2. doom module / extra package in secondary section
   With prerequisites in [[file:packages.toml]] (=Arch= only) or package specialized config in [[file:config.el]]

3. one line config goes into [[Tangle]]
   Often a declare in [[file:init.el]] or [[file:packages.el]]

4. extra bootstrap for package tangled to [[file:install.d/]]

5. comment a module with [[kbd:C-c ;][Comment]]

* Tangle
[[file:init.el]]
# FIXME add newline between =noweb-ref=
#+begin_src emacs-lisp :tangle init.el :noweb tangle
;;; init.el -*- lexical-binding: t; -*-

(doom!
 :input
 chinese

 :completion
 <<completion>>

 :ui
 <<ui>>
 hl-todo
 indent-guides
 nav-flash
 ophints
 (vc-gutter +pretty)
 (window-select +numbers)
 workspaces
 ;zen

 :editor
 <<editor>>
 ;file-templates
 fold
 ;multiple-cursors
 parinfer
 snippets
 word-wrap

 :emacs
 ;electric
 ;ibuffer
 (undo +tree)
 vc

 :term
 <<term>>

 :checkers
 <<checkers>>
 (syntax +childframe)

 :tools
 <<tools>>
 ;biblio
 debugger
 docker
 ;editorconfig
 (eval +overlay)
 rgb
 ;upload

 :os
 ;tty

 :lang
 <<lang>>
 ;(cc +lsp)
 emacs-lisp
 markdown

 :email
 <<email>>

 :app
 calendar
 <<app>>

 :config
 literate
 (default +bindings +smartparens))
#+end_src
*The order of modules in above list make sense*

Extra packages from [[https://melpa.org][MELPA]]
#+begin_src emacs-lisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

(package! academic-phrases)

;(package! vlf)

;(package! inherit-org :recipe (:host github :repo "chenyanming/inherit-org"))

(package! pomm)

(package! tldr)
#+end_src

#+PROPERTY: header-args:emacs-lisp :results none
default tangle to [[file:config.el]]
#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

(setq user-full-name "name"
      user-mail-address "***REMOVED***")
#+end_src

For every module in [[file:init.el]] or extra package in [[file:packages.el]], maintain
a bash script to install or uninstall its dependence.
#+PROPERTY: header-args:toml :tangle packages.toml
#+begin_src toml
enable_default=true
#+end_src

* Completion
** company
=company-ispell= needs word dictionary
#+begin_src toml
[company]
packages=["words"]
#+end_src

#+begin_src emacs-lisp :tangle no :noweb-ref completion
(company +childframe)
#+end_src

** vertico
#+begin_src emacs-lisp :tangle no :noweb-ref completion
(vertico +icons +childframe)
#+end_src

[[https://github.com/tumashu/vertico-posframe/issues/16][tumashu/vertico-posframe#16 Disable vertico-posframe when Emacs runs in terminal]]
#+begin_src emacs-lisp
(use-package! vertico-posframe
  :hook (vertico-mode . vertico-multiform-mode)
  :config
  (remove-hook 'vertico-mode #'vertico-posframe-mode)
  (setq vertico-multiform-commands
      '((consult-line
         posframe
         (vertico-posframe-fallback-mode . vertico-buffer-mode))
        (t posframe))))
#+end_src

* UI
** ewal-doom-themes
#+begin_src emacs-lisp :tangle packages.el
(package! ewal-doom-themes)
#+end_src

#+begin_src emacs-lisp
(use-package! ewal-doom-themes)
#+end_src

to refresh wal theme from command line
#+begin_src fish :tangle no
emacs-client -e "(load-theme 'ewal-doom-themes t)"
#+end_src

** doom
#+begin_src emacs-lisp :tangle no :noweb-ref ui
doom
#+end_src

#+begin_src toml
[doom]
packages=[
    "gentium-plus-font",
    "ttf-firacode-nerd"
]
#+end_src

*** Themes
restore last selected theme
#+begin_src emacs-lisp
(defun load-in-doom-dir (file-name)
  (let ((full-name (expand-file-name file-name doom-user-dir)))
    (if (file-exists-p full-name)
        (load full-name))))

(load-in-doom-dir "theme.el")
;; load theme after `doom/restart-and-restore'
(add-hook 'window-setup-hook #'doom-init-theme-h 'append)
#+end_src

difficult to choose theme? random it
#+begin_src emacs-lisp
(defun +my/random-theme ()
  (interactive)
  (let* ((all-themes (custom-available-themes))
         (next-theme (nth (random (length all-themes)) all-themes)))
    (consult-theme next-theme)))

(map! :leader
      (:prefix "t"
       :desc "Random theme" "t" #'+my/random-theme))
#+end_src

track current theme for later load
#+begin_src emacs-lisp
(defun +my/save-theme (prev new-theme &rest args)
  (let
      ((theme-config-file (expand-file-name "theme.el" doom-user-dir)))
    (write-region
     (format "(setq doom-theme '%s)\n" new-theme) nil theme-config-file)
    (message "Switch to theme: %s" new-theme)))

(add-variable-watcher 'doom-theme #'+my/save-theme)
#+end_src

*** Fonts
[[https://github.com/doomemacs/doomemacs/issues/6131][doomemacs/doomemacs#6131 DPI settings are not respected by "setq doom-font"]]
~FiraCode Nerd Font~ better with icons in =vterm=
~Symbola~ better with unicode emoji in doom module doc

#+begin_src emacs-lisp
(setq doom-font (font-spec :family "mononokiLiga Nerd Font Mono" :size 13.0)
      ;; big font mode resize serif-font and variable-pitch-font also
      ;; doom-big-font (font-spec :family "MononokiLiga Nerd Font Mono" :size (+my/font-size 17))
      doom-unicode-font (font-spec :family "FiraCode Nerd Font Mono")
      doom-serif-font (font-spec :family "Gentium Book Plus" :size 13.0))
      ;; doom-variable-pitch-font (font-spec :family "Sarasa UI SC" :size 14.5))

;; load fonts after `doom/restart-and-restore'
(add-hook 'window-setup-hook #'doom-init-fonts-h 'append)
#+end_src
"mononokiLiga" in [[file:~/.local/share/fonts/]]

** doom-dashboard
#+begin_src emacs-lisp :tangle no :noweb-ref ui
doom-dashboard
#+end_src

References
- [[https://discourse.doomemacs.org/t/how-to-change-your-splash-screen/57][How to change your splash screen - Configuration - Doom Emacs Discourse]]
- [[https://stackoverflow.com/a/25158644][elisp - Read from a file into a Emacs lisp list - Stack Overflow]]

#+begin_src emacs-lisp
(defun my-weebery-is-always-greater (splash-file-name)
  ;; generated by ~figlet -W DOOM EMACS~
  (let* ((banner (s-split "\n" (f-read splash-file-name) t))
         (longest-line (apply #'max (mapcar #'length banner))))
    (put-text-property
     (point)
     (dolist (line banner (point))
       (insert (+doom-dashboard--center
                +doom-dashboard--width
                (concat line (make-string (max 0 (- longest-line (length line))) 32)))
               "\n"))
     'face 'doom-dashboard-banner)))

(let ((splash-file-name (expand-file-name "splash" doom-user-dir)))
  (if (file-exists-p splash-file-name)
    (setq +doom-dashboard-ascii-banner-fn (lambda () (my-weebery-is-always-greater splash-file-name)))))
#+end_src

add =vterm= entry
#+begin_src emacs-lisp
(add-to-list '+doom-dashboard-menu-sections
             '("Open vterm"
               :icon (all-the-icons-octicon "terminal" :face 'doom-dashboard-menu-title)
               :when (modulep! :term vterm)
               :face (:inherit (doom-dashboard-menu-title bold))
               :action +vterm/here))
#+end_src

** emoji
#+begin_src toml
[emoji]
packages=["noto-fonts-emoji"]
#+end_src

#+begin_src emacs-lisp :tangle no :noweb-ref ui
(emoji +unicode)
#+end_src

** ligatures
#+begin_src emacs-lisp :tangle no :noweb-ref ui
(ligatures +extra)
#+end_src

check code ligatures, *bold* and /italic/ enabled
== <- -> <= => != == >= <== ==> === ?= :=

[[https://emacs-china.org/t/org-source-code/9762/8][求一款适合阅读 org source code 的主题 - #8，来自 lijigang - Org-mode - Emacs China]]
#+begin_src emacs-lisp
(with-eval-after-load "ligatures"
  (plist-put! +ligatures-extra-symbols
              :private    "")
  (global-prettify-symbols-mode))
#+end_src

** modeline
#+begin_src emacs-lisp :tangle no :noweb-ref ui
modeline
#+end_src

#+begin_src emacs-lisp
(after! doom-modeline
  ;; The limit of the window width.
  ;; If `window-width' is smaller than the limit, some information won't be displayed.
  (setq doom-modeline-window-width-limit fill-column)
  (setq doom-modeline-enable-word-count nil)
  (setq doom-modeline-persp-name t)
  (setq doom-modeline-persp-icon nil)
  (setq doom-modeline-workspace-name nil))
#+end_src

[[https://github.com/seagle0128/doom-modeline/issues/194][one single modeline when split]]
#+begin_src emacs-lisp :tangle no
;; wrap your mode-line-format
;((:eval (when (doom-modeline--active) .)))
(set-face-attribute 'mode-line-inactive nil
                    :underline t
                    :background (face-background 'default))
#+end_src

** popup
#+begin_src emacs-lisp :tangle no :noweb-ref ui
(popup +defaults)
#+end_src

#+begin_src emacs-lisp
(setq split-width-threshold 120)
#+end_src

see ~display-buffer-alist~
#+begin_src emacs-lisp
(when (modulep! :ui popup)
  (set-popup-rules!
    '(("^\\*\\([Hh]elp\\|Apropos\\)"  ; help messages
       :ignore t)
      ("^\\*eww\\*"  ; `eww' (and used by dash docsets)
       :ignore t)
      ("^\\*\\(?:Wo\\)?Man "
       :ignore t)
      ("^\\*info\\*$"
       :ignore t))))
#+end_src
use ~+popup-mode~ to toggle popup mode globally.

** unicode
#+begin_src toml
[unicode]
packages=[
    "quivira",
    "ttf-sarasa-gothic-sc",
    "otf-comicshanns-nerd"
]
#+end_src

#+begin_src emacs-lisp :tangle no :noweb-ref ui
unicode
#+end_src

- doom way of change =unicode= font
get current display font by =SPC h '=
see [[https://en.wikipedia.org/wiki/Plane_(Unicode)][Plane (Unicode) - Wikipedia]] for unicode block name
#+begin_src emacs-lisp
(after! unicode-fonts
  (push "Noto Color Emoji" (cadr (assoc "Miscellaneous Symbols and Pictographs" unicode-fonts-block-font-mapping)))
  (dolist (unicode-block '("Letterlike Symbols"))
    (push "Quivira" (cadr (assoc unicode-block unicode-fonts-block-font-mapping)))))
#+end_src

- old school way of change =unicode= font
[[https://idiocy.org/emacs-fonts-and-fontsets.html][Emacs, fonts and fontsets]]
#+begin_src emacs-lisp :tangle no
(defun +my/ligature-font ()
  (dolist (chars '("ℤ" "ℝ" "ℕ"))
      (set-fontset-font (frame-parameter nil 'font) (string-to-char chars) "DejaVu Math TeX Gyre") nil 'prepend)
  ;; (set-fontset-font t ?𝔽 "DejaVu Math TeX Gyre")
  (set-fontset-font (frame-parameter nil 'font) '(?𝔸 . ?𝕐) "DejaVu Math TeX Gyre") nil 'prepend)
#+end_src

*** Chinese fonts
- [[https://emacs.stackexchange.com/questions/68644/doom-emacs-setting-font-for-devanagari-characters][Doom Emacs - Setting Font for Devanagari characters - Emacs Stack Exchange]]
- [[https://rongcuid.github.io/posts/2021-04-02-Doom-Emacs-CJK.html][Rongcui Dong's Site - 如何在 Doom Emacs 中设置中文]]
- [[https://emacs-china.org/t/doom-emacs/16809/7][doom emacs 中文字体与默认字体冲突 - #7，来自 HepIsaac - Emacs-general - Emacs China]]
- [[https://emacs-china.org/t/doom-emacs/9628/8][doom emacs 下中文字体的设置 - #8，来自 RicardoM - Emacs-general - Emacs China]]
- [[https://baohaojun.github.io/blog/2013/05/09/0-emacs-font-global-scaling.html][全局放大 Emacs 字体]]
- [[https://baohaojun.github.io/blog/2012/12/19/perfect-emacs-chinese-font.html][狠狠地折腾了一把 Emacs 中文字体]]
- [[https://github.com/hick/emacs-chinese#org-的中文问题][GitHub - hick/emacs-chinese: Emacs 相关中文问题以及解决方案]]
- [[https://github.com/doomemacs/doomemacs/issues/5092][doomemacs/doomemacs#5092 (invalid-read-syntax . "#") on running doom doctor]]

#+begin_src emacs-lisp
(defun +my/cjk-font()
  (dolist (charset '(kana han cjk-misc))
    (set-fontset-font (frame-parameter nil 'font) charset
                      (font-spec :family "Kosefont JP"))))
#+end_src

*** other faces
#+begin_src emacs-lisp
(defun +my/better-font (font-size)
  (interactive "N")
  (if (display-graphic-p)
      (progn
        (set-face-font 'mode-line (font-spec :family "ComicShannsMono Nerd Font" :size (+ 0.0 font-size)))
        (set-face-font 'mode-line-inactive (font-spec :family "ComicShannsMono Nerd Font" :size (+ 0.0 font-size)))
        (set-face-font 'font-lock-comment-face (font-spec :family "Cascadia Code Cur" :size (+ 0.0 font-size)))
        (+my/cjk-font))))
#+end_src

"Cascadia cur" in [[file:~/.local/share/fonts/]]

*** Hooks
Visual effect test
#+begin_src python :tangle no
  1234567890-+abcdedfghijklmn
# 1234567890-+abcdedfghijklmn
# 12345然后这是中文对齐klmn
#+end_src

change =doom/reload-font= for not display all =unicode= by ~doom-unicode-font~.
#+begin_src emacs-lisp
(defun +my/doom-init-fonts-h (&optional reload)
  "Loads `doom-font'."
  (dolist (map `((default . ,doom-font)
                 (fixed-pitch . ,doom-font)
                 (fixed-pitch-serif . ,doom-serif-font)
                 (variable-pitch . ,doom-variable-pitch-font)))
    (when-let* ((face (car map))
                (font (cdr map)))
      (dolist (frame (frame-list))
        (when (display-multi-font-p frame)
          (set-face-attribute face frame
                              :width 'normal :weight 'normal
                              :slant 'normal :font font)))
      (let ((new-specs (doom--make-font-specs face font)))
        ;; Don't save to `customized-face' so it's omitted from `custom-file'
        ;;(put face 'customized-face new-specs)
        (custom-push-theme 'theme-face face 'user 'set new-specs)
        (put face 'face-modified nil))))
  ;; Users should inject their own font logic in `after-setting-font-hook'
  (run-hooks 'after-setting-font-hook))
(advice-add 'doom-init-fonts-h :override #'+my/doom-init-fonts-h)
#+end_src

#+begin_src emacs-lisp
(defun +my/init-font (&optional frame)
  (if frame
    (with-selected-frame frame
      (+my/better-font 14.3))
    (+my/better-font 14.3)))

(if (and (fboundp 'daemonp) (daemonp))
    (add-hook 'after-make-frame-functions #'+my/init-font)
  (add-hook 'doom-init-ui-hook #'+my/init-font))
(add-hook 'doom-load-theme-hook #'+my/init-font)

;;https://emacs.stackexchange.com/a/47092
;; DONE restore ligature after exit big font mode
(add-hook 'doom-big-font-mode-hook
          (lambda ()
            (if doom-big-font-mode
                (progn
                  (+my/better-font 22.0)
                  (add-hook 'doom-big-font-mode-hook #'+my/init-font))
              (remove-hook 'doom-big-font-mode-hook #'+my/init-font))))

(add-hook 'writeroom-mode-enable-hook (lambda () (+my/better-font 20.5)))
(add-hook 'writeroom-mode-disable-hook #'+my/init-font)
#+end_src

** Others
=all-the-icons= font
#+begin_src emacs-lisp
(after! all-the-icons
  (setq all-the-icons-scale-factor 0.9))
#+end_src

=all-the-icons= "arrow_back" error display in =doom-docs-header=
#+begin_src emacs-lisp :tangle no
(advice-add 'doom-docs--display-menu-h :override #'ignore)
#+end_src

Transparency
#+begin_src emacs-lisp
(set-frame-parameter (selected-frame) 'alpha '(85 . 50))
(add-to-list 'default-frame-alist '(alpha . (85 . 50)))

(defun toggle-transparency ()
  (interactive)
  (let ((alpha (frame-parameter nil 'alpha)))
    (set-frame-parameter
     nil 'alpha
     (if (eql (cond ((numberp alpha) alpha)
                    ((numberp (cdr alpha)) (cdr alpha))
                    ;; Also handle undocumented (<active> <inactive>) form.
                    ((numberp (cadr alpha)) (cadr alpha)))
              100)
         '(85 . 50) '(100 . 100)))))

(map! :leader
      (:prefix "t"
       :desc "Toggle transparency"    "T" #'toggle-transparency))
#+end_src

Line numbers
#+begin_src emacs-lisp
(setq display-line-numbers-type nil)
#+end_src

notify initial time
#+begin_src emacs-lisp
(defun notify-init-time ()
  (require 'notifications)
  (notifications-notify
   :image-path (expand-file-name "notify.jpg" doom-user-dir)
   :title "Daemon"
   :sound-name "bell"
   :body (format "Initialed in %0.3fs" doom-init-time)))

(add-hook 'doom-init-ui-hook #'notify-init-time)
#+end_src

* Editor
** evil
#+begin_src emacs-lisp :tangle no :noweb-ref editor
(evil +everywhere)
#+end_src

[[https://emacs.stackexchange.com/questions/28135/in-evil-mode-how-can-i-prevent-adding-to-the-kill-ring-when-i-yank-text-visual][In Evil mode, how can I prevent adding to the kill ring when I yank text, vis...]]
#+begin_src emacs-lisp
(after! evil
  (setq evil-kill-on-visual-paste nil)
  ;; Disabling cursor movement when exiting insert mode
  (setq evil-move-cursor-back nil))
#+end_src

[[https://github.com/doomemacs/doomemacs/issues/6478][doomemacs/doomemacs#6478 `evil-ex-search` skips matches in folded regions (in...)]]
#+begin_src emacs-lisp :tangle no
(after! evil
  (evil-select-search-module 'evil-search-module 'isearch))
#+end_src

** format
#+begin_src emacs-lisp :tangle no :noweb-ref editor
(format +onsave)
#+end_src

*prerequisites depends on what you un-comment in =lang= section*
#+begin_src toml
[format]
packages=[
    "prettier",
    "shfmt",
    "clang-format-static-bin",
    "python-black"
]
#+end_src

** Others
About Parentheses
#+begin_src emacs-lisp :tangle no
(setq show-paren-style 'expression)
#+end_src

* Emacs
** dired
#+begin_src emacs-lisp
(use-package! dired
  :commands dired-jump
  :custom
  (dired-recursive-deletes 'always)
  (delete-by-moving-to-trash t)
  (dired-clean-confirm-killing-deleted-buffers nil)
  (dired-kill-when-opening-new-dired-buffer t)
  (dired-dwim-target t)
  (dired-listing-switches
        "-l --almost-all --sort=time --human-readable --time-style=long-iso --group-directories-first --no-group")
  :config
  ;; Dirvish respects all the keybindings in `dired-mode-map'
  (map!
   :map dired-mode-map
   :ng "h" #'dired-up-directory
   :ng "l" #'dired-find-file
   :n "." #'dired-omit-mode))
#+end_src

ignore =dired-mode= buffers in =persp-mode=
[[https://emacs.stackexchange.com/questions/59177/how-to-tell-persp-mode-to-ignore-some-buffers-by-major-mode][How to tell persp-mode to ignore some buffers by major-mode - Emacs Stack Exc...]]
[[https://github.com/seagle0128/.emacs.d/blob/dcc772d05da04042b39d1660f79f599e030188ff/lisp/init-persp.el#L117-L129][.emacs.d/init-persp.el at dcc772d05da04042b39d1660f79f599e030188ff · seagle01...]]
[[https://github.com/Bad-ptr/persp-mode.el#set-persp-add-buffer-on-after-change-major-mode-to-auto-add-more-buffers][GitHub - Bad-ptr/persp-mode.el: named perspectives(set of buffers/window conf...]]
#+begin_src emacs-lisp
(add-hook 'persp-common-buffer-filter-functions
          #'(lambda (b)
              (eq (buffer-local-value 'major-mode b) 'dired-mode)))
#+end_src

#+begin_src emacs-lisp
(use-package! dired-x
  :hook (dired-mode . dired-omit-mode)
  :config
  ;; Make dired-omit-mode hide all "dotfiles"
  (setq dired-omit-files
        (concat dired-omit-files "\\|^\\..*$")))
#+end_src

** diredfl
#+begin_src emacs-lisp :tangle packages.el
(package! diredfl)
#+end_src

Additional syntax highlighting for dired
#+begin_src emacs-lisp
(use-package diredfl
  :hook
  ((dired-mode . diredfl-mode)
   ;; highlight parent and directory preview as well
   (dirvish-directory-view-mode . diredfl-mode))
  :config
  (set-face-attribute 'diredfl-dir-name nil :bold t))
#+end_src

** dirvish
#+begin_src toml
[dirvish]
packages=[
    "fd",
    # "imagemagick",
    # "ffmpegthumbnailer",
    # "mediainfo",
    "tar",
    "unzip"
]
#+end_src

#+begin_src emacs-lisp :tangle packages.el
(package! dirvish)
#+end_src

#+begin_src emacs-lisp
(use-package! dirvish
  :commands (dirvish dirvish-side)
  :init
  (map!
   (:leader
    :prefix "o"
    :desc "dirvish-side" "s" #'dirvish-side))
  :custom
  (dirvish-side-width 25)
  (dirvish-cache-dir "~/.cache/dirvish/")
  ;; (dirvish-reuse-session nil)
  ;; TODO fix line height
  (dirvish-header-line-height '(20 . 37))
  (dirvish-mode-line-height '(20 . 37))
  (dirvish-quick-access-entries
   '(("h" "~/"                          "Home")
     ("d" "~/Downloads/"                "Downloads")
     ("m" "/mnt/Media/"                 "Media")
     ("t" "~/.local/share/Trash/files/" "TrashCan")))
  :config
  (dirvish-override-dired-mode)
  (dirvish-side-follow-mode)
  ;; (dirvish-header-line-format '(:left (path) :right (free-space)))
  (setq dirvish-mode-line-format
        '(:left
          (sort file-time " " file-size symlink) ; it's ok to place string inside
          :right
          ;; For `dired-filter' users, replace `omit' with `filter' segment defined below
          (omit yank index)))
  (setq dirvish-attributes '(vc-state subtree-state all-the-icons collapse git-msg file-size))
  ;; Maybe the icons are too big to your eyes
  (setq dirvish-all-the-icons-height 0.8)
  ;; In case you want the details at startup like `dired'
  (setq dirvish-hide-details t)
  ;; (dirvish-peek-mode)
  (map!
   :map dired-mode-map
   "TAB" #'dirvish-subtree-toggle
   ;; :gn "r"   #'dirvish-roam
   :gn "*"   #'dirvish-mark-menu
   :gn "M-b" #'dirvish-quick-access
   :gn "M-f" #'dirvish-layout-toggle
   :gn "M-l" #'dirvish-ls-switches-menu
   :gn "M-n" #'dirvish-history-go-forward
   :gn "M-p" #'dirvish-history-go-backward
   :gn "M-s" #'dirvish-setup-menu
   :gn "N"   #'dirvish-narrow
   :gn "b"   #'dirvish-history-jump
   :gn "f"   #'dirvish-file-info-menu
   :gn "o"   #'dirvish-quicksort
   :gn "q"   #'dirvish-quit
   :gn "y"   #'dirvish-yank-menu))
   ;; [remap dired-sort-toggle-or-edit] #'dirvish-quicksort
   ;; [remap dired-do-redisplay] #'dirvish-ls-switches-menu
   ;; [remap dired-summary] #'dirvish-dispatch
#+end_src

* Term
** vterm
#+begin_src toml
[vterm]
packages=["libvterm"]
#+end_src

#+begin_src emacs-lisp :tangle no :noweb-ref term
vterm
#+end_src

#+begin_src emacs-lisp
(defun +my/vterm-switch ()
  "Switch to vterm buffer in `Term' workspace.
If `Term' workspace not exist, create it.
If no vterm buffer in `Term' workspace, create it."
  (interactive)
  (+workspace-switch "Term" t)
  (let ((vterm-buffer
         ;; return first vterm buffer in `Term' workspace
         (catch 'foo
           (dolist (buffer (+workspace-buffer-list))
             (let ((bn (buffer-name buffer)))
               (when (and bn
                          ;; https://stackoverflow.com/a/2238589
                          (with-current-buffer bn
                            (eq major-mode 'vterm-mode)))
                 (throw 'foo bn))))))
        (display-buffer-alist))
    (if vterm-buffer
        (switch-to-buffer vterm-buffer)
      ;; create vterm buffer if not exist
      (vterm vterm-buffer-name))))
#+end_src

#+begin_src emacs-lisp
(defun +my/vterm-cd-project-root ()
  (interactive)
  (vterm-send-string "cd $PROOT")
  (vterm-send-return))
#+end_src

#+begin_src emacs-lisp
(after! vterm
  (setq vterm-shell "/usr/bin/fish"
        vterm-buffer-name-string "vterm %s"
        vterm-ignore-blink-cursor nil)
  (map! :leader
        (:prefix "o"
         ;; default to vterm at current file directory
         ;; `C-Return' to project root
         :desc "Toggle vterm popup" "t" (cmd!! #'+vterm/toggle t)
         :desc "Open vterm here" "T" (cmd!! #'+vterm/here t))
        (:prefix "b"
         :desc "Switch to vterm buffer" "v" #'+my/vterm-switch))
  ;; TODO fixed-pitch in bpytop like
  ;; (add-hook 'vterm-mode-hook
  ;;           (lambda ()
  ;;             (set (make-local-variable 'buffer-face-mode-face) 'fixed-pitch
  ;;                  (buffer-face-mode t))))
  (define-key vterm-mode-map (kbd "M-q") #'vterm-send-escape)
  (define-key vterm-mode-map [ (control return) ] #'+my/vterm-cd-project-root)
  (dolist (num (number-sequence 0 9))
      (define-key vterm-mode-map (kbd (format "M-%d" num)) nil)))
#+end_src

** Others
Colored output issues
[[https://wiki.archlinux.org/index.php/Emacs#Colored_output_issues][Emacs - ArchWiki]]
#+begin_src emacs-lisp :tangle no
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
#+end_src

* Checkers
** Spell checker
#+begin_src toml
[spell]
packages=["aspell", "aspell-en"]
#+end_src

#+begin_src emacs-lisp :tangle no :noweb-ref checkers
(spell +flyspell
       +everywhere)
#+end_src

** COMMENT grammar
#+begin_src toml
[grammar]
packages=["languagetool"]
#+end_src

#+begin_src emacs-lisp :tangle no :noweb-ref checkers
grammar
#+end_src

disable annoying =writegood-mode=
#+begin_src emacs-lisp :tangle packages.el
(package! writegood-mode
  :disable t)
#+end_src

* Tools
** COMMENT editorconfig
#+begin_src toml
[editorconfig]
packages=["emacs-editorconfig-git"]
#+end_src

#+begin_src emacs-lisp :tangle no :noweb-ref tools
editorconfig
#+end_src

** lookup
#+begin_src toml
[lookup]
packages=["sqlite", "wordnet-cli"]
#+end_src

#+begin_src emacs-lisp :tangle no :noweb-ref tools
(lookup
 +docsets
 +dictionary)
#+end_src

#+begin_src emacs-lisp
(add-to-list '+lookup-provider-url-alist '("Brave" "https://search.brave.com/search?q=%s"))
#+end_src

** lsp
#+begin_src emacs-lisp :tangle no :noweb-ref tools
lsp
#+end_src

[[https://github.com/emacs-lsp/lsp-ui/issues/561#issuecomment-1080363562][emacs-lsp/lsp-ui#561 Scaling/Resizing of sideline fonts]]
#+begin_src emacs-lisp
(after! lsp-ui
  ;; 2022-03-28 - fix sideline height computation
  (defun lsp-ui-sideline--compute-height nil
    "Return a fixed size for text in sideline."
    (let ((fontHeight (face-attribute 'lsp-ui-sideline-global :height)))
      (if (null text-scale-mode-remapping)
          '(height
            (if (floatp fontHeight) fontHeight
              (/ (face-attribute 'lsp-ui-sideline-global :height) 100.0))

            ;; Readjust height when text-scale-mode is used
            (list 'height
                  (/ 1 (or (plist-get (cdr text-scale-mode-remapping) :height)
                           1)))))))

  ;; 2022-03-28 - fix sideline alignment
  (defun lsp-ui-sideline--align (&rest lengths)
    "Align sideline string by LENGTHS from the right of the window."
    (list (* (window-font-width nil 'lsp-ui-sideline-global)
             (+ (apply '+ lengths) (if (display-graphic-p) 1 2))))))
#+end_src

** magit
#+begin_src emacs-lisp :tangle no :noweb-ref tools
magit
#+end_src

[[https://github.com/TheLocehiliosan/yadm][GitHub - TheLocehiliosan/yadm: Yet Another Dotfiles Manager]]
[[https://www.reddit.com/r/emacs/comments/gjukb3/yadm_magit/][reddit:yadm+magit]]

~tramp~ from ~Melpa~ buggy, install it from ~aur~.
#+begin_src emacs-lisp
(use-package! tramp
  :commands yadm-status
  :init
  (defun yadm-status ()
    (interactive)
    (magit-status "/yadm::"))
  (map! :leader
        (:prefix "g"
         :desc "yadm-status" "a" #'yadm-status))
  :config
  (add-to-list 'tramp-methods
               '("yadm"
                 (tramp-remote-shell "/bin/bash")
                 (tramp-remote-shell-args ("-c"))
                 (tramp-login-program "yadm")
                 (tramp-login-args (("enter"))))))
                 ;; (tramp-login-env (("SHELL") ("/bin/bash")))))
#+end_src

can't set shell rightly, change fish prompt in tramp instead. see [[file:~/.config/fish/config.fish]]

** pdf
#+begin_src emacs-lisp :tangle no :noweb-ref tools
pdf
#+end_src

default pdf viewer in emacs
[[http://alberto.am/2020-04-11-pdf-tools-as-default-pdf-viewer.html][pdf-tools as the default PDF viewer in Emacs]]

#+begin_src emacs-lisp
;; overwrite doom's fit-page
(use-package! pdf-tools
  :mode ("\\.pdf\\'" . pdf-view-mode)
  :magic ("%PDF" . pdf-view-mode)
  :config
  (setq-default pdf-view-display-size 'fit-width))

(after! latex (setq +latex-viewers '(pdf-tools evince okular)))

;; to use pdfview with auctex
(after! auctex
  (add-to-list 'TeX-view-program-selection '(output-pdf "PDF Tools"))
  (setq TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))))
;;(TeX-source-correlate-start-server t)
;; not sure if last line is neccessary

;; to have the buffer refresh after compilation
(add-hook 'TeX-after-compilation-finished-functions
          #'TeX-revert-document-buffer)

;; always use midnight view mode
(add-hook! 'pdf-view-mode-hook #'pdf-view-midnight-minor-mode)
#+end_src

** COMMENT math-preview
#+begin_src emacs-lisp
(package! math-preview)
#+end_src

#+begin_src toml
["math-preview"]
packages=["npm"]
#+end_src

#+begin_src bash
git clone https://gitlab.com/matsievskiysv/math-preview ~/.local/lib
cd ~/.local/lib/math-preview && npm i
#+end_src

preview latex formulas
#+begin_src emacs-lisp
(use-package! math-preview
  :defer t
  :config
  (setq math-preview-command "~/.local/lib/math-preview/math-preview.js")
  (setq math-preview-tex-marks '(("\\begin{equation}" "\\end{equation}")
                                 ("\\begin{equation*}" "\\end{equation*}")
                                 ("\\begin{align}" "\\end{align}")
                                 ("\\begin{align*}" "\\end{align*}")
                                 ("\\[" "\\]")
                                 ("\\(" "\\)")
                                 ("$$" "$$"))))
  ;; (math-preview-preprocess-functions '((lambda (s)
  ;;                                        (concat "{\\color{white}" s "}")))))
#+end_src

* Lang
** Latex
#+begin_src toml
[latex]
packages=["miktex-git", "texlab"]
#+end_src

#+begin_src emacs-lisp :tangle no :noweb-ref lang
(latex
 +lsp
 +fold
 +cdlatex)
#+end_src

#+begin_src emacs-lisp
(after! evil-tex
  (setq evil-tex-include-newlines-in-envs nil
        evil-tex-select-newlines-with-envs nil))
#+end_src

=cdlatex=
#+begin_src emacs-lisp
(map! :after cdlatex :map cdlatex-mode-map
  :i "TAB" #'cdlatex-tab)
#+end_src

word completion along with =(:lang (latex +lsp))=
see =company-backends= variable docs
[[https://github.com/hlissner/doom-emacs/issues/5672][set-company-backend! appending instead of prepending · Issue #5672 · doomemac...]]
#+begin_src emacs-lisp
(setq-hook! 'LaTeX-mode-hook +lsp-company-backends '(:separate company-capf company-yasnippet company-dabbrev))
#+end_src

clean intermediate files
#+begin_src emacs-lisp
(after! latex
  (setq LaTeX-clean-intermediate-suffixes (delete "\\.synctex\\.gz"  LaTeX-clean-intermediate-suffixes)
        LaTeX-clean-intermediate-suffixes (append LaTeX-clean-intermediate-suffixes (list "\\.dvi" "\\.fdb_latexmk"))
        TeX-clean-confirm nil))
#+end_src

add =XeTeX= mode in =TeX/LaTeX=
[[https://tex.stackexchange.com/a/21205][emacs - AUCTeX and XeTeX - TeX - LaTeX Stack Exchange]]

#+begin_src emacs-lisp
(after! latex
  (add-to-list 'TeX-command-list
               '("XeLaTeX" "%`xelatex%(mode) %(extraopts) %S%(PDFout)%' %t" TeX-run-TeX nil t)))
;; (setq TeX-command-default "XeLaTeX")))
;; (setq TeX-save-query nil)))
;; (setq TeX-show-compilation nil)))
#+end_src

#+begin_src emacs-lisp
(map!
  :map LaTeX-mode-map
  :i "C-l" #'sp-up-sexp
  :i "C-h" #'sp-down-sexp)
#+end_src

** lua
#+begin_src toml
[lua]
packages=["lua-language-server"]
#+end_src

#+begin_src emacs-lisp :tangle no :noweb-ref lang
(lua +lsp)
#+end_src

lsp support
#+begin_src emacs-lisp
(after! lua-mode
  (setq lsp-clients-lua-language-server-bin "/usr/bin/lua-language-server")
  (setq lsp-clients-lua-language-server-main-location "/usr/lib/lua-language-server/bin/main.lua")
  (setq lsp-clients-lua-language-server-args '("-E" "--logpath" "/tmp/lua-language-server"))
  ;; (lsp-clients-lua-language-server-command '("lua-language-server" "-E"))
  (setq lsp-clients-lua-language-server-command nil))
#+end_src

ligatures
#+begin_src emacs-lisp
(after! lua-mode
  (set-ligatures! 'lua-mode
    :def "function"
    :return "return"
    :and "and"
    :or "or"
    :not "not"
    :true "true"
    :false "false"
    :for "for"))
#+end_src

** org
#+begin_src emacs-lisp :tangle no :noweb-ref lang
(org
 +hugo
 +dragndrop
 +noter
 +present
 +pandoc
 +pretty
 +jupyter
 +roam2)
#+end_src

References
- [[https://github.com/daviwil/emacs-from-scratch/blob/c55d0f5e309f7ed8ffa3c00bc35c75937a5184e4/init.el][emacs-from-scratch/init.el at c55d0f5e309f7ed8ffa3c00bc35c75937a5184e4 · davi...]]
- [[https://emacs.stackexchange.com/a/63793][How to copy links OUT of org-mode? - Emacs Stack Exchange]]
- [[https://stackoverflow.com/a/50875921][emacs - org-mode capture : dynamic file name - Stack Overflow]]

*** agenda
#+begin_src emacs-lisp
(setq org-directory "~/org/"
      org-agenda-files '("agenda/todos.org" "agenda/projects.org")
      org-agenda-start-with-log-mode t
      org-agenda-prefix-format '((agenda . " %i %-12:c%?-12t% s")
                                 (todo   . " ")
                                 (tags   . " %i %-12:c")
                                 (search . " %i %-12:c"))
      org-log-done 'time
      org-log-into-drawer t
      org-startup-numerated t
      org-ellipsis "⤵"
      org-image-actual-width 400
      org-duration-format '((special . h:mm))
      org-startup-with-inline-images t
      org-refile-targets '(("archive.org" :maxlevel . 1)
                           ("projects.org")))
      ;; org-link-descriptive t)
#+end_src

custom agenda view from
[[https://www.labri.fr/perso/nrougier/GTD/index.html#org9f2e38c][Get Things Done with Emacs]]
#+begin_src emacs-lisp
(setq org-agenda-custom-commands
      '(("g" "Get Things Done (GTD)"
         ((agenda ""
                  ((org-agenda-skip-function
                    '(org-agenda-skip-entry-if 'deadline))
                   (org-deadline-warning-days 0)
                   (org-agenda-start-day "-1d")
                   (org-agenda-span 4)))
          (todo "STRT"
                ((org-agenda-skip-function
                  '(org-agenda-skip-entry-if 'deadline))
                 (org-agenda-prefix-format "  %i %-12:c [%e] ")
                 (org-agenda-overriding-header "\nTasks\n")))
          (tags-todo "inbox"
                     ((org-agenda-prefix-format "  %?-12t% s")
                      (org-agenda-overriding-header "\nInbox\n")))
          (tags "CLOSED>=\"<today>\""
                ((org-agenda-overriding-header "\nCompleted today\n")))))))
#+end_src

capture todos
#+begin_src emacs-lisp
(after! org-capture
  (setq org-capture-templates
        `(("i" "Inbox" entry (file "agenda/todos.org")
           "* TODO %?\n%U\n%i" :empty-lines 1 :prepend t)
          ("@" "Inbox [mu4e]" entry (file "agenda/todos.org")
           "* TODO Reply to \"%a\"\n%U\n%i" :empty-lines 1 :prepend t)
          ("n" "Inbox [note]" entry (file "agenda/todos.org")
           "* TODO [%a] %? %^G\n%U\n%i" :empty-lines 1 :prepend t))))
#+end_src

#+begin_src emacs-lisp
(defun org-copy-link-url ()
  (interactive)
  (kill-new (org-element-property :raw-link (org-element-context))))

(after! org
  ;;(org-clock-persist 'history)
  (org-clock-persistence-insinuate)
  ;; display inline images
  ;; (org-display-inline-images)
  ;; Save Org buffers after refiling!
  (advice-add 'org-refile :after 'org-save-all-org-buffers)
  (map! :map org-mode-map
        :localleader
        "y" #'org-copy-link-url))
#+end_src

*** unfold search
[[https://github.com/doomemacs/doomemacs/issues/6478#issuecomment-1328110153][doomemacs/doomemacs#6478 `evil-ex-search` skips matches in folded regions (in...)]]
#+begin_src emacs-lisp
(after! org-fold-core
  (defun org-show-current-heading-tidily ()
    (interactive)  ;Inteactive
    "Show next entry, keeping other entries closed."
    (if (save-excursion (end-of-line) (outline-invisible-p))
        (progn (org-show-entry) (show-children))
      (setq-local my:current_line (line-number-at-pos))
      (outline-back-to-heading)
      (unless (and (bolp) (org-on-heading-p))
        (org-up-heading-safe)
        (hide-subtree)
        (error "Boundary reached"))
      (org-overview)
      (org-reveal t)
      (org-show-entry)
      (show-children)
      (goto-line my:current_line)))

  (defun qw/search-buffer ()
    (interactive)
    (org-fold-show-all)
    (+default/search-buffer)
    (org-show-current-heading-tidily)))
#+end_src

*** org-noter
#+begin_src emacs-lisp
(after! org-noter
  (org-noter-set-doc-split-fraction '(0.75 . 0.25)))
#+end_src

*** org-roam
#+begin_src emacs-lisp
(after! org-roam
  (setq org-roam-directory (file-truename "~/org/roam"))
  (setq org-roam-dailies-capture-templates
   '(("d" "default" entry "* %?\n[%<%Y-%m-%d %H:%M>]\n"
      :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n")))))
#+end_src

*** org-pandoc-import
#+begin_src emacs-lisp :tangle packages.el
(package! org-pandoc-import
  :recipe (:host github
           :repo "tecosaur/org-pandoc-import"
           :files ("*.el" "filters" "preprocessors")))
#+end_src

#+begin_src emacs-lisp
(use-package! org-pandoc-import
  :defer t
  :after org)
#+end_src

*** Color ~shell~ block output
[[https://emacs.stackexchange.com/a/52238][How do I attach a custom function to process org-mode babel shell output?]]
#+BEGIN_SRC emacs-lisp :tangle no
(use-package cl-lib
  :init
  (defun org-redisplay-ansi-source-blocks ()
    "Refresh the display of ANSI text source blocks."
    (interactive)
    (org-element-map (org-element-parse-buffer) 'src-block
      (lambda (src)
        (when (equalp "ansi" (org-element-property :language src))
          (let ((begin (org-element-property :begin src))
                (end (org-element-property :end src)))
            (ansi-color-apply-on-region begin end))))))
  :custom
  (add-to-list 'org-babel-after-execute-hook #'org-redisplay-ansi-source-blocks)
  (setq org-babel-default-header-args:shell
        '((:results . "output verbatim drawer")
          (:wrap . "src ansi"))))
#+END_SRC

*** others
org-src
[[https://github.com/hlissner/doom-emacs/issues/5436][hlissner/doom-emacs#5436 org-src-window-setup not working correctly]]
#+begin_src emacs-lisp
(after! org
  (setq org-src-window-setup 'reorganize-frame)
  (set-popup-rule! "^\\*Org Src" :ignore t))
#+end_src

format org-src
#+begin_src emacs-lisp
(map! :after org :map evil-org-mode-map
  :n "g Q" #'+format:region)
#+end_src

org-agenda
[[https://emacs.stackexchange.com/a/7840][saving - How do I automatically save org-mode buffers? - Emacs Stack Exchange]]
#+begin_src emacs-lisp
(advice-add 'org-agenda-quit :before 'org-save-all-org-buffers)
#+end_src

org-ref
#+begin_src emacs-lisp :tangle no
(use-package org-ref)
#+end_src

org-format
#+begin_src emacs-lisp
(use-package! org-format
  :commands org-format-buffer
  :load-path "~/org/org-format/"
  :init
  (map! :map org-mode-map
        :localleader
        "F" #'org-format-buffer))
#+end_src

remove org Fancy Priorities
#+begin_src emacs-lisp :tangle packages.el
(package! org-fancy-priorities :disable t)
#+end_src

~:text/html~ output support
#+begin_src emacs-lisp :tangle no
(after! ob-jupyter
  (push :text/html jupyter-org-mime-types))
#+end_src

** python
#+begin_src toml
[python]
packages=[
    "python-pytest",
    "python-nose",
    "python-pyflakes",
    "python-isort",
    "python-lsp-server"
]
#+end_src

#+begin_src emacs-lisp :tangle no :noweb-ref lang
(python +lsp +pyright)
#+end_src

** sh
#+begin_src toml
[sh]
packages=["shellcheck-bin", "bash-language-server"]
#+end_src

#+begin_src emacs-lisp :tangle no :noweb-ref lang
(sh +fish +lsp +powershell)
#+end_src

fish shell ligatures
#+begin_src emacs-lisp
(after! fish-mode
  (set-ligatures! 'fish-mode
    :def "function"
    :return "return"
    :and "&&"
    :or "||"
    :not "not"
    :true "true"
    :false "false"
    :for "for"))
#+end_src

** yaml
#+begin_src toml
[yaml]
packages=["yaml-language-server"]
#+end_src

#+begin_src emacs-lisp :tangle no :noweb-ref lang
(yaml +lsp)
#+end_src

** COMMENT typst
#+begin_src toml
["typst-mode"]
packages=["typst", "typst-lsp-bin"]
#+end_src

#+begin_src emacs-lisp :tangle packages.el
(package! typst-mode)
#+end_src

#+begin_src emacs-lisp
(use-package! typst-mode)
#+end_src

** wolfram
unmaintainable if use following
#+begin_src emacs-lisp :tangle no
(package! wolfram-mode
  :type 'local
  :recipe (:host github
           :type git
           :repo "fakeGenuis/wolfram-mode"))
#+end_src

#+begin_src emacs-lisp
(use-package! wolfram-mode
  :load-path "~/lib/wolfram-mode/"
  :mode ("\\.m\\'" "\\.fr\\'" "\\.wls?\\'")
  :interpreter "wolframscript"
  :commands wolfram-mode
  :config
  (setq wolfram-program "/usr/local/bin/wolfram")
  (setq wolfram-path "~/.Mathematica/Applications")
  ;; ligatures
  (set-ligatures! 'wolfram-mode
    :and "&&"
    :or "||"
    :not "!"
    :null "None"
    :true "True"
    :false "False")
  ;; open .nb file with mathematica from dirvish
  (after! dirvish
    (push '(("nb") "/usr/local/bin/mathematica" "%f") dirvish-open-with-programs)))
#+end_src

org-wolfram
#+begin_src emacs-lisp
(use-package! org-wolfram
  :load-path "~/lib/org-wolfram/"
  :commands org-wolfram-mode)
#+end_src

wolfram-format
#+begin_src emacs-lisp
(load "~/lib/wolframFormatter/wolfram-format.el")
#+end_src

** Others
css
#+begin_src emacs-lisp
(prependq! auto-mode-alist '(("\\.rasi\\'" . css-mode)))
#+end_src

* Email
** mu4e
#+begin_src toml
[mu4e]
packages=["isync", "mu"]
#+end_src

Example for initialing =mu= and =mbsync=
#+begin_src fish :tangle no
mkdir -p ~/.mail/$mailname
mu init --maildir=~/.mail --add-email-address=...@...
mbsync -c ~/.config/isync/$mbsyncrc -V -a
#+end_src

#+begin_src emacs-lisp :tangle no :noweb-ref email
(mu4e +***REMOVED*** +org)
#+end_src

A fix for [[https://github.com/doomemacs/doomemacs/issues/7196][mu 1.10 support · Issue #7196 · doomemacs/doomemacs · GitHub]]
#+begin_src emacs-lisp :tangle packages.el
(unpin! evil-collection)
(package! evil-collection
  :recipe (:repo "emacs-evil/evil-collection" :branch "master"))
;; (package! evil-collection
;;   :recipe (:repo "meliache/evil-collection" :branch "mu4e-development"))
#+end_src

#+begin_src emacs-lisp :tangle no
(set-popup-rule! "^\\*mu4e-\\(main\\|headers\\)\\*" :ignore t)
#+end_src

#+begin_src emacs-lisp
(setq mu4e-update-interval 300)
(after! mu4e
  (setq mu4e-split-view 'vertical
        mu4e-change-filenames-when-moving t
        mu4e-attachment-dir "~/Downloads"
        ;; every new email composition gets its own frame!
        mu4e-compose-in-new-frame t
        mu4e-use-fancy-chars t))
#+end_src

private variables ~mu4e-get-mail-command~ and ~mu4e-contexts~
#+begin_src emacs-lisp
(after! mu4e
  (load-in-doom-dir "mu4e.el"))
#+end_src

* App
** rss
#+begin_src emacs-lisp :tangle no :noweb-ref app
(rss +org)
#+end_src

[[https://pragmaticemacs.wordpress.com/2016/08/17/read-your-rss-feeds-in-emacs-with-elfeed/][Read your RSS feeds in emacs with elfeed | Pragmatic Emacs]]
#+begin_src emacs-lisp
(after! elfeed
  (add-hook! 'elfeed-search-mode-hook 'elfeed-update)
  (setq elfeed-db-directory (concat (getenv "NCDIR") "elfeed/db/")
        elfeed-enclosure-default-dir (concat (getenv "NCDIR") "elfeed/enclosures/")
        ;; elfeed-search-filter "@1-month-ago +unread"
        rmh-elfeed-org-files (list "~/org/elfeed.org"))
  (map! :leader
        (:prefix "o"
         :desc "elfeed"    "e" #'elfeed)))

(after! elfeed-goodies
  (setq elfeed-goodies/entry-pane-size 0.5))
#+end_src

* Other packages
** emacs-gfs
- [[https://emacs.stackexchange.com/questions/29511/text-scale-for-all-faces-in-buffer][text-scale for all faces in buffer - Emacs Stack Exchange]]
- [[https://so.nwalsh.com/2020/01/08-gfs][Emacs “Global Face Scaling”]]
- [[https://github.com/doomemacs/doomemacs/issues/4211][doomemacs/doomemacs#4211 Make `doom/increase-font-size` to adjust more fonts]]

#+begin_src emacs-lisp :tangle packages.el
(package! emacs-gfs
  :recipe (:host github
           :repo "ndw/emacs-gfs"))
#+end_src

- [ ] display =text-scale-mode-amount= in mode-line
#+begin_src emacs-lisp
;; set a rescale font to cjk charset fonts,
;; so no explicit font size is needed
;; rescale doom-font cause bold font size != regular
(dolist (rescales '(("Ubuntu" . 1.05)
                    ("mononoki" . 1.00)
                    ("Cascadia" . 0.95)
                    ("Kosefont" . 1.10)
                    ("小濑字体" . 1.10)))
  (push rescales face-font-rescale-alist))

(use-package! emacs-gfs
  :config
  (setq gfs/default-face-height 140)
  (setq gfs/resizeable-ignore-faces nil)
  :bind
  (:map evil-normal-state-map
        ("C--" . gfs/shrink-faces)
        ("C-=" . gfs/magnify-faces)))
#+end_src

** keycast
#+begin_src emacs-lisp :tangle packages.el
(package! keycast)
#+end_src

[[https://github.com/tarsius/keycast/issues/7#issuecomment-881469067][tarsius/keycast#7 Add support for moody and doom-modeline.]]
#+begin_src emacs-lisp
(use-package! keycast
  :hook doom-after-init
  :config
  (define-minor-mode keycast-mode
    "Show current command and its key binding in the mode line (fix for use with doom-mode-line)."
    :global t
    (if keycast-mode
        (progn (add-hook 'pre-command-hook 'keycast--update t)
               (setq keycast-mode-line-window-predicate
                     'keycast-active-frame-bottom-right-p))
     (remove-hook 'pre-command-hook 'keycast--update)
     (setq keycast-mode-line-window-predicate 'ignore)))
  (map! :leader
        (:prefix "t"
         :desc "Toggle keycast" "k" #'keycast-mode))
  (add-to-list 'global-mode-string '("" keycast-mode-line)))
#+end_src

** COMMENT shrface
#+begin_src emacs-lisp :tangle packages.el
(package! shrface)
#+end_src

#+begin_src emacs-lisp
(use-package! shrface
  :hook eww-after-render-hook
  :commands request-url-as-org
  :config
  (shrface-basic)
  (shrface-trial)
  (shrface-default-keybindings) ; setup default keybindings
  (setq shrface-href-versatile t)

  (defun request-url-as-org (url)
    (interactive "sRequest url: ")
    (require 'shrface)
    (require 'request)
    (setq-local shrface-request-url url)
    (request url
      :parser 'buffer-string
      :headers '(("User-Agent" . "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.101 Safari/537.36"))
      :sync nil
      :success (cl-function
                (lambda (&key data &allow-other-keys)
                  (shrface-html-export-as-org data))))))
#+end_src

** screenshot
#+begin_src emacs-lisp :tangle packages.el
(package! screenshot
  :recipe (:host github :repo "yangsheng6810/screenshot"))
#+end_src

#+begin_src emacs-lisp
(use-package! screenshot
  :commands screenshot
  :init
  (map! (:leader :prefix "o"
         :desc "sreenshot within emacs" "S" #'screenshot)))
#+end_src

** zotxt
#+begin_src emacs-lisp :tangle packages.el
(package! zotxt)
#+end_src

[[http://www.mkbehr.com/posts/a-research-workflow-with-zotero-and-org-mode/][A research workflow with Zotero and Org mode | mkbehr.com]]
#+begin_src emacs-lisp
(use-package zotxt
  :hook (org-mode . (lambda () (org-zotxt-mode 1)))
  :config
  (setq zotxt-default-bibliography-style "mkbehr-short")

  (defun org-zotxt-get-attachment-path ()
    "Get attachment file path"
    (interactive "P")
    (let ((item-id (org-zotxt-extract-link-id-at-point)))
      (deferred:$
        (zotxt--request-deferred
         (format "%s/items" zotxt-url-base)
         :params `(("key" . ,item-id) ("format" . "paths"))
         :parser 'json-read)
        (deferred:nextc it
          (lambda (response)
            (let ((paths (cdr (assq 'paths (elt (request-response-data response) 0)))))
              (org-zotxt-choose-path paths))))
        (deferred:error it #'zotxt--deferred-handle-error)
        (if zotxt--debug-sync (deferred:sync! it)
          (deferred:nextc it
            (lambda (path) path))))))

  (defun +my/tilde-home-path (path)
    "covert path starts with /home/$usr/ to '~'"
    (interactive)
    (let ((home (getenv "HOME")))
      (if (string-prefix-p home path)
          (string-join `("~" ,(string-remove-prefix home path)) "")
        path)))

  (defun org-zotxt-copy-attachment-path ()
    "Open attachment of Zotero items linked at point.
  Opens with `org-open-file', see for more information about ARG."
    (interactive)
    (deferred:$
      (deferred:next
        (lambda ()
          (org-zotxt-get-attachment-path)))
      (deferred:nextc it
        (lambda (path)
          (let ((new-path (+my/tilde-home-path path)))
            (kill-new new-path)
            (message "\"%s\" send to system clipboard!" new-path))))))

  (map! (:map org-zotxt-mode-map
         :desc "org-zotxt-insert-selected"
         "C-c \" \"" (cmd!! #'org-zotxt-insert-reference-link '(4))
         :desc "org-zotxt-copy-attachment-path"
         "C-c \" c" #'org-zotxt-copy-attachment-path)))
#+end_src

open attachment with point at arxiv link
[[https://emacs.stackexchange.com/a/38297][Get description of an org-mode link - Emacs Stack Exchange]]
#+begin_src emacs-lisp
(defun org-zotxt-open-arxiv-attachment ()
  "open attachment from arxiv link, by zotxt"
  (interactive)
  (let* ((link (org-element-context))
         (desc (buffer-substring-no-properties (org-element-property :contents-begin link)
                                               (org-element-property :contents-end link))))
     (org-zotxt-insert-reference-link)))
#+end_src

** figlet
converting comments into ascii arts
#+begin_src toml
[figlet]
packages=["figlet"]
#+end_src

#+begin_src emacs-lisp :tangle packages.el
(package! figlet)
#+end_src

#+begin_src emacs-lisp
(use-package! figlet
  :config
  (setq figlet-options '("-W" "-f" "script")))
#+end_src

* Other configs
** defuns
[[https://stackoverflow.com/a/24357106][How to append multiple elements to a list in Emacs lisp - Stack Overflow]]
#+begin_src emacs-lisp
(defun +my/append-to-list (list-var elements)
  "Append ELEMENTS to the end of LIST-VAR.

change to no return value
The return value is the new value of LIST-VAR."
  (unless (consp elements)
    (error "ELEMENTS must be a list"))
  (let ((list (symbol-value list-var)))
    (if list
        (setcdr (last list) elements)
      (set list-var elements))))
  ;(symbol-value list-var))
#+end_src

#+begin_src emacs-lisp
(defun +my/reverse-words (beg end)
  "Reverse the order of words in region."
  (interactive "*r")
  (apply
   'insert
   (reverse
    (split-string
     (delete-and-extract-region beg end) "\\b"))))
#+end_src

** projectile
[[https://docs.projectile.mx/projectile/configuration.html][Configuration :: Projectile]]
#+begin_src emacs-lisp
(after! projectile
  (setq projectile-indexing-method 'alien
        projectile-sort-order 'recently-active
        projectile-file-exists-remote-cache-expire (* 10 60)
        projectile-track-known-projects-automatically nil
        ;; projectile-require-project-root t
        projectile-auto-discover t)
        ;; (projectile-file-exists-local-cache-expire (* 5 60)))
  (add-to-list 'projectile-globally-ignored-directories
               "*\\.run\\.tmp$")
  (+my/append-to-list 'projectile-globally-ignored-modes
                      '("helpful-mode" "dired-mode"))
  (add-to-list 'projectile-globally-ignored-buffers "*doom*"))
#+end_src

[[https://emacs.stackexchange.com/questions/16497/how-to-exclude-files-from-projectile][How to exclude files from Projectile? - Emacs Stack Exchange]]
For non git project, better add following in project root [[file:.dir-locals.el]]
#+begin_src emacs-lisp :tangle no
((nil . ((projectile-indexing-method . hybrid))))
#+end_src
and add ignored files in [[file:.projectile]].

** proxy
#+begin_src emacs-lisp
(setq url-proxy-services
   `(("no_proxy" . "^\\(localhost\\|10\\..*\\|192\\.168\\..*\\)")
     ("http" . ,(shell-command-to-string "echo -n $ALL_PROXY"))
     ("https" . ,(shell-command-to-string "echo -n $ALL_PROXY"))))
#+end_src

** insert arxiv links
#+begin_src emacs-lisp
(defvar rx-arxiv-regexp
  (rx (= 4 num) "." (= 5 num))
  "Regular expression for arxiv id.")

(defun org-insert-arxiv-link ()
  "Insert arxiv link with arxiv id as description."
  (interactive)
  (let* ((ring (current-kill 0))
         (id (if (string-match rx-arxiv-regexp ring)
                 (match-string 0 ring)
               (read-string "Input arxiv id:"))))
    (insert " ")
    (org-insert-link nil (concat "https://arxiv.org/abs/" id) id)))
#+end_src

** shortcuts
#+begin_src emacs-lisp
(map! :leader
      :desc "dirvish"               "-"    #'dirvish
      :desc "Eval expression"       ":"    #'pp-eval-expression
      :desc "M-x"                   ";"    #'execute-extended-command
      :desc "Org agenda"            "="    #'org-agenda)
#+end_src

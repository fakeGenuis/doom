#+TITLE: Config
#+PROPERTY: header-args :tangle config.el :results none

* Table of Contents :TOC:
- [[#info][Info]]
- [[#display][Display]]
  - [[#frame-size][frame size]]
  - [[#transparency][transparency]]
  - [[#themes][Themes]]
  - [[#fonts][fonts]]
  - [[#ligature][ligature]]
  - [[#doom-modeline][doom-modeline]]
  - [[#icons][Icons]]
  - [[#line][Line]]
- [[#editing][Editing]]
  - [[#about-parentheses][About Parentheses]]
  - [[#input-chinese][Input Chinese]]
  - [[#latex][Latex]]
  - [[#file-templates][File Templates]]
  - [[#evil][Evil]]
- [[#org][Org]]
  - [[#org-1][org]]
  - [[#org-src][org-src]]
  - [[#org-agenda][org-agenda]]
  - [[#color-shell-block-output][Color ~shell~ block output]]
  - [[#org-ref][org-ref]]
  - [[#deft][deft]]
  - [[#org-roam][org-roam]]
  - [[#org-pandoc-import][org-pandoc-import]]
  - [[#org-noter][org-noter]]
- [[#plugins][Plugins]]
  - [[#pdf-tools][pdf-tools]]
  - [[#leetcode][leetcode]]
  - [[#treemacs][treemacs]]
  - [[#ivy-posframe][ivy-posframe]]
  - [[#mu4e][mu4e]]
  - [[#yadm-with-magit][yadm (with magit)]]
  - [[#keycast][keycast]]
  - [[#elfeed][elfeed]]
  - [[#dired-ranger][dired-ranger]]
  - [[#dired][Dired]]
  - [[#dirvish][Dirvish]]
  - [[#projectile][projectile]]
  - [[#tldr][tldr]]
  - [[#tab-bar][tab bar]]
  - [[#lsp][lsp]]
- [[#lang][Lang]]
  - [[#lua][lua]]
  - [[#wolfram][wolfram]]
- [[#terminal][Terminal]]
  - [[#vterm][vterm]]
  - [[#colored-output-issues][Colored output issues]]
  - [[#fish-shell][fish shell]]
- [[#others][Others]]
  - [[#maximize-when-start-up][maximize when start up]]
  - [[#proxy][proxy]]
  - [[#pomm][pomm]]
  - [[#screenshot][screenshot]]
  - [[#reverse-words][reverse words]]
  - [[#popup][popup]]
  - [[#shrface][shrface]]

* Info
#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
(setq user-full-name "name"
      user-mail-address "***REMOVED***")
#+end_src

* Display
** frame size
#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(height . 40))
(add-to-list 'default-frame-alist '(width . 120))
#+end_src
** transparency
#+begin_src emacs-lisp
(set-frame-parameter (selected-frame) 'alpha '(85 . 50))
(add-to-list 'default-frame-alist '(alpha . (85 . 50)))

(defun toggle-transparency ()
  (interactive)
  (let ((alpha (frame-parameter nil 'alpha)))
    (set-frame-parameter
     nil 'alpha
     (if (eql (cond ((numberp alpha) alpha)
                    ((numberp (cdr alpha)) (cdr alpha))
                    ;; Also handle undocumented (<active> <inactive>) form.
                    ((numberp (cadr alpha)) (cadr alpha)))
              100)
         '(85 . 50) '(100 . 100)))))

(map! :leader
      (:prefix "t"
       :desc "Toggle transparency"    "T" #'toggle-transparency
       ))
#+end_src

** Themes
restore last random theme
#+begin_src emacs-lisp
;; (setq doom-theme 'doom-snazzy)
(load (string-join `(,doom-private-dir "theme.el")))
#+end_src

difficult to choose theme? random it
#+begin_src emacs-lisp
(defun +my/random-theme ()
    (interactive)
    (let* ((all-themes (custom-available-themes))
           (next-theme (nth (random (length all-themes)) all-themes))
           (theme-config-file (string-join `(,doom-private-dir "theme.el"))))
      (message "Switching to theme: %s" next-theme)
      (consult-theme next-theme)
      (write-region (format "(setq doom-theme '%s)\n" next-theme) nil theme-config-file)))

(after! doom-themes
  (map! :leader
        (:prefix "t"
         :desc "Random theme" "t" #'+my/random-theme)))
#+end_src

** fonts
#+begin_src emacs-lisp
(setq +my/scale-factor
      (/ (string-to-number (shell-command-to-string "xdpyinfo | grep dimension | awk '{print $2}' | cut -d'x' -f2")) 720.0))

(setq +my/is-laptop
      (not (string-equal (shell-command-to-string "fd BAT /sys/class/power_supply/") "")))

(defun +my/font-size(size)
  (ceiling (* (if +my/is-laptop 1.15 1) size +my/scale-factor)))

(setq doom-font (font-spec :family "MononokiLiga Nerd Font Mono" :size (+my/font-size 13))
      ;; big font mode resize serif-font and variable-pitch-font also
      ;; doom-big-font (font-spec :family "MononokiLiga Nerd Font Mono" :size (+my/font-size 17))
      doom-unicode-font (font-spec :family "Twemoji")
      doom-serif-font (font-spec :family "Rec Mono Casual" :size (+my/font-size 12))
      doom-variable-pitch-font (font-spec :family "Sarasa Gothic SC" :size (+my/font-size 11)))
#+end_src

[[https://emacs-china.org/t/doom-emacs/9628/9][doom emacs下中文字体的设置 - #9，来自 slack-py - Emacs-general - Emacs China]]
#+begin_src emacs-lisp
;; TODO resize cjk font with =C +=
(defun +my/cjk-font(font-size)
  (dolist (charset '(kana han cjk-misc))
    (set-fontset-font (frame-parameter nil 'font) charset
                      (font-spec :family "Sarasa Gothic SC" :size (+my/font-size font-size)))))

(defun +my/better-font()
  (interactive)
  (if (display-graphic-p)
      (progn
        (custom-set-faces
         `(default ((t (:font ,doom-font))))
         `(mode-line ((t (:font ,(font-spec :family "Comic Shanns" :size (+my/font-size 13))))))
         `(mode-line-inactive ((t (:font ,(font-spec :family "Comic Shanns" :size (+my/font-size 13))))))
         `(font-lock-comment-face ((t (:font ,(font-spec :family "Rec Mono Casual" :size (+my/font-size 12)))))))
        (+my/cjk-font 11))))

(defun +my|init-font(frame)
  (with-selected-frame frame
    (if (display-graphic-p)
        (+my/better-font))))

(if (and (fboundp 'daemonp) (daemonp))
    (add-hook 'after-make-frame-functions #'+my|init-font)
  (+my/better-font))

;;https://emacs.stackexchange.com/a/47092
;; DONE restore ligature after exit big font mode
(add-hook 'doom-big-font-mode-hook
          (lambda ()
            (if doom-big-font-mode
                (add-hook 'doom-big-font-mode-hook #'+my/better-font)
              (remove-hook 'doom-big-font-mode-hook #'+my/better-font))))

(add-hook 'writeroom-mode-enable-hook (lambda () (+my/cjk-font 17)))
(add-hook 'writeroom-mode-disable-hook (lambda () (+my/cjk-font 11)))
#+end_src
** ligature
check code ligatures, *bold* and /italic/ enabled
== <- -> <= => != == >= <== ==> === ?= :=

[[https://emacs-china.org/t/org-source-code/9762/8][求一款适合阅读org source code 的主题 - #8，来自 lijigang - Org-mode - Emacs China]]
#+begin_src emacs-lisp
(plist-put! +ligatures-extra-symbols
            :private    "")

(global-prettify-symbols-mode)
#+end_src

** doom-modeline
#+begin_src emacs-lisp
(use-package! doom-modeline
  :hook (after-init . doom-modeline-mode)

  :custom
  ;; The limit of the window width.
  ;; If `window-width' is smaller than the limit, some information won't be displayed.
  (doom-modeline-window-width-limit fill-column)
  (doom-modeline-enable-word-count t)
  (doom-modeline-workspace-name t))

;https://github.com/seagle0128/doom-modeline/issues/187
(defun +my/modeline-h ()
  "Calculate the actual char height of the mode-line."
  (ceiling (+ (/ (+my/font-size 14) 2.0) 8.0)))
  ;(if (equal (display-pixel-width) 3840)
  ;    26 24)

(advice-add #'doom-modeline--font-height :override #'+my/modeline-h)
#+end_src

[[https://github.com/seagle0128/doom-modeline/issues/194][one single modeline when split]]
#+begin_src emacs-lisp :tangle no
;; wrap your mode-line-format
;((:eval (when (doom-modeline--active) .)))
(set-face-attribute 'mode-line-inactive nil
                    :underline t
                    :background (face-background 'default))
#+end_src

** Icons
#+begin_src emacs-lisp
(use-package all-the-icons
  :custom
  (all-the-icons-scale-factor 0.9))
#+end_src

** Line
#+begin_src emacs-lisp
(setq display-line-numbers-type nil)
#+end_src
* Editing
** About Parentheses
#+begin_src emacs-lisp :tangle no
(setq show-paren-style 'expression)
#+end_src

** Input Chinese
https://emacs-china.org/t/topic/1271
#+begin_src emacs-lisp :tangle no
(use-package pyim
  :demand t
  :config
  ;; 激活 basedict 拼音词库，五笔用户请继续阅读 README
  (use-package pyim-basedict
    :config (pyim-basedict-enable))

  (setq default-input-method "pyim")

  ;; 我使用全拼
  (setq pyim-default-scheme 'quanpin)

  ;; 设置 pyim 探针设置，这是 pyim 高级功能设置，可以实现 *无痛* 中英文切换 :-)
  ;; 我自己使用的中英文动态切换规则是：
  ;; 1. 光标只有在注释里面时，才可以输入中文。
  ;; 2. 光标前是汉字字符时，才能输入中文。
  ;; 3. 使用 M-j 快捷键，强制将光标前的拼音字符串转换为中文。
  (setq-default pyim-english-input-switch-functions
                '(pyim-probe-dynamic-english
                  pyim-probe-isearch-mode
                  pyim-probe-program-mode
                  pyim-probe-org-structure-template))

  (setq-default pyim-punctuation-half-width-functions
                '(pyim-probe-punctuation-line-beginning
                  pyim-probe-punctuation-after-punctuation))

  ;; 开启拼音搜索功能
  (pyim-isearch-mode 1)

  ;; 使用 popup-el 来绘制选词框, 如果用 emacs26, 建议设置
  ;; 为 'posframe, 速度很快并且菜单不会变形，不过需要用户
  ;; 手动安装 posframe 包。
  ;;(setq eim-use-tooltip nil)
  ;;(setq pyim-page-tooltip 'posframe)
  (setq pyim-page-tooltip 'popup)

  ;; 选词框显示5个候选词
  (setq pyim-page-length 5)

  :bind
  (("M-j" . pyim-convert-string-at-point) ;与 pyim-probe-dynamic-english 配合
   ("C-;" . pyim-delete-word-from-personal-buffer)))
#+end_src
** Latex
clean intermediate files
#+begin_src emacs-lisp
(eval-after-load 'latex
  '(setq LaTeX-clean-intermediate-suffixes (delete "\\.synctex\\.gz"  LaTeX-clean-intermediate-suffixes)
         LaTeX-clean-intermediate-suffixes (append LaTeX-clean-intermediate-suffixes (list "\\.dvi" "\\.fdb_latexmk"))
         Tex-clean-confirm nil))
#+end_src

preview latex formulas
#+begin_src emacs-lisp
(use-package! math-preview
  :custom
  (math-preview-marks '(("\\begin{equation}" . "\\end{equation}")
                        ("\\begin{equation*}" . "\\end{equation*}")
                        ("\\[" . "\\]")
                        ("\\(" . "\\)")
                        ("$$" . "$$")
                        ("$" . "$")))
  (math-preview-preprocess-functions '((lambda (s)
                                         (concat "{\\color{white}" s "}")))))

(autoload 'latex-math-preview-expression "latex-math-preview" nil t)
(autoload 'latex-math-preview-insert-symbol "latex-math-preview" nil t)
(autoload 'latex-math-preview-save-image-file "latex-math-preview" nil t)
(autoload 'latex-math-preview-beamer-frame "latex-math-preview" nil t)
#+end_src

word completion along with =(:lang (latex +lsp))=
see =company-backends= variable docs
https://github.com/hlissner/doom-emacs/issues/5672
#+begin_src emacs-lisp
(setq-hook! 'LaTeX-mode-hook +lsp-company-backends '(:separate company-capf company-yasnippet company-dabbrev))

;; https://tex.stackexchange.com/a/21205
;; add XeTeX mode in TeX/LaTeX
(add-hook 'LaTeX-mode-hook
          (lambda ()
            (add-to-list 'TeX-command-list '("XeLaTeX" "%`xelatex%(mode)%' %t" TeX-run-TeX nil t))))
;; (setq TeX-command-default "XeLaTeX")))
;; (setq TeX-save-query nil)))
;; (setq TeX-show-compilation nil)))
#+end_src

#+begin_src emacs-lisp
(use-package! evil-tex
  :when (featurep! :editor evil +everywhere)
  :config
  (setq evil-tex-include-newlines-in-envs nil
        evil-tex-select-newlines-with-envs nil)
  )
#+end_src

cdlatex
#+begin_src emacs-lisp
(use-package! cdlatex
  :config
  (map! :map cdlatex-mode-map
    :i "TAB" #'cdlatex-tab))
#+end_src

** File Templates
[[https://github.com/hlissner/doom-emacs/issues/2134][hlissner/doom-emacs#2134 How to create files using the file-templates module?]]
#+begin_src emacs-lisp
(after! yasnippet
  :config
  ;; (setq +file-templates-dir "~/.config/doom/templates/")
  (set-file-template! "/leetcode/.+\\.cpp$"
    ;; :when +file-templates-in-emacs-dirs-p
    :trigger "__leetcode.cpp" :mode 'c++-mode))
#+end_src
** Evil
[[https://emacs.stackexchange.com/questions/28135/in-evil-mode-how-can-i-prevent-adding-to-the-kill-ring-when-i-yank-text-visual][In Evil mode, how can I prevent adding to the kill ring when I yank text, vis...]]
#+begin_src emacs-lisp
(setq-default evil-kill-on-visual-paste nil)
#+end_src

Disabling cursor movement when exiting insert mode
#+begin_src emacs-lisp
(setq evil-move-cursor-back nil)
#+end_src
* Org
** org
#+begin_src emacs-lisp
(use-package! org
  :init
  (setq org-directory "~/org/")
  (defvar co/org-agenda-directory (expand-file-name "agenda" org-directory))
  (defun co/org-agenda-file-paths (path)
    (if (listp path)
        (mapcar (lambda (x) (expand-file-name (concat x ".org") co/org-agenda-directory)) path)
      (expand-file-name (concat path ".org") co/org-agenda-directory)))
  ;; https://emacs.stackexchange.com/a/63793
  (defun org-copy-link-url ()
    (interactive)
    (kill-new (org-element-property :raw-link (org-element-context))))

  ;; :bind (:map org-mode-map
  ;;        :localleader
  ;;        "y" #'org-copy-link-url)
  :custom
  (org-agenda-files (co/org-agenda-file-paths '("todos" "habits" "journal")))
  (org-ellipsis "⤵")
  (org-agenda-start-with-log-mode t)
  (org-log-done 'time)
  (org-log-into-drawer t)
  (org-image-actual-width 400)
  (org-startup-with-inline-images t)
  (org-refile-targets '(("archive.org" :maxlevel . 1)))
  (org-tag-alist
   '((:startgroup)
     ;; Put mutually exclusive tags here
     (:endgroup)
     ("@home" . ?H)
     ("@work" . ?W)
     ("agenda" . ?a)
     ("publish" . ?P)
     ("batch" . ?b)
     ("idea" . ?i)))

  :config
  (map! :map org-mode-map
        :localleader
        "y" #'org-copy-link-url)
  (load "~/.config/doom/org-capture-templates.el")
  ;;https://stackoverflow.com/a/50875921
  ;;https://github.com/daviwil/emacs-from-scratch/blob/c55d0f5e309f7ed8ffa3c00bc35c75937a5184e4/init.el
  (use-package org-habit
    :custom
    (org-habit-graph-column 60)
    :config
    (add-to-list 'org-modules 'org-habit))

  ;;(org-clock-persist 'history)
  (org-clock-persistence-insinuate)
  ;; display inline images
  (org-display-inline-images)

  ;; Save Org buffers after refiling!
  (advice-add 'org-refile :after 'org-save-all-org-buffers))
#+end_src
** org-src
[[https://github.com/hlissner/doom-emacs/issues/5436][hlissner/doom-emacs#5436 org-src-window-setup not working correctly]]
#+begin_src emacs-lisp
(after! org
  (setq org-src-window-setup 'reorganize-frame)
  (set-popup-rule! "^\\*Org Src" :ignore t))
#+end_src

** org-agenda
https://emacs.stackexchange.com/a/7840
#+begin_src emacs-lisp
(advice-add 'org-agenda-quit :before 'org-save-all-org-buffers)
#+end_src

** Color ~shell~ block output
[[https://emacs.stackexchange.com/a/52238][How do I attach a custom function to process org-mode babel shell output?]]
#+BEGIN_SRC emacs-lisp :tangle no
(use-package cl-lib
  :init
  (defun org-redisplay-ansi-source-blocks ()
    "Refresh the display of ANSI text source blocks."
    (interactive)
    (org-element-map (org-element-parse-buffer) 'src-block
      (lambda (src)
        (when (equalp "ansi" (org-element-property :language src))
          (let ((begin (org-element-property :begin src))
                (end (org-element-property :end src)))
            (ansi-color-apply-on-region begin end))))))
  :custom
  (add-to-list 'org-babel-after-execute-hook #'org-redisplay-ansi-source-blocks)
  (setq org-babel-default-header-args:shell
        '((:results . "output verbatim drawer")
          (:wrap . "src ansi"))))
#+END_SRC

** org-ref
#+begin_src emacs-lisp :tangle no
(use-package org-ref)
#+end_src
** deft
#+begin_src emacs-lisp :tangle no
(setq deft-directory "~/org")
(setq deft-default-extension "org")
#+end_src
** org-roam
#+begin_src emacs-lisp
(use-package! org-roam
  :after org
  :init
  (setq org-roam-directory (file-truename "~/org/roam")
        org-roam-v2-ack t)
  :custom
  (org-roam-dailies-capture-templates
   '(("d" "default" entry "* %?\n[%<%Y-%m-%d %H:%M>]\n"
      :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n"))))
  :config
  (require 'org-roam-dailies)
  )
#+end_src
** org-pandoc-import
#+begin_src emacs-lisp
(use-package! org-pandoc-import :after org)
#+end_src
** org-noter
#+begin_src emacs-lisp
(use-package! org-noter
  :after org
  :config
  (org-noter-set-doc-split-fraction '(0.75 . 0.25))
  )
#+end_src
* Plugins
[[https://stackoverflow.com/a/24357106][How to append multiple elements to a list in Emacs lisp - Stack Overflow]]
#+begin_src emacs-lisp
(defun +my/append-to-list (list-var elements)
  "Append ELEMENTS to the end of LIST-VAR.

change to no return value
The return value is the new value of LIST-VAR."
  (unless (consp elements)
    (error "ELEMENTS must be a list"))
  (let ((list (symbol-value list-var)))
    (if list
        (setcdr (last list) elements)
      (set list-var elements))))
  ;(symbol-value list-var))
#+end_src

** pdf-tools
default pdf viewer in emacs
[[http://alberto.am/2020-04-11-pdf-tools-as-default-pdf-viewer.html][pdf-tools as the default PDF viewer in Emacs]]
#+begin_src emacs-lisp
(use-package! pdf-tools
  :custom
  (+latex-viewers '(pdf-tools evince okular)))

;; to use pdfview with auctex
(setq TeX-view-program-selection '((output-pdf "PDF Tools")))
(setq TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view)))
;;(TeX-source-correlate-start-server t)
;; not sure if last line is neccessary

;; to have the buffer refresh after compilation
(add-hook 'TeX-after-compilation-finished-functions
          #'TeX-revert-document-buffer)
#+end_src
** leetcode
#+begin_src emacs-lisp :tangle no
(use-package leetcode
  :costum
  (leetcode-prefer-language "cpp")
  (leetcode-save-solutions t)
  (leetcode-directory "~/Coding/leetcode"))
#+end_src

** treemacs
#+begin_src emacs-lisp :tangle no
(use-package! treemacs
  :when (featurep! :ui treemacs)
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  (setq treemacs-no-load-time-warnings t)
  :config
  (setq treemacs-width 17)
  (setq treemacs-project-follow-cleanup t)
  ;; (setq treemacs-user-mode-line-format t)
  ;; https://github.com/hlissner/doom-emacs/issues/1551
  ;; doom-themes-treemacs-enable-variable-pitch nil

  ;; https://github.com/Alexander-Miller/treemacs/issues/486)
  ;; (dolist (face '(treemacs-root-face
  ;;                 treemacs-git-unmodified-face
  ;;                 treemacs-git-modified-face
  ;;                 treemacs-git-renamed-face
  ;;                 treemacs-git-ignored-face
  ;;                 treemacs-git-untracked-face
  ;;                 treemacs-git-added-face
  ;;                 treemacs-git-conflict-face
  ;;                 treemacs-directory-face
  ;;                 treemacs-directory-collapsed-face
  ;;                 treemacs-file-face
  ;;                 treemacs-tags-face))
  ;;  (set-face-attribute face nil :family "Comic Shanns" :height (+ 80 (+my/font-size 20))))
  (treemacs-follow-mode t)
  (treemacs-filewatch-mode t)
  (treemacs-fringe-indicator-mode 'always)
  (treemacs-git-mode 'extended))

(use-package treemacs-all-the-icons
  :after (treemacs all-the-icons))
#+end_src
** ivy-posframe
#+begin_src emacs-lisp :tangle no
(use-package ivy-posframe
  :custom
  (ivy-posframe-display-functions-alist
   '((swiper          . ivy-display-function-fallback)
     (complete-symbol . ivy-posframe-display-at-point)
     (counsel-M-x     . ivy-posframe-display-at-frame-top-center)
     (t               . ivy-posframe-display)))
  (ivy-posframe-parameters
   '((left-fringe . 8)
     (right-fringe . 8)))
  :config
  (ivy-posframe-mode 1))
#+end_src
** mu4e
#+begin_src shell :tangle no
paru -S isync mu
mkdir -p ~/.mail/$mailname
mu init --maildir=~/.mail
mbsync -c ~/.config/isync/$mbsyncrc -V -a
#+end_src

#+begin_src emacs-lisp
(load "~/.config/doom/mu4e.el")
#+end_src

*** alert
#+begin_src emacs-lisp :tangle no
(use-package mu4e-alert
  :after mu4e
  :hook ((after-init . mu4e-alert-enable-mode-line-display)
         (after-init . mu4e-alert-enable-notifications))
  :config (mu4e-alert-set-default-style 'libnotify))
#+end_src
** yadm (with magit)
[[https://github.com/TheLocehiliosan/yadm/blob/dd86c8a691deed7fb438b7ef07179040b0f05026/yadm.md#configuration][yadm/yadm.md at dd86c8a691deed7fb438b7ef07179040b0f05026 · TheLocehiliosan/ya...]]
[[https://www.reddit.com/r/emacs/comments/gjukb3/yadm_magit/][reddit:yadm+magit]]

~tramp~ from ~Melpa~ buggy, install it from ~aur~.
#+begin_src emacs-lisp
(use-package! tramp
  :config
  ;; (setenv "SHELL" "/bin/bash")
  (add-to-list 'tramp-methods
               '("yadm"
                 (tramp-remote-shell "/bin/bash")
                 (tramp-remote-shell-args ("-c"))
                 (tramp-login-program "yadm")
                 (tramp-login-args (("enter")))))
                 ;; (tramp-login-env (("SHELL") ("/bin/bash")))))

  (defun yadm-status ()
    (interactive)
    (magit-status "/yadm::"))
  (map! :leader
        (:prefix "g"
         :desc "yadm-status" "a" #'yadm-status)))
#+end_src

can't set shell rightly, change fish prompt in tramp instead. see [[file:~/.config/fish/config.fish]]

** keycast
[[https://github.com/tarsius/keycast/issues/7#issuecomment-881469067][tarsius/keycast#7 Add support for moody and doom-modeline.]]
#+begin_src emacs-lisp
(use-package keycast
  :config
  (define-minor-mode keycast-mode
    "Show current command and its key binding in the mode line (fix for use with doom-mode-line)."
    :global t
    (if keycast-mode
        (add-hook 'pre-command-hook 'keycast--update t)
      (remove-hook 'pre-command-hook 'keycast--update)))
  (add-to-list 'global-mode-string '("" keycast-mode-line)))
(keycast-mode) ;; or run keycast-mode by demand
#+end_src
** elfeed
[[https://pragmaticemacs.wordpress.com/2016/08/17/read-your-rss-feeds-in-emacs-with-elfeed/][Read your RSS feeds in emacs with elfeed | Pragmatic Emacs]]
#+begin_src emacs-lisp
(use-package! elfeed
  :when (featurep! :app rss)
  :bind (:map elfeed-search-mode-map
         ("q" . +my/elfeed-save-db-and-bury))
  :custom
  (elfeed-db-directory (concat (getenv "NCDIR") "elfeed/db/"))
  (elfeed-enclosure-default-dir (concat (getenv "NCDIR") "elfeed/enclosures/"))
  (elfeed-search-filter "@3-weeks-ago")
  (rmh-elfeed-org-files (list "~/org/elfeed.org"))
  :config
  ;; (add-hook! 'elfeed-search-mode-hook 'elfeed-update)

  ;;functions to support syncing .elfeed between machines
  ;;makes sure elfeed reads index from disk before launching
  (defun +my/elfeed-load-db-and-open ()
    "Wrapper to load the elfeed db from disk before opening"
    (interactive)
    (elfeed-db-load)
    (elfeed)
    (elfeed-search-update--force))

  ;;write to disk when quiting
  (defun +my/elfeed-save-db-and-bury ()
    "Wrapper to save the elfeed db to disk before burying buffer"
    (interactive)
    (elfeed-db-save)
    (quit-window)))


(map! :leader
      (:prefix "o"
       (:when (featurep! :app rss)
        :desc "elfeed"    "e" #'elfeed)))


(use-package! elfeed-goodies
  :after elfeed
  :config
  (setq elfeed-goodies/entry-pane-size 0.5))
#+end_src

** dired-ranger
#+begin_src emacs-lisp :tangle no
(use-package! dired
  :config
  ;; https://github.com/jtbm37/all-the-icons-dired/pull/39/
  (setq all-the-icons-dired-monochrome nil)
  (setq all-the-icons-dired-mode t)
  )

(use-package! ranger
  :when (featurep! :emacs dired +ranger)
  :after dired
  :custom
  (ranger-cleanup-eagerly t)
  (ranger-modify-header t)
  (ranger-cleanup-on-disable t)
  (ranger-return-to-ranger t)
  ;; aviod noisy lsp root request when browsing
  (ranger-show-literal nil)
  (ranger-excluded-extensions '("mkv" "iso" "mp4" "ipynb"))
  (ranger-max-preview-size 10)
  (ranger-dont-show-binary t)
  (ranger-footer-delay 0.2)
  (ranger-preview-delay 0.04)
  :config
  (ranger-override-dired-mode t)
  ;; TODO change =ranger-pop-eshell= to vterm
  ;; (setq helm-descbinds-window-style 'same-window)
  (map! :leader
        (:prefix "o"
         :desc "ranger"    "r" #'ranger
         :desc "REPL"    "R" #'+eval/open-repl-other-window))
  )
#+end_src
** Dired
#+begin_src emacs-lisp
(use-package dired
  :custom
  (dired-recursive-deletes 'always)
  (delete-by-moving-to-trash t)
  (dired-dwim-target t)
  ;; Make sure to use the long name of flags when exists
  ;; eg. use "--almost-all" instead of "-A"
  ;; Otherwise some commands won't work properly
  (dired-listing-switches
        "-l --almost-all --human-readable --time-style=long-iso --group-directories-first --no-group")

  :config
  ;; Dirvish respects all the keybindings in `dired-mode-map'
  (map!
   :map dired-mode-map
   :ng "h" #'dired-up-directory
  ;;  ("j" . dired-next-line)
  ;;  ("k" . dired-previous-line)
   :ng "l" #'dired-find-file
   :n "i" #'wdired-change-to-wdired-mode
   :n "." #'dired-omit-mode))

(use-package dired-x
  ;; Enable dired-omit-mode by default
  :hook
  (dired-mode . dired-omit-mode)
  :config
  ;; Make dired-omit-mode hide all "dotfiles"
  (setq dired-omit-files
        (concat dired-omit-files "\\|^\\..*$")))
#+end_src
** Dirvish
#+begin_src emacs-lisp
(use-package dirvish
  :init
  ;; (setq +my/lineh (+my/font-size 14))
  :custom
  (dirvish-keep-alive-on-quit t)
  ;; TODO fix line height
  ;; (dirvish-mode-line-height '(+my/lineh . +my/lineh))
  ;; (dirvish-header-line-height '(+my/lineh . +my/lineh))
  ;; Go back home? Just press `bh'
  (dirvish-bookmark-entries
   '(("h" "~/"                          "Home")
     ("d" "~/Downloads/"                "Downloads")
     ("m" "/mnt/"                       "Drives")
     ("t" "~/.local/share/Trash/files/" "TrashCan")))
  ;; (dirvish-header-line-format '(:left (path) :right (free-space)))
  (dirvish-mode-line-format
   '(:left
     (sort file-time " " file-size symlink) ; it's ok to place string inside
     :right
     ;; For `dired-filter' users, replace `omit' with `filter' segment defined below
     (omit yank index)))
  (dirvish-attributes '(subtree-state all-the-icons file-size git-msg vc-state))
  ;; (dirvish-attributes '(file-size vscode-icon)) ; Feel free to try different combination
  ;; Maybe the icons are too big to your eyes
  (dirvish-all-the-icons-height 0.8)
  ;; In case you want the details at startup like `dired'
  (dirvish-hide-details t)
  :config
  ;; Place this line under :init to ensure the overriding at startup, see #22
  (dirvish-override-dired-mode)
  ;; (dirvish-peek-mode)
  ;; Define mode line segment for `dired-filter'
  ;; (dirvish-define-mode-line filter "Describe filters."
  ;;   (when (bound-and-true-p dired-filter-mode)
  ;;     (propertize (format " %s " (dired-filter--describe-filters))
  ;;                 'face 'dired-filter-group-header)))
  ;;
  ;; (dirvish-define-preview exa (file)
  ;;  "Use `exa' to generate directory preview."
  ;;  (when (file-directory-p file) ; we only interest in directories here
  ;;     `(shell . ("exa" "--color=always" "-al" "--icons" ,file)))) ; use the output of `exa' command as preview

  ;; (add-to-list 'dirvish-preview-dispatchers 'exa)
  ;; Bind `dirvish|dirvish-dired|dirvish-side|dirvish-dwim' as you see fit
  (map!
   (:leader
    :prefix "o"
    :desc "dirvish"    "i" #'dirvish)
   "C-c f" #'dirvish-fd
   :map dired-mode-map
   "TAB" #'dirvish-toggle-subtree
   "SPC" #'dirvish-show-history
   "*"   #'dirvish-mark-menu
   :gn "r"   #'dirvish-roam
   :gn "b"   #'dirvish-bookmark-goto
   :gn "f"   #'dirvish-file-info-menu
   :gn "M-n" #'dirvish-history-go-forward
   :gn "M-p" #'dirvish-history-go-backward
   :gn "M-s" #'dirvish-setup-menu
   :gn "M-f" #'dirvish-toggle-fullscreen
   [remap dired-sort-toggle-or-edit] #'dirvish-quicksort
   [remap dired-do-redisplay] #'dirvish-ls-switches-menu
   [remap dired-summary] #'dirvish-dispatch
   [remap dired-do-copy] #'dirvish-yank-menu
   [remap mode-line-other-buffer] #'dirvish-other-buffer))
#+end_src

** projectile
[[https://docs.projectile.mx/projectile/configuration.html][Configuration :: Projectile]]
#+begin_src emacs-lisp
(use-package! projectile
  :custom
  (projectile-indexing-method 'alien)
  (projectile-sort-order 'recently-active)
  (projectile-file-exists-remote-cache-expire (* 10 60))
  (projectile-track-known-projects-automatically nil)
  ;(projectile-require-project-root t)
  (projectile-auto-discover t))
  ;; (projectile-file-exists-local-cache-expire (* 5 60)))
#+end_src
** tldr
#+begin_src emacs-lisp
(use-package! tldr
  :custom
  (tldr-enabled-categories '("common" "linux" "osx" "sunos")))
#+end_src
** tab bar
#+begin_src emacs-lisp :tangle no
(use-package centaur-tabs
  :custom
  (centaur-tabs-style "box")
  (centaur-tabs-height 26)
  (centaur-tabs-set-icons t)
  ;; (centaur-tabs-plain-icons t)
  (centaur-tabs-gray-out-icons 'buffer)
  (centaur-tabs-set-bar 'left)
  (centaur-tabs-set-modified-marker t)
  :config
  (centaur-tabs-headline-match)
  (centaur-tabs-mode t)
  :hook
  (+doom-dashboard-mode . centaur-tabs-local-mode)
  (ranger-mode-hook . centaur-tabs-local-mode)
  (calendar-mode . centaur-tabs-local-mode)
  (org-agenda-mode . centaur-tabs-local-mode)
  :bind
  (:map evil-normal-state-map
   ("g t" . centaur-tabs-forward)
   ("g T" . centaur-tabs-backward))
  )
#+end_src
** lsp
[[https://github.com/emacs-lsp/lsp-ui/issues/561#issuecomment-1080363562][emacs-lsp/lsp-ui#561 Scaling/Resizing of sideline fonts]]
#+begin_src emacs-lisp
(use-package lsp-ui :commands lsp-ui-mode
  :config
  (progn
    ;;
    ;; 2022-03-28 - fix sideline height computation
    ;;
    (defun lsp-ui-sideline--compute-height nil
      "Return a fixed size for text in sideline."
      (let ((fontHeight (face-attribute 'lsp-ui-sideline-global :height)))
        (if (null text-scale-mode-remapping)
            '(height
              (if (floatp fontHeight) fontHeight
                (/ (face-attribute 'lsp-ui-sideline-global :height) 100.0))

              ;; Readjust height when text-scale-mode is used
              (list 'height
                    (/ 1 (or (plist-get (cdr text-scale-mode-remapping) :height)
                             1)))))))

    ;;
    ;; 2022-03-28 - fix sideline alignment
    ;;
    (defun lsp-ui-sideline--align (&rest lengths)
      "Align sideline string by LENGTHS from the right of the window."
      (list (* (window-font-width nil 'lsp-ui-sideline-global)
               (+ (apply '+ lengths) (if (display-graphic-p) 1 2)))))))
#+end_src
* Lang
** lua
lsp support
#+begin_src emacs-lisp
(use-package! lua-mode
  :when (featurep! :lang lua +lsp)
  :custom
  (lsp-clients-lua-language-server-bin "/usr/lib/lua-language-server/bin/lua-language-server")
  (lsp-clients-lua-language-server-main-location "/usr/lib/lua-language-server/bin/main.lua"))
#+end_src

ligatures
#+begin_src emacs-lisp
(after! lua-mode
  (set-ligatures! 'lua-mode
    :def "function"
    :return "return"
    :and "and"
    :or "or"
    :not "not"
    :true "true"
    :false "false"
    :for "for"))
#+end_src
** wolfram
#+begin_src emacs-lisp
;; last update was 5 years ago
(use-package! wolfram-mode
  :config
  (autoload 'wolfram-mode "wolfram-mode" nil t)
  (autoload 'run-wolfram "wolfram-mode" nil t)
  (setq wolfram-program "/usr/local/bin/wolfram")
  (+my/append-to-list 'auto-mode-alist '(
                                         ("\\.wl\\'" . wolfram-mode)
                                         ("\\.wls\\'" . wolfram-mode))))

(setq wolfram-path "~/.Mathematica/Applications")

(after! lsp
  (add-to-list 'lsp-language-id-configuration '(wolfram-mode . "Mathematica"))

  (lsp-register-client
   (make-lsp-client :language-id 'wolfram
                    :new-connection (lsp-tcp-server-command
                                     (lambda (port)
                                       `("wolfram" ;; or "wolframscript"
                                         "-script" ;; or "-file"
                                         "~/softwares/lsp-wl/init.wls"
                                         ,(concat
                                           "--socket="
                                           (number-to-string port)))))
                    :major-modes '(wolfram-mode)
                    :server-id 'lsp-wl)))
#+end_src

ligatures
#+begin_src emacs-lisp
(after! wolfram-mode
  (set-ligatures! 'wolfram-mode
    :and "&&"
    :or "||"
    :not "not"
    :true "True"
    :false "False"))
#+end_src
* Terminal
** vterm
#+begin_src emacs-lisp
(defun +my/vterm-switch ()
  "Switch to vterm buffer in `Term' workspace.
If `Term' workspace not exist, create it.
If no vterm buffer in `Term' workspace, create it."
  (interactive)
  (+workspace-switch "Term" t)
  (let ((vterm-buffer
         ;; return first vterm buffer in `Term' workspace
          (catch 'foo
            (dolist (buffer (+workspace-buffer-list))
              (let ((bn (buffer-name buffer)))
                (when (and bn
                           ;; https://stackoverflow.com/a/2238589
                         (with-current-buffer bn
                             (eq major-mode 'vterm-mode)))
                      (throw 'foo bn))))))
        (display-buffer-alist))
    (if vterm-buffer
        (switch-to-buffer vterm-buffer)
      ;; create vterm buffer if not exist
      (vterm vterm-buffer-name))))
#+end_src

#+begin_src emacs-lisp
(defun +my/vterm-cd-project-root ()
  (interactive)
  (vterm-send-string "cd $PROOT")
  (vterm-send-return))
#+end_src

#+begin_src emacs-lisp
(use-package! vterm
  :custom
  (vterm-shell "/usr/bin/fish")
  (vterm-buffer-name-string "vterm %s")
  (vterm-kill-buffer-on-exit t)
  (vterm-ignore-blink-cursor nil)
  (vterm-max-scrollback 10000)
  :config
  (map! :leader
        (:prefix "o"
         ;; default to vterm at current file directory
         ;; `C-Return' to project root
         :desc "Toggle vterm popup" "t" (cmd!! #'+vterm/toggle t)
         :desc "Open vterm here" "T" (cmd!! #'+vterm/here t)))
  (map! :leader
        (:prefix "b"
         :desc "Switch to vterm buffer" "v" #'+my/vterm-switch))
  ;; TODO fixed-pitch in bpytop like
  ;; (add-hook 'vterm-mode-hook
  ;;           (lambda ()
  ;;             (set (make-local-variable 'buffer-face-mode-face) 'fixed-pitch
  ;;                  (buffer-face-mode t))))
  (define-key vterm-mode-map (kbd "M-q") #'vterm-send-escape)
  (define-key vterm-mode-map [ (control return) ] #'+my/vterm-cd-project-root))
#+end_src

** Colored output issues
https://wiki.archlinux.org/index.php/Emacs#Colored_output_issues
#+begin_src emacs-lisp :tangle no
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
#+end_src
** fish shell
#+begin_src emacs-lisp
(when (and (executable-find "fish")
           (require 'fish-completion nil t))
  (global-fish-completion-mode))
#+end_src

ligatures
#+begin_src emacs-lisp
(after! fish-mode
  (set-ligatures! 'fish-mode
    :def "function"
    :return "return"
    :and "&&"
    :or "||"
    :not "not"
    :true "true"
    :false "false"
    :for "for"))
#+end_src
* Others
** [[https://github.com/hlissner/doom-emacs/issues/397][maximize when start up]]
#+begin_src emacs-lisp :tangle no
(add-to-list 'initial-frame-alist '(fullscreen . maximized))
#+end_src

** proxy
#+begin_src emacs-lisp
(setq url-proxy-services
   '(("no_proxy" . "^\\(localhost\\|10\\..*\\|192\\.168\\..*\\)")
     ("http" . "localhost:8889")
     ("https" . "localhost:8889")))
#+end_src

** pomm
#+begin_src emacs-lisp
(use-package pomm
  :commands (pomm))
#+end_src
** screenshot
currently buggy
#+begin_src emacs-lisp :tangle no
(use-package screenshot)
#+end_src
** reverse words
#+begin_src emacs-lisp
  (defun +my/reverse-words (beg end)
    "Reverse the order of words in region."
    (interactive "*r")
    (apply
     'insert
     (reverse
      (split-string
       (delete-and-extract-region beg end) "\\b"))))
#+end_src
** popup
remove ~eww~ from popup buffer list
#+begin_src emacs-lisp
(when (featurep! :ui popup)
  (set-popup-rule!
    "^\\*eww\\*"  ; `eww' (and used by dash docsets)
    :ignore t))
#+end_src

use ~+popup-mode~ to toggle popup mode globally.
** shrface
#+begin_src emacs-lisp
(use-package shrface
  :defer t
  :config
  (shrface-basic)
  (shrface-trial)
  (shrface-default-keybindings) ; setup default keybindings
  (setq shrface-href-versatile t))

(use-package eww
  :defer t
  :init
  (add-hook 'eww-after-render-hook #'shrface-mode)
  :config
  (require 'shrface))
#+end_src

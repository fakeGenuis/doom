#+TITLE: Doom Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :results none
#+PROPERTY: header-args:fish :tangle install.fish :results none :shebang "#!/usr/bin/fish" :file-mode (identity #o755)

* Info
requirements of =doom emacs=
#+begin_src fish
set -a 2install ripgrep fd
#+end_src

#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

(setq user-full-name "name"
      user-mail-address "***REMOVED***")
#+end_src

#+begin_src emacs-lisp :tangle init.el
;;; init.el -*- lexical-binding: t; -*-

(doom!
#+end_src

#+begin_src emacs-lisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el
#+end_src

* Input
#+begin_src emacs-lisp :tangle init.el
:input
chinese
#+end_src

=fcitx= input method
#+begin_src fish :tangle no
set -a 2install fcitx5 fcitx5-{configtool,gtk,nord,qt,rime}
#+end_src

** Input Chinese
[[https://emacs-china.org/t/topic/1271][Emacs GUI 下不能输入中文 - Emacs-general - Emacs China]]
#+begin_src emacs-lisp :tangle no
(use-package pyim
  :demand t
  :config
  ;; 激活 basedict 拼音词库，五笔用户请继续阅读 README
  (use-package pyim-basedict
    :config (pyim-basedict-enable))

  (setq default-input-method "pyim")

  ;; 我使用全拼
  (setq pyim-default-scheme 'quanpin)

  ;; 设置 pyim 探针设置，这是 pyim 高级功能设置，可以实现 *无痛* 中英文切换 :-)
  ;; 我自己使用的中英文动态切换规则是：
  ;; 1. 光标只有在注释里面时，才可以输入中文。
  ;; 2. 光标前是汉字字符时，才能输入中文。
  ;; 3. 使用 M-j 快捷键，强制将光标前的拼音字符串转换为中文。
  (setq-default pyim-english-input-switch-functions
                '(pyim-probe-dynamic-english
                  pyim-probe-isearch-mode
                  pyim-probe-program-mode
                  pyim-probe-org-structure-template))

  (setq-default pyim-punctuation-half-width-functions
                '(pyim-probe-punctuation-line-beginning
                  pyim-probe-punctuation-after-punctuation))

  ;; 开启拼音搜索功能
  (pyim-isearch-mode 1)

  ;; 使用 popup-el 来绘制选词框, 如果用 emacs26, 建议设置
  ;; 为 'posframe, 速度很快并且菜单不会变形，不过需要用户
  ;; 手动安装 posframe 包。
  ;;(setq eim-use-tooltip nil)
  ;;(setq pyim-page-tooltip 'posframe)
  (setq pyim-page-tooltip 'popup)

  ;; 选词框显示 5 个候选词
  (setq pyim-page-length 5)

  :bind
  (("M-j" . pyim-convert-string-at-point) ;与 pyim-probe-dynamic-english 配合
   ("C-;" . pyim-delete-word-from-personal-buffer)))
#+end_src

* Completion
#+begin_src emacs-lisp :tangle init.el
:completion
(company +childframe)
(vertico +icons +childframe)
#+end_src

** company
=company-ispell= needs word dictionary
#+begin_src fish
set -a 2install words
#+end_src

** vertico
[[https://github.com/tumashu/vertico-posframe/issues/16][tumashu/vertico-posframe#16 Disable vertico-posframe when Emacs runs in terminal]]
#+begin_src emacs-lisp
(use-package! vertico-posframe
  :hook (vertico-mode . vertico-multiform-mode)
  :config
  (remove-hook 'vertico-mode #'vertico-posframe-mode)
  (setq vertico-multiform-commands
      '((consult-line
         posframe
         (vertico-posframe-fallback-mode . vertico-buffer-mode))
        (t posframe)))
  )
#+end_src

* Display
#+begin_src emacs-lisp :tangle init.el
:ui
doom                     ; what makes DOOM look the way it does
doom-dashboard           ; a nifty splash screen for Emacs
(emoji +unicode)         ; 🙂
hl-todo                  ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
indent-guides            ; highlighted indent columns
(ligatures               ; ligatures and symbols to make your code pretty again
 +extra)
modeline                 ; snazzy, Atom-inspired modeline, plus API
nav-flash                ; blink cursor line after big motions
ophints                  ; highlight the region an operation acts on
unicode                  ; extended unicode support for various languages
(popup +defaults)        ; tame sudden yet inevitable temporary windows
vc-gutter                ; vcs diff in the fringe
(window-select +numbers) ; visually switch windows
workspaces               ; tab emulation, persistence & separate workspaces
zen                      ; distraction-free coding or writing
#+end_src
*The order of modules in above list make sense, so don't put them into subsections.*

** Themes
restore last selected theme
#+begin_src emacs-lisp
(defun load-in-doom-dir (file-name)
  (let ((full-name (expand-file-name file-name doom-private-dir)))
    (if (file-exists-p full-name)
        (load full-name))))

(load-in-doom-dir "theme.el")
#+end_src

difficult to choose theme? random it
#+begin_src emacs-lisp
(defun +my/random-theme ()
  (interactive)
  (let* ((all-themes (custom-available-themes))
         (next-theme (nth (random (length all-themes)) all-themes)))
    (consult-theme next-theme)))

(map! :leader
      (:prefix "t"
       :desc "Random theme" "t" #'+my/random-theme))
#+end_src

track current theme for later load
#+begin_src emacs-lisp
(defun +my/save-theme (prev new-theme &rest args)
  (let
      ((theme-config-file (expand-file-name "theme.el" doom-private-dir)))
    (write-region
     (format "(setq doom-theme '%s)\n" new-theme) nil theme-config-file)
    (message "Switch to theme: %s" new-theme)))

(add-variable-watcher 'doom-theme #'+my/save-theme)
#+end_src

** ewal
#+begin_src emacs-lisp :tangle packages.el
(package! ewal-doom-themes)
#+end_src

#+begin_src emacs-lisp
(use-package! ewal-doom-themes)
#+end_src

to refresh wal theme from command line
#+begin_src fish :tangle no
emacs-client -e "(load-theme 'ewal-doom-themes t)"
#+end_src

** Fonts
*** Doom font
#+begin_src fish
set -a 2install ttf-sarasa-ui-sc adobe-source-serif-fonts
# for unicode/emoji font fallback
set -a 2install quivira ttf-twemoji
#+end_src

[[https://github.com/doomemacs/doomemacs/issues/6131][doomemacs/doomemacs#6131 DPI settings are not respected by "setq doom-font"]]
#+begin_src emacs-lisp
(setq doom-font (font-spec :family "mononokiLiga Nerd Font Mono" :size 13.0)
      ;; big font mode resize serif-font and variable-pitch-font also
      ;; doom-big-font (font-spec :family "MononokiLiga Nerd Font Mono" :size (+my/font-size 17))
      ;; doom-unicode-font (font-spec :family "Twemoji")
      doom-serif-font (font-spec :family "Source Serif Pro" :size 13.0))
      ;; doom-variable-pitch-font (font-spec :family "Sarasa UI SC" :size 14.5))
#+end_src

*** =all-the-icons= font
#+begin_src emacs-lisp
(use-package all-the-icons
  :custom
  (all-the-icons-scale-factor 0.9))
#+end_src

*** =unicode=
#+begin_src fish
set -a 2install ttf-firacode-nerd tex-gyre-math-fonts
#+end_src

- doom way of change =unicode= font
get current display font by =SPC h '=
see [[https://en.wikipedia.org/wiki/Plane_(Unicode)][Plane (Unicode) - Wikipedia]] for unicode block name
#+BEGIN_SRC elisp
(after! unicode-fonts
  (push "UbuntuLiga Nerd Font Mono" (cadr (assoc "Greek and Coptic" unicode-fonts-block-font-mapping)))
  (dolist (unicode-block '("Mathematical Alphanumeric Symbols"
                           "Mathematical Operators"
                           "Miscellaneous Mathematical Symbols-A"
                           "Miscellaneous Mathematical Symbols-B"
                           "Miscellaneous Symbols"
                           "Miscellaneous Symbols and Arrows"
                           "Miscellaneous Symbols and Pictographs"
                           "Letterlike Symbols"))
      (push "TeX Gyre Termes Math" (cadr (assoc unicode-block unicode-fonts-block-font-mapping)))))

#+END_SRC

- old school way of change =unicode= font
[[https://idiocy.org/emacs-fonts-and-fontsets.html][Emacs, fonts and fontsets]]
#+begin_src emacs-lisp :tangle no
(defun +my/ligature-font ()
  (dolist (chars '("ℤ" "ℝ" "ℕ"))
      (set-fontset-font (frame-parameter nil 'font) (string-to-char chars) "DejaVu Math TeX Gyre") nil 'prepend)
  ;; (set-fontset-font t ?𝔽 "DejaVu Math TeX Gyre")
  (set-fontset-font (frame-parameter nil 'font) '(?𝔸 . ?𝕐) "DejaVu Math TeX Gyre") nil 'prepend)
#+end_src

*** Chinese fonts
- [[https://emacs.stackexchange.com/questions/68644/doom-emacs-setting-font-for-devanagari-characters][Doom Emacs - Setting Font for Devanagari characters - Emacs Stack Exchange]]
- [[https://rongcuid.github.io/posts/2021-04-02-Doom-Emacs-CJK.html][Rongcui Dong's Site - 如何在 Doom Emacs 中设置中文]] 
- [[https://emacs-china.org/t/doom-emacs/16809/7][doom emacs 中文字体与默认字体冲突 - #7，来自 HepIsaac - Emacs-general - Emacs China]]
- [[https://emacs-china.org/t/doom-emacs/9628/8][doom emacs 下中文字体的设置 - #8，来自 RicardoM - Emacs-general - Emacs China]]
- [[https://baohaojun.github.io/blog/2013/05/09/0-emacs-font-global-scaling.html][全局放大 Emacs 字体]]
- [[https://baohaojun.github.io/blog/2012/12/19/perfect-emacs-chinese-font.html][狠狠地折腾了一把 Emacs 中文字体]]
- [[https://github.com/hick/emacs-chinese#org-的中文问题][GitHub - hick/emacs-chinese: Emacs 相关中文问题以及解决方案]]
- [[https://github.com/doomemacs/doomemacs/issues/5092][doomemacs/doomemacs#5092 (invalid-read-syntax . "#") on running doom doctor]]

#+begin_src fish
set -a 2install ttf-kose-git
#+end_src

#+begin_src emacs-lisp
(defun +my/cjk-font()
  (dolist (charset '(kana han cjk-misc))
    (set-fontset-font (frame-parameter nil 'font) charset
                      (font-spec :family "Kosefont JP"))))
#+end_src

*** other faces
#+begin_src fish
set -a 2install ttf-{recursive,twemoji,comic-shanns-v2}
#+end_src

#+begin_src emacs-lisp
(defun +my/better-font (font-size)
  (interactive "N")
  (if (display-graphic-p)
      (progn
        (set-face-font 'mode-line (font-spec :family "Comic Shanns" :size (+ 0.0 font-size)))
        (set-face-font 'mode-line-inactive (font-spec :family "Comic Shanns" :size (+ 0.0 font-size)))
        (set-face-font 'font-lock-comment-face (font-spec :family "Cascadia Code Cur" :size (+ 0.0 font-size)))
        (+my/cjk-font))))
#+end_src

*** Font scale
- [[https://emacs.stackexchange.com/questions/29511/text-scale-for-all-faces-in-buffer][text-scale for all faces in buffer - Emacs Stack Exchange]]
- [[https://so.nwalsh.com/2020/01/08-gfs][Emacs “Global Face Scaling”]]
- [[https://github.com/doomemacs/doomemacs/issues/4211][doomemacs/doomemacs#4211 Make `doom/increase-font-size` to adjust more fonts]]

#+begin_src emacs-lisp :tangle packages.el
(package! emacs-gfs
  :recipe (:host github
           :repo "ndw/emacs-gfs"))
#+end_src

- [ ] display =text-scale-mode-amount= in mode-line
#+begin_src emacs-lisp
;; set a rescale font to cjk charset fonts,
;; so no explicit font size is needed
;; rescale doom-font cause bold font size != regular
(dolist (rescales '(("Ubuntu" . 1.05)
                    ("mononoki" . 1.00)
                    ("Cascadia" . 0.95)
                    ("Kosefont" . 1.10)
                    ("小濑字体" . 1.10)
                    ))
  (push rescales face-font-rescale-alist))

(use-package! emacs-gfs
  :custom
  (gfs/default-face-height 140)
  (gfs/resizeable-ignore-faces nil)
  :config
  (define-key evil-normal-state-map (kbd "C--") 'gfs/shrink-faces)
  (define-key evil-normal-state-map (kbd "C-=") 'gfs/magnify-faces))
#+end_src

*** Hooks
Visual effect test
#+begin_src python :tangle no
  1234567890-+abcdedfghijkl
# 1234567890-+abcdedfghijkl
# 12345然后这是中文对齐jkl
#+end_src

#+begin_src emacs-lisp
(defun +my|init-font (&optional frame)
  (if frame
    (with-selected-frame frame
      (+my/better-font 14.3))
    (+my/better-font 14.3)))

(if (and (fboundp 'daemonp) (daemonp))
    (add-hook 'after-make-frame-functions #'+my|init-font)
  (add-hook 'doom-init-ui-hook #'+my|init-font))
(add-hook 'doom-load-theme-hook #'+my|init-font)

;;https://emacs.stackexchange.com/a/47092
;; DONE restore ligature after exit big font mode
(add-hook 'doom-big-font-mode-hook
          (lambda ()
            (if doom-big-font-mode
                (progn
                  (+my/better-font 22.0)
                  (add-hook 'doom-big-font-mode-hook #'+my|init-font))
              (remove-hook 'doom-big-font-mode-hook #'+my|init-font))))

(add-hook 'writeroom-mode-enable-hook (lambda () (+my/better-font 20.5)))
(add-hook 'writeroom-mode-disable-hook #'+my|init-font)
#+end_src

** Doom-dashboard
References
- [[https://discourse.doomemacs.org/t/how-to-change-your-splash-screen/57][How to change your splash screen - Configuration - Doom Emacs Discourse]]
- [[https://stackoverflow.com/a/25158644][elisp - Read from a file into a Emacs lisp list - Stack Overflow]]

#+begin_src emacs-lisp
(defun my-weebery-is-always-greater (splash-file-name)
  ;; generated by ~figlet -W DOOM EMACS~
  (let* ((banner (s-split "\n" (f-read splash-file-name) t))
         (longest-line (apply #'max (mapcar #'length banner))))
    (put-text-property
     (point)
     (dolist (line banner (point))
       (insert (+doom-dashboard--center
                +doom-dashboard--width
                (concat line (make-string (max 0 (- longest-line (length line))) 32)))
               "\n"))
     'face 'doom-dashboard-banner)))

(let ((splash-file-name (expand-file-name "splash" doom-private-dir)))
  (if (file-exists-p splash-file-name)
    (setq +doom-dashboard-ascii-banner-fn (lambda () (my-weebery-is-always-greater splash-file-name)))
    ))
#+end_src

add =vterm= entry
#+begin_src emacs-lisp
(add-to-list '+doom-dashboard-menu-sections
             '("Open vterm"
               :icon (all-the-icons-octicon "terminal" :face 'doom-dashboard-menu-title)
               :when (modulep! :term vterm)
               :face (:inherit (doom-dashboard-menu-title bold))
               :action +vterm/here))
#+end_src

#+begin_src emacs-lisp :tangle no
(assoc-delete-all "Open vterm here" +doom-dashboard-menu-sections)
#+end_src

** Ligatures
check code ligatures, *bold* and /italic/ enabled
== <- -> <= => != == >= <== ==> === ?= :=

[[https://emacs-china.org/t/org-source-code/9762/8][求一款适合阅读 org source code 的主题 - #8，来自 lijigang - Org-mode - Emacs China]]
#+begin_src emacs-lisp
(with-eval-after-load "ligatures"
  (plist-put! +ligatures-extra-symbols
              :private    "")
  (global-prettify-symbols-mode))
#+end_src

** Doom-modeline
#+begin_src emacs-lisp
(use-package! doom-modeline
  :hook (after-init . doom-modeline-mode)

  :custom
  ;; The limit of the window width.
  ;; If `window-width' is smaller than the limit, some information won't be displayed.
  (doom-modeline-window-width-limit fill-column)
  (doom-modeline-enable-word-count nil)
  (doom-modeline-persp-name t)
  (doom-modeline-persp-icon nil)
  (doom-modeline-workspace-name nil))
#+end_src

[[https://github.com/seagle0128/doom-modeline/issues/194][one single modeline when split]]
#+begin_src emacs-lisp :tangle no
;; wrap your mode-line-format
;((:eval (when (doom-modeline--active) .)))
(set-face-attribute 'mode-line-inactive nil
                    :underline t
                    :background (face-background 'default))
#+end_src

** Popup
#+begin_src emacs-lisp
(setq split-width-threshold 120)
#+end_src

see ~display-buffer-alist~
#+begin_src emacs-lisp
(when (modulep! :ui popup)
  (set-popup-rules!
    '(("^\\*\\([Hh]elp\\|Apropos\\)"  ; help messages
       :ignore t)
      ("^\\*eww\\*"  ; `eww' (and used by dash docsets)
       :ignore t)
      ("^\\*\\(?:Wo\\)?Man "
       :ignore t)
      ("^\\*info\\*$"
       :ignore t))))
#+end_src
use ~+popup-mode~ to toggle popup mode globally.

** treemacs
#+begin_src emacs-lisp :tangle no
(use-package! treemacs
  :when (modulep! :ui treemacs)
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  (setq treemacs-no-load-time-warnings t)
  :config
  (setq treemacs-width 17)
  (setq treemacs-project-follow-cleanup t)
  ;; (setq treemacs-user-mode-line-format t)
  ;; https://github.com/hlissner/doom-emacs/issues/1551
  ;; doom-themes-treemacs-enable-variable-pitch nil

  ;; https://github.com/Alexander-Miller/treemacs/issues/486)
  ;; (dolist (face '(treemacs-root-face
  ;;                 treemacs-git-unmodified-face
  ;;                 treemacs-git-modified-face
  ;;                 treemacs-git-renamed-face
  ;;                 treemacs-git-ignored-face
  ;;                 treemacs-git-untracked-face
  ;;                 treemacs-git-added-face
  ;;                 treemacs-git-conflict-face
  ;;                 treemacs-directory-face
  ;;                 treemacs-directory-collapsed-face
  ;;                 treemacs-file-face
  ;;                 treemacs-tags-face))
  ;;  (set-face-attribute face nil :family "Comic Shanns" :height (+ 80 (+my/font-size 20))))
  (treemacs-follow-mode t)
  (treemacs-filewatch-mode t)
  (treemacs-fringe-indicator-mode 'always)
  (treemacs-git-mode 'extended))

(use-package treemacs-all-the-icons
  :after (treemacs all-the-icons))
#+end_src

** tab bar
#+begin_src emacs-lisp :tangle no
(use-package centaur-tabs
  :custom
  (centaur-tabs-style "box")
  (centaur-tabs-height 26)
  (centaur-tabs-set-icons t)
  ;; (centaur-tabs-plain-icons t)
  (centaur-tabs-gray-out-icons 'buffer)
  (centaur-tabs-set-bar 'left)
  (centaur-tabs-set-modified-marker t)
  :config
  (centaur-tabs-headline-match)
  (centaur-tabs-mode t)
  :hook
  (+doom-dashboard-mode . centaur-tabs-local-mode)
  (ranger-mode-hook . centaur-tabs-local-mode)
  (calendar-mode . centaur-tabs-local-mode)
  (org-agenda-mode . centaur-tabs-local-mode)
  :bind
  (:map evil-normal-state-map
   ("g t" . centaur-tabs-forward)
   ("g T" . centaur-tabs-backward))
  )
#+end_src

** Others
Transparency
#+begin_src emacs-lisp
(set-frame-parameter (selected-frame) 'alpha '(85 . 50))
(add-to-list 'default-frame-alist '(alpha . (85 . 50)))

(defun toggle-transparency ()
  (interactive)
  (let ((alpha (frame-parameter nil 'alpha)))
    (set-frame-parameter
     nil 'alpha
     (if (eql (cond ((numberp alpha) alpha)
                    ((numberp (cdr alpha)) (cdr alpha))
                    ;; Also handle undocumented (<active> <inactive>) form.
                    ((numberp (cadr alpha)) (cadr alpha)))
              100)
         '(85 . 50) '(100 . 100)))))

(map! :leader
      (:prefix "t"
       :desc "Toggle transparency"    "T" #'toggle-transparency
       ))
#+end_src

Line numbers
#+begin_src emacs-lisp
(setq display-line-numbers-type nil)
#+end_src

* Editing
#+begin_src emacs-lisp :tangle init.el
:editor
(evil +everywhere); come to the dark side, we have cookies
file-templates    ; auto-snippets for empty files
fold              ; (nigh) universal code folding
(format +onsave)  ; automated prettiness
multiple-cursors  ; editing in many places at once
parinfer          ; turn lisp into python, sort of
snippets          ; my elves. They type so I don't have to
word-wrap         ; soft wrapping with language-aware indent
#+end_src

** Evil
[[https://emacs.stackexchange.com/questions/28135/in-evil-mode-how-can-i-prevent-adding-to-the-kill-ring-when-i-yank-text-visual][In Evil mode, how can I prevent adding to the kill ring when I yank text, vis...]]
#+begin_src emacs-lisp
(setq-default evil-kill-on-visual-paste nil)
#+end_src

Disabling cursor movement when exiting insert mode
#+begin_src emacs-lisp
(setq evil-move-cursor-back nil)
#+end_src

[[https://github.com/doomemacs/doomemacs/issues/6478][doomemacs/doomemacs#6478 `evil-ex-search` skips matches in folded regions (in...]]
#+begin_src emacs-lisp :tangle no
(after! evil
  (evil-select-search-module 'evil-search-module 'isearch))
#+end_src

** format
#+begin_src fish
set -a 2install prettier shfmt clang-format-static-bin python-black
#+end_src

** Others
About Parentheses
#+begin_src emacs-lisp :tangle no
(setq show-paren-style 'expression)
#+end_src

* Emacs
#+begin_src emacs-lisp :tangle init.el
:emacs
electric     ; smarter, keyword-based electric-indent
ibuffer      ; interactive buffer management
(undo +tree) ; persistent, smarter undo for your inevitable mistakes
vc           ; version-control and Emacs, sitting in a tree
#+end_src

** dired-ranger
#+begin_src emacs-lisp :tangle no
(use-package! dired
  :config
  ;; https://github.com/jtbm37/all-the-icons-dired/pull/39/
  (setq all-the-icons-dired-monochrome nil)
  (setq all-the-icons-dired-mode t)
  )

(use-package! ranger
  :when (modulep! :emacs dired +ranger)
  :after dired
  :custom
  (ranger-cleanup-eagerly t)
  (ranger-modify-header t)
  (ranger-cleanup-on-disable t)
  (ranger-return-to-ranger t)
  ;; aviod noisy lsp root request when browsing
  (ranger-show-literal nil)
  (ranger-excluded-extensions '("mkv" "iso" "mp4" "ipynb"))
  (ranger-max-preview-size 10)
  (ranger-dont-show-binary t)
  (ranger-footer-delay 0.2)
  (ranger-preview-delay 0.04)
  :config
  (ranger-override-dired-mode t)
  ;; TODO change =ranger-pop-eshell= to vterm
  ;; (setq helm-descbinds-window-style 'same-window)
  (map! :leader
        (:prefix "o"
         :desc "ranger"    "r" #'ranger
         :desc "REPL"    "R" #'+eval/open-repl-other-window))
  )
#+end_src

** Dired
#+begin_src emacs-lisp
(use-package dired
  :custom
  (dired-recursive-deletes 'always)
  (delete-by-moving-to-trash t)
  (dired-clean-confirm-killing-deleted-buffers nil)
  (dired-dwim-target t)
  ;; Make sure to use the long name of flags when exists
  ;; eg. use "--almost-all" instead of "-A"
  ;; Otherwise some commands won't work properly
  (dired-listing-switches
        "-l --almost-all --human-readable --time-style=long-iso --group-directories-first --no-group")

  :config
  ;; Dirvish respects all the keybindings in `dired-mode-map'
  (map!
   :map dired-mode-map
   :ng "h" #'dired-up-directory
  ;;  ("j" . dired-next-line)
  ;;  ("k" . dired-previous-line)
   :ng "l" #'dired-find-file
   :ng "+" #'dired-create-empty-file
   :n "i" #'wdired-change-to-wdired-mode
   :n "." #'dired-omit-mode))

(use-package dired-x
  ;; Enable dired-omit-mode by default
  :hook
  (dired-mode . dired-omit-mode)
  :config
  ;; Make dired-omit-mode hide all "dotfiles"
  (setq dired-omit-files
        (concat dired-omit-files "\\|^\\..*$")))
#+end_src

** Dirvish
#+begin_src emacs-lisp :tangle packages.el
(package! dirvish)
#+end_src

#+begin_src emacs-lisp
(use-package dirvish
  :init
  (dirvish-override-dired-mode)
  (dirvish-side-follow-mode)
  :custom
  (dirvish-side-width 25)
  (dirvish-reuse-session nil)
  ;; TODO fix line height
  (dirvish-quick-access-entries
   '(("h" "~/"                          "Home")
     ("d" "~/Downloads/"                "Downloads")
     ("m" "/mnt/"                       "Drives")
     ("t" "~/.local/share/Trash/files/" "TrashCan")))
  ;; (dirvish-header-line-format '(:left (path) :right (free-space)))
  (dirvish-mode-line-format
   '(:left
     (sort file-time " " file-size symlink) ; it's ok to place string inside
     :right
     ;; For `dired-filter' users, replace `omit' with `filter' segment defined below
     (omit yank index)))
  (dirvish-attributes '(vc-state subtree-state all-the-icons collapse git-msg file-size))
  ;; Maybe the icons are too big to your eyes
  (dirvish-all-the-icons-height 0.8)
  ;; In case you want the details at startup like `dired'
  (dirvish-hide-details t)
  :config
  ;; (dirvish-peek-mode)
  (map!
   (:leader
    :prefix "o"
    :desc "dirvish"    "i" #'dirvish
    :desc "dirvish-side"    "s" #'dirvish-side)
   "C-c f" #'dirvish-fd
   :map dired-mode-map
   "TAB" #'dirvish-toggle-subtree
   "SPC" #'dirvish-show-history
   "*"   #'dirvish-mark-menu
   :gn "r"   #'dirvish-roam
   :gn "b"   #'dirvish-quick-access
   :gn "y"   #'dirvish-yank-menu
   :gn "N"   #'dirvish-narrow
   :gn "f"   #'dirvish-file-info-menu
   :gn "M-n" #'dirvish-history-go-forward
   :gn "M-p" #'dirvish-history-go-backward
   :gn "M-s" #'dirvish-setup-menu
   :gn "M-f" #'dirvish-layout-toggle
   :gn "M-m" #'dirvish-mark-menu
   :gn "q"   #'dirvish-quit
   [remap dired-sort-toggle-or-edit] #'dirvish-quicksort
   [remap dired-do-redisplay] #'dirvish-ls-switches-menu
   [remap dired-summary] #'dirvish-dispatch
   [remap dired-do-copy] #'dirvish-yank-menu
   [remap mode-line-other-buffer] #'dirvish-other-buffer))
#+end_src

* Term
#+begin_src fish
set -a 2install fish libvterm
#+end_src

#+begin_src emacs-lisp :tangle init.el
:term
vterm ; the best terminal emulation in Emacs
#+end_src

** =vterm=
#+begin_src emacs-lisp
(defun +my/vterm-switch ()
  "Switch to vterm buffer in `Term' workspace.
If `Term' workspace not exist, create it.
If no vterm buffer in `Term' workspace, create it."
  (interactive)
  (+workspace-switch "Term" t)
  (let ((vterm-buffer
         ;; return first vterm buffer in `Term' workspace
         (catch 'foo
           (dolist (buffer (+workspace-buffer-list))
             (let ((bn (buffer-name buffer)))
               (when (and bn
                          ;; https://stackoverflow.com/a/2238589
                          (with-current-buffer bn
                            (eq major-mode 'vterm-mode)))
                 (throw 'foo bn))))))
        (display-buffer-alist))
    (if vterm-buffer
        (switch-to-buffer vterm-buffer)
      ;; create vterm buffer if not exist
      (vterm vterm-buffer-name))))
#+end_src

#+begin_src emacs-lisp
(defun +my/vterm-cd-project-root ()
  (interactive)
  (vterm-send-string "cd $PROOT")
  (vterm-send-return))
#+end_src

#+begin_src emacs-lisp
(use-package! vterm
  :custom
  (vterm-shell "/usr/bin/fish")
  (vterm-buffer-name-string "vterm %s")
  (vterm-kill-buffer-on-exit t)
  (vterm-ignore-blink-cursor nil)
  (vterm-max-scrollback 10000)
  :config
  (map! :leader
        (:prefix "o"
         ;; default to vterm at current file directory
         ;; `C-Return' to project root
         :desc "Toggle vterm popup" "t" (cmd!! #'+vterm/toggle t)
         :desc "Open vterm here" "T" (cmd!! #'+vterm/here t)))
  (map! :leader
        (:prefix "b"
         :desc "Switch to vterm buffer" "v" #'+my/vterm-switch))
  ;; TODO fixed-pitch in bpytop like
  ;; (add-hook 'vterm-mode-hook
  ;;           (lambda ()
  ;;             (set (make-local-variable 'buffer-face-mode-face) 'fixed-pitch
  ;;                  (buffer-face-mode t))))
  (define-key vterm-mode-map (kbd "M-q") #'vterm-send-escape)
  (define-key vterm-mode-map [ (control return) ] #'+my/vterm-cd-project-root))
#+end_src

** Colored output issues
[[https://wiki.archlinux.org/index.php/Emacs#Colored_output_issues][Emacs - ArchWiki]]
#+begin_src emacs-lisp :tangle no
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
#+end_src

** fish shell
#+begin_src emacs-lisp
(when (and (executable-find "fish")
           (require 'fish-completion nil t))
  (global-fish-completion-mode))
#+end_src

ligatures
#+begin_src emacs-lisp
(with-eval-after-load "ligatures"
  (set-ligatures! 'fish-mode
    :def "function"
    :return "return"
    :and "&&"
    :or "||"
    :not "not"
    :true "true"
    :false "false"
    :for "for"))
#+end_src

* Checkers
#+begin_src emacs-lisp :tangle init.el
:checkers
syntax           ; tasing you for every semicolon you forget
(spell +flyspell ; tasing you for misspelling mispelling
       +everywhere)
grammar          ; tasing grammar mistake every you make
#+end_src

** Spell checker
#+begin_src fish
set -a 2install aspell aspell-en
#+end_src

** grammar
#+begin_src fish
set -a 2install languagetool
#+end_src

disable annoying =writegood-mode=
#+begin_src emacs-lisp :tangle packages.el
(package! writegood-mode
  :disable t)
#+end_src

** KILL =proselint=
#+begin_src fish :tangle no
pip install proselint
#+end_src

#+begin_src emacs-lisp :tangle no
(package! flymake-proselint)
#+end_src

#+begin_src emacs-lisp :tangle no
(use-package! flycheck
  :config
  (flycheck-define-checker proselint
      "Flycheck checker using Proselint.

  See URL `http://proselint.com/'."
      :command ("proselint" "--json" "-")
      :standard-input t
      :error-parser flycheck-proselint-parse-errors
      :modes (text-mode org-mode latex-mode LaTeX-mode markdown-mode gfm-mode message-mode)))
#+end_src

** =grammarly=
#+begin_src emacs-lisp :tangle no
(package! flycheck-grammarly)
#+end_src

#+begin_src emacs-lisp :tangle no
(with-eval-after-load 'flycheck
  (flycheck-grammarly-setup))
(setq flycheck-grammarly-check-time 0.8)
#+end_src

* Tools
#+begin_src emacs-lisp :tangle init.el
:tools
biblio          ; Writes a PhD for you (citation needed)
debugger        ; FIXME stepping through code, to help you add bugs
docker
editorconfig    ; let someone else argue about tabs vs spaces
(eval +overlay) ; run code, run (also, repls)
(lookup         ; navigate your code and its documentation
 +docsets
 +dictionary)
(lsp +peek)     ; M-x vscode
magit           ; a git porcelain for Emacs
pdf             ; pdf enhancements
rgb             ; creating color strings
upload          ; map local to remote projects via ssh/ftp
#+end_src

** pdf-tools
default pdf viewer in emacs
[[http://alberto.am/2020-04-11-pdf-tools-as-default-pdf-viewer.html][pdf-tools as the default PDF viewer in Emacs]]
#+begin_src emacs-lisp
(use-package! pdf-tools
  :custom
  (+latex-viewers '(pdf-tools evince okular)))

;; to use pdfview with auctex
(setq TeX-view-program-selection '((output-pdf "PDF Tools")))
(setq TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view)))
;;(TeX-source-correlate-start-server t)
;; not sure if last line is neccessary

;; to have the buffer refresh after compilation
(add-hook 'TeX-after-compilation-finished-functions
          #'TeX-revert-document-buffer)
#+end_src

** =editorconfig=
#+begin_src fish :tangle install.fish
set -a 2install emacs-editorconfig-git
#+end_src

** lookup
#+begin_src fish
set -a 2install sqlite wordnet-cli
#+end_src

#+begin_src emacs-lisp
(add-to-list '+lookup-provider-url-alist '("Brave" "https://search.brave.com/search?q=%s"))
#+end_src

** lsp
[[https://github.com/emacs-lsp/lsp-ui/issues/561#issuecomment-1080363562][emacs-lsp/lsp-ui#561 Scaling/Resizing of sideline fonts]]
#+begin_src emacs-lisp
(use-package lsp-ui :commands lsp-ui-mode
  :config
  (progn
    ;;
    ;; 2022-03-28 - fix sideline height computation
    ;;
    (defun lsp-ui-sideline--compute-height nil
      "Return a fixed size for text in sideline."
      (let ((fontHeight (face-attribute 'lsp-ui-sideline-global :height)))
        (if (null text-scale-mode-remapping)
            '(height
              (if (floatp fontHeight) fontHeight
                (/ (face-attribute 'lsp-ui-sideline-global :height) 100.0))

              ;; Readjust height when text-scale-mode is used
              (list 'height
                    (/ 1 (or (plist-get (cdr text-scale-mode-remapping) :height)
                             1)))))))

    ;;
    ;; 2022-03-28 - fix sideline alignment
    ;;
    (defun lsp-ui-sideline--align (&rest lengths)
      "Align sideline string by LENGTHS from the right of the window."
      (list (* (window-font-width nil 'lsp-ui-sideline-global)
               (+ (apply '+ lengths) (if (display-graphic-p) 1 2)))))))
#+end_src

** magit
[[https://github.com/TheLocehiliosan/yadm][GitHub - TheLocehiliosan/yadm: Yet Another Dotfiles Manager]]
[[https://www.reddit.com/r/emacs/comments/gjukb3/yadm_magit/][reddit:yadm+magit]]

~tramp~ from ~Melpa~ buggy, install it from ~aur~.
#+begin_src emacs-lisp
(use-package! tramp
  :config
  ;; (setenv "SHELL" "/bin/bash")
  (add-to-list 'tramp-methods
               '("yadm"
                 (tramp-remote-shell "/bin/bash")
                 (tramp-remote-shell-args ("-c"))
                 (tramp-login-program "yadm")
                 (tramp-login-args (("enter")))))
                 ;; (tramp-login-env (("SHELL") ("/bin/bash")))))

  (defun yadm-status ()
    (interactive)
    (magit-status "/yadm::"))
  (map! :leader
        (:prefix "g"
         :desc "yadm-status" "a" #'yadm-status)))
#+end_src

can't set shell rightly, change fish prompt in tramp instead. see [[file:~/.config/fish/config.fish]]

* Lang
#+begin_src emacs-lisp :tangle init.el
:lang
(cc +lsp)              ; C/C++/Obj-C madness
emacs-lisp             ; drown in parentheses
(lua +lsp)             ; one-based indices? one-based indices
markdown               ; writing docs for people to ignore
(org                   ; organize your plain life in plain text
 +hugo
 +dragndrop
 +gnuplot
 +noter
 +present
 +pandoc
 +pretty
 +jupyter
 +roam2)
(latex                 ; writing papers in Emacs has never been so fun
 +lsp
 +fold
 +cdlatex)
(python +lsp +pyright) ; beautiful is better than ugly
(sh +fish +lsp)        ; she sells {ba,z,fi}sh shells on the C xor
(yaml +lsp)            ; JSON, but readable
#+end_src

** Latex
#+begin_src fish :tangle no
set -a 2install miktex texlab
#+end_src

#+begin_src emacs-lisp
(use-package! evil-tex
  :when (modulep! :editor evil +everywhere)
  :config
  (setq evil-tex-include-newlines-in-envs nil
        evil-tex-select-newlines-with-envs nil)
  )
#+end_src

*** =cdlatex=
#+begin_src emacs-lisp
(use-package! cdlatex
  :config
  (map! :map cdlatex-mode-map
    :i "TAB" #'cdlatex-tab))
#+end_src

*** =lsp=
word completion along with =(:lang (latex +lsp))=
see =company-backends= variable docs
[[https://github.com/hlissner/doom-emacs/issues/5672][set-company-backend! appending instead of prepending · Issue #5672 · doomemac...]]
#+begin_src emacs-lisp
(setq-hook! 'LaTeX-mode-hook +lsp-company-backends '(:separate company-capf company-yasnippet company-dabbrev))
#+end_src

*** math preview
#+begin_src emacs-lisp :tangle packages.el
(package! math-preview)
#+end_src

#+begin_src fish
paru -S --needed --noconfirm npm
git clone https://gitlab.com/matsievskiysv/math-preview ~/.local/lib
cd ~/.local/lib/math-preview && npm i
#+end_src

preview latex formulas
#+begin_src emacs-lisp
(use-package! math-preview
  :custom
  (math-preview-command "~/.local/lib/math-preview/math-preview.js")
  (math-preview-tex-marks '(("\\begin{equation}" "\\end{equation}")
                            ("\\begin{equation*}" "\\end{equation*}")
                            ("\\begin{align}" "\\end{align}")
                            ("\\begin{align*}" "\\end{align*}")
                            ("\\[" "\\]")
                            ("\\(" "\\)")
                            ("$$" "$$"))))
  ;; (math-preview-preprocess-functions '((lambda (s)
  ;;                                        (concat "{\\color{white}" s "}")))))
#+end_src

*** Others
clean intermediate files
#+begin_src emacs-lisp
(eval-after-load 'latex
  '(setq LaTeX-clean-intermediate-suffixes (delete "\\.synctex\\.gz"  LaTeX-clean-intermediate-suffixes)
         LaTeX-clean-intermediate-suffixes (append LaTeX-clean-intermediate-suffixes (list "\\.dvi" "\\.fdb_latexmk"))
         Tex-clean-confirm nil))
#+end_src

add =XeTeX= mode in =TeX/LaTeX=
[[https://tex.stackexchange.com/a/21205][emacs - AUCTeX and XeTeX - TeX - LaTeX Stack Exchange]]

#+begin_src emacs-lisp
(add-hook 'LaTeX-mode-hook
          (lambda ()
            (add-to-list 'TeX-command-list '("XeLaTeX" "%`xelatex%(mode)%' %t" TeX-run-TeX nil t))))
;; (setq TeX-command-default "XeLaTeX")))
;; (setq TeX-save-query nil)))
;; (setq TeX-show-compilation nil)))
#+end_src

** lua
#+begin_src fish
set -a 2install lua-language-server
#+end_src

lsp support
#+begin_src emacs-lisp
(use-package! lua-mode
  :when (modulep! :lang lua +lsp)
  :custom
  (lsp-clients-lua-language-server-bin "/usr/bin/lua-language-server")
  (lsp-clients-lua-language-server-main-location "/usr/lib/lua-language-server/bin/main.lua")
  (lsp-clients-lua-language-server-args '("-E" "--logpath" "/tmp/lua-language-server"))
  ;; (lsp-clients-lua-language-server-command '("lua-language-server" "-E"))
  (lsp-clients-lua-language-server-command nil))
#+end_src

ligatures
#+begin_src emacs-lisp
(with-eval-after-load "ligatures"
  (set-ligatures! 'lua-mode
    :def "function"
    :return "return"
    :and "and"
    :or "or"
    :not "not"
    :true "true"
    :false "false"
    :for "for"))
#+end_src

** wolfram
#+begin_src emacs-lisp :tangle packages.el
(package! wolfram-mode)
#+end_src

#+begin_src emacs-lisp
;; last update was 5 years ago
(use-package! wolfram-mode
  :config
  (autoload 'wolfram-mode "wolfram-mode" nil t)
  (autoload 'run-wolfram "wolfram-mode" nil t)
  (setq wolfram-program "/usr/local/bin/wolfram")
  (prependq! auto-mode-alist '(
                               ("\\.m\\'" . wolfram-mode)
                               ("\\.fr\\'" . wolfram-mode)
                               ("\\.wl\\'" . wolfram-mode)
                               ("\\.wls\\'" . wolfram-mode))))

(setq wolfram-path "~/.Mathematica/Applications")

(after! lsp
  (add-to-list 'lsp-language-id-configuration '(wolfram-mode . "Mathematica"))

  (lsp-register-client
   (make-lsp-client :language-id 'wolfram
                    :new-connection (lsp-tcp-server-command
                                     (lambda (port)
                                       `("wolfram" ;; or "wolframscript"
                                         "-script" ;; or "-file"
                                         "~/softwares/lsp-wl/init.wls"
                                         ,(concat
                                           "--socket="
                                           (number-to-string port)))))
                    :major-modes '(wolfram-mode)
                    :server-id 'lsp-wl)))
#+end_src

ligatures
#+begin_src emacs-lisp
(with-eval-after-load "ligatures"
  (set-ligatures! 'wolfram-mode
    :and "&&"
    :or "||"
    :not "not"
    :true "True"
    :false "False"))
#+end_src

open with =mathematica= within emacs
#+begin_src emacs-lisp
(after! dirvish
  (push '(("nb") "/usr/local/bin/mathematica" "%f") dirvish-open-with-programs))
#+end_src

** python
#+begin_src fish
set -a 2install python-{pytest,nose,pyflakes,isort,lsp-server}
#+end_src

** shell
#+begin_src fish
set -a 2install shellcheck-bin bash-language-server
#+end_src

** org
#+begin_src fish
set -a 2install gnuplot
#+end_src

References
- [[https://github.com/daviwil/emacs-from-scratch/blob/c55d0f5e309f7ed8ffa3c00bc35c75937a5184e4/init.el][emacs-from-scratch/init.el at c55d0f5e309f7ed8ffa3c00bc35c75937a5184e4 · davi...]]
- [[https://emacs.stackexchange.com/a/63793][How to copy links OUT of org-mode? - Emacs Stack Exchange]]
- [[https://stackoverflow.com/a/50875921][emacs - org-mode capture : dynamic file name - Stack Overflow]]

#+begin_src emacs-lisp
(setq org-directory "~/org/")
(defvar co/org-agenda-directory (expand-file-name "agenda" org-directory))
(defun co/org-agenda-file-paths (path)
  (if (listp path)
      (mapcar (lambda (x) (expand-file-name (concat x ".org") co/org-agenda-directory)) path)
    (expand-file-name (concat path ".org") co/org-agenda-directory)))

(defun org-copy-link-url ()
  (interactive)
  (kill-new (org-element-property :raw-link (org-element-context))))
#+end_src

#+begin_src emacs-lisp
(use-package! org
  :custom
  (org-agenda-files (co/org-agenda-file-paths '("todos" "habits" "journal")))
  (org-agenda-start-with-log-mode t)
  (org-log-done 'time)
  (org-log-into-drawer t)
  (org-startup-numerated t)
  (org-ellipsis "⤵")
  (org-image-actual-width 400)
  (org-duration-format '((special . h:mm)))
  (org-startup-with-inline-images t)
  (org-refile-targets '(("archive.org" :maxlevel . 1)))
  (org-link-descriptive t)

  :config
  (map! :map org-mode-map
        :localleader
        "y" #'org-copy-link-url)
  (load-in-doom-dir "org-capture-templates.el")

  ;;(org-clock-persist 'history)
  (org-clock-persistence-insinuate)
  ;; display inline images
  (org-display-inline-images)

  ;; Save Org buffers after refiling!
  (advice-add 'org-refile :after 'org-save-all-org-buffers))
#+end_src

*** unfold search
[[https://github.com/doomemacs/doomemacs/issues/6478#issuecomment-1328110153][doomemacs/doomemacs#6478 `evil-ex-search` skips matches in folded regions (in...]]
#+begin_src emacs-lisp
(after! org-fold-core

  (defun org-show-current-heading-tidily ()
    (interactive)  ;Inteactive
    "Show next entry, keeping other entries closed."
    (if (save-excursion (end-of-line) (outline-invisible-p))
        (progn (org-show-entry) (show-children))
      (setq-local my:current_line (line-number-at-pos))
      (outline-back-to-heading)
      (unless (and (bolp) (org-on-heading-p))
        (org-up-heading-safe)
        (hide-subtree)
        (error "Boundary reached"))
      (org-overview)
      (org-reveal t)
      (org-show-entry)
      (show-children)
      (goto-line my:current_line)))

  (defun qw/search-buffer ()
    (interactive)
    (org-fold-show-all)
    (+default/search-buffer)
    (org-show-current-heading-tidily)))
#+end_src

*** org-noter
#+begin_src emacs-lisp
(use-package! org-noter
  :after org
  :custom
  (org-noter-doc-split-fraction '(0.75 . 0.25))
  :config
  (org-noter-set-doc-split-fraction '(0.75 . 0.25)))

#+end_src

*** org-roam
#+begin_src emacs-lisp
(use-package! org-roam
  :after org
  :init
  (setq org-roam-directory (file-truename "~/org/roam")
        org-roam-v2-ack t)
  :custom
  (org-roam-dailies-capture-templates
   '(("d" "default" entry "* %?\n[%<%Y-%m-%d %H:%M>]\n"
      :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n"))))
  :config
  (require 'org-roam-dailies)
  )
#+end_src

*** org-pandoc-import
#+begin_src emacs-lisp :tangle packages.el
(package! org-pandoc-import
  :recipe (:host github
           :repo "tecosaur/org-pandoc-import"
           :files ("*.el" "filters" "preprocessors")))
#+end_src

#+begin_src emacs-lisp
(use-package! org-pandoc-import :after org)
#+end_src

*** Color ~shell~ block output
[[https://emacs.stackexchange.com/a/52238][How do I attach a custom function to process org-mode babel shell output?]]
#+BEGIN_SRC emacs-lisp :tangle no
(use-package cl-lib
  :init
  (defun org-redisplay-ansi-source-blocks ()
    "Refresh the display of ANSI text source blocks."
    (interactive)
    (org-element-map (org-element-parse-buffer) 'src-block
      (lambda (src)
        (when (equalp "ansi" (org-element-property :language src))
          (let ((begin (org-element-property :begin src))
                (end (org-element-property :end src)))
            (ansi-color-apply-on-region begin end))))))
  :custom
  (add-to-list 'org-babel-after-execute-hook #'org-redisplay-ansi-source-blocks)
  (setq org-babel-default-header-args:shell
        '((:results . "output verbatim drawer")
          (:wrap . "src ansi"))))
#+END_SRC

*** others
org-src
[[https://github.com/hlissner/doom-emacs/issues/5436][hlissner/doom-emacs#5436 org-src-window-setup not working correctly]]
#+begin_src emacs-lisp
(after! org
  (setq org-src-window-setup 'reorganize-frame)
  (set-popup-rule! "^\\*Org Src" :ignore t))
#+end_src

org-agenda
[[https://emacs.stackexchange.com/a/7840][saving - How do I automatically save org-mode buffers? - Emacs Stack Exchange]]
#+begin_src emacs-lisp
(advice-add 'org-agenda-quit :before 'org-save-all-org-buffers)
#+end_src

org-ref
#+begin_src emacs-lisp :tangle no
(use-package org-ref)
#+end_src

org-deft
#+begin_src emacs-lisp :tangle no
(setq deft-directory "~/org")
(setq deft-default-extension "org")
#+end_src

org-habit
#+begin_src emacs-lisp
(use-package! org-habit
  :custom
  (org-habit-graph-column 60)
  :config
  (add-to-list 'org-modules 'org-habit))
#+end_src

org-format
#+begin_src emacs-lisp
(load "~/org/org-format/org-format.el")
(use-package! org-format
  :config
  (map! :map org-mode-map
        :localleader
        "F" #'org-format-buffer))
#+end_src

remove org Fancy Priorities
#+begin_src emacs-lisp :tangle packages.el
(package! org-fancy-priorities :disable t)
#+end_src

** css
#+begin_src emacs-lisp
(prependq! auto-mode-alist '(("\\.rasi\\'" . css-mode)))
#+end_src

** yaml
#+begin_src fish
set -a 2install yaml-language-server
#+end_src

* Email
#+begin_src fish
set -a 2install isync mu
#+end_src

Example for initialing =mu= and =mbsync=
#+begin_src fish :tangle no
mkdir -p ~/.mail/$mailname
mu init --maildir=~/.mail --add-email-address=...@...
mbsync -c ~/.config/isync/$mbsyncrc -V -a
#+end_src

#+begin_src emacs-lisp :tangle init.el
:email
(mu4e +***REMOVED***
      +org)
#+end_src

** mu4e
#+begin_src emacs-lisp
(use-package! mu4e
  :defer 20
  :custom
  (mu4e-update-interval 300)
  (mu4e-split-view 'vertical)
  (mu4e-change-filenames-when-moving t)
  (mu4e-attachment-dir "~/Downloads")
  ;; every new email composition gets its own frame!
  (mu4e-compose-in-new-frame t)
  (mu4e-use-fancy-chars t))
#+end_src

private variables ~mu4e-get-mail-command~ and ~mu4e-contexts~
#+begin_src emacs-lisp
(load-in-doom-dir "mu4e.el")
#+end_src

*** alert
#+begin_src emacs-lisp :tangle no
(use-package mu4e-alert
  :after mu4e
  :hook ((after-init . mu4e-alert-enable-mode-line-display)
         (after-init . mu4e-alert-enable-notifications))
  :config (mu4e-alert-set-default-style 'libnotify))
#+end_src

* App
#+begin_src emacs-lisp :tangle init.el
:app
calendar
everywhere                 ; don't leave emacs
(rss +org)                 ; emacs as an RSS reader
#+end_src

** =elfeed=
[[https://pragmaticemacs.wordpress.com/2016/08/17/read-your-rss-feeds-in-emacs-with-elfeed/][Read your RSS feeds in emacs with elfeed | Pragmatic Emacs]]
#+begin_src emacs-lisp
(use-package! elfeed
  :custom
  (elfeed-db-directory (concat (getenv "NCDIR") "elfeed/db/"))
  (elfeed-enclosure-default-dir (concat (getenv "NCDIR") "elfeed/enclosures/"))
  ;; (elfeed-search-filter "@1-month-ago +unread")
  (rmh-elfeed-org-files (list "~/org/elfeed.org"))
  :config
  (add-hook! 'elfeed-search-mode-hook 'elfeed-update)
  (map! :leader
        (:prefix "o"
         :desc "elfeed"    "e" #'elfeed)))

(use-package! elfeed-goodies
  :after elfeed
  :config
  (setq elfeed-goodies/entry-pane-size 0.5))
#+end_src

* Other packages
#+begin_src emacs-lisp :tangle packages.el
(package! academic-phrases)

(package! vlf)

(package! inherit-org :recipe (:host github :repo "chenyanming/inherit-org"))

#+end_src

[[https://stackoverflow.com/a/24357106][How to append multiple elements to a list in Emacs lisp - Stack Overflow]]
#+begin_src emacs-lisp
(defun +my/append-to-list (list-var elements)
  "Append ELEMENTS to the end of LIST-VAR.

change to no return value
The return value is the new value of LIST-VAR."
  (unless (consp elements)
    (error "ELEMENTS must be a list"))
  (let ((list (symbol-value list-var)))
    (if list
        (setcdr (last list) elements)
      (set list-var elements))))
  ;(symbol-value list-var))
#+end_src

** keycast
#+begin_src emacs-lisp :tangle packages.el
(package! keycast)
#+end_src

[[https://github.com/tarsius/keycast/issues/7#issuecomment-881469067][tarsius/keycast#7 Add support for moody and doom-modeline.]]
#+begin_src emacs-lisp
(use-package keycast
  :config
  (define-minor-mode keycast-mode
    "Show current command and its key binding in the mode line (fix for use with doom-mode-line)."
    :global t
    (if keycast-mode
        (add-hook 'pre-command-hook 'keycast--update t)
      (remove-hook 'pre-command-hook 'keycast--update)))
  (add-to-list 'global-mode-string '("" keycast-mode-line)))
(keycast-mode) ;; or run keycast-mode by demand
#+end_src

** projectile
[[https://docs.projectile.mx/projectile/configuration.html][Configuration :: Projectile]]
#+begin_src emacs-lisp
(use-package! projectile
  :custom
  (projectile-indexing-method 'alien)
  (projectile-sort-order 'recently-active)
  (projectile-file-exists-remote-cache-expire (* 10 60))
  (projectile-track-known-projects-automatically nil)
  ;(projectile-require-project-root t)
  (projectile-auto-discover t))
  ;; (projectile-file-exists-local-cache-expire (* 5 60)))
#+end_src

** shrface
#+begin_src emacs-lisp :tangle packages.el
(package! shrface)
#+end_src

#+begin_src emacs-lisp
(use-package shrface
  :defer t
  :config
  (shrface-basic)
  (shrface-trial)
  (shrface-default-keybindings) ; setup default keybindings
  (setq shrface-href-versatile t))

(use-package eww
  :defer t
  :init
  (add-hook 'eww-after-render-hook #'shrface-mode)
  :config
  (require 'shrface))
#+end_src

** pomm
#+begin_src emacs-lisp :tangle packages.el
(package! pomm)
#+end_src

#+begin_src emacs-lisp
(use-package pomm
  :commands (pomm))
#+end_src

** screenshot
#+begin_src emacs-lisp :tangle packages.el
(package! screenshot
  :recipe (:host github :repo "yangsheng6810/screenshot"))
#+end_src

currently buggy
#+begin_src emacs-lisp :tangle no
(use-package screenshot)
#+end_src

** tldr
#+begin_src emacs-lisp :tangle packages.el
(package! tldr)
#+end_src

** leetcode
#+begin_src emacs-lisp :tangle no
(use-package leetcode
  :costum
  (leetcode-prefer-language "cpp")
  (leetcode-save-solutions t)
  (leetcode-directory "~/Coding/leetcode"))
#+end_src

** ivy-posframe
#+begin_src emacs-lisp :tangle no
(use-package ivy-posframe
  :custom
  (ivy-posframe-display-functions-alist
   '((swiper          . ivy-display-function-fallback)
     (complete-symbol . ivy-posframe-display-at-point)
     (counsel-M-x     . ivy-posframe-display-at-frame-top-center)
     (t               . ivy-posframe-display)))
  (ivy-posframe-parameters
   '((left-fringe . 8)
     (right-fringe . 8)))
  :config
  (ivy-posframe-mode 1))
#+end_src

** zotxt
#+begin_src emacs-lisp :tangle packages.el
(package! zotxt)
#+end_src

[[http://www.mkbehr.com/posts/a-research-workflow-with-zotero-and-org-mode/][A research workflow with Zotero and Org mode | mkbehr.com]]
#+begin_src emacs-lisp
(use-package zotxt
  :hook (org-mode . (lambda () (org-zotxt-mode 1)))
  :custom
  (zotxt-default-bibliography-style "mkbehr-short")
  :config

  (defun org-zotxt-get-attachment-path ()
    "Get attachment file path"
    (interactive "P")
    (let ((item-id (org-zotxt-extract-link-id-at-point)))
      (deferred:$
        (zotxt--request-deferred
         (format "%s/items" zotxt-url-base)
         :params `(("key" . ,item-id) ("format" . "paths"))
         :parser 'json-read)
        (deferred:nextc it
          (lambda (response)
            (let ((paths (cdr (assq 'paths (elt (request-response-data response) 0)))))
              (org-zotxt-choose-path paths))))
        (deferred:error it #'zotxt--deferred-handle-error)
        (if zotxt--debug-sync (deferred:sync! it)
          (deferred:nextc it
            (lambda (path) path))))))

  (defun +my/tilde-home-path (path)
    "covert path starts with /home/$usr/ to '~'"
    (interactive)
    (let ((home (getenv "HOME")))
      (if (string-prefix-p home path)
          (string-join `("~" ,(string-remove-prefix home path)) "")
        path)))

  (defun org-zotxt-copy-attachment-path ()
    "Open attachment of Zotero items linked at point.
  Opens with `org-open-file', see for more information about ARG."
    (interactive)
    (deferred:$
      (deferred:next
        (lambda ()
          (org-zotxt-get-attachment-path)))
      (deferred:nextc it
        (lambda (path)
          (let ((new-path (+my/tilde-home-path path)))
            (kill-new new-path)
            (message "\"%s\" send to system clipboard!" new-path))))))

  (map! (:map org-zotxt-mode-map
         :desc "org-zotxt-insert-selected"
         "C-c \" \"" (cmd!! #'org-zotxt-insert-reference-link '(4))
         :desc "org-zotxt-copy-attachment-path"
         "C-c \" c" #'org-zotxt-copy-attachment-path)))
#+end_src

* Other configs
** [[https://github.com/hlissner/doom-emacs/issues/397][maximize when start up]]
#+begin_src emacs-lisp :tangle no
(add-to-list 'initial-frame-alist '(fullscreen . maximized))
#+end_src

** proxy
#+begin_src emacs-lisp
(setq url-proxy-services
   `(("no_proxy" . "^\\(localhost\\|10\\..*\\|192\\.168\\..*\\)")
     ("http" . ,(shell-command-to-string "echo -n $ALL_PROXY"))
     ("https" . ,(shell-command-to-string "echo -n $ALL_PROXY"))))
#+end_src

** reverse words
#+begin_src emacs-lisp
(defun +my/reverse-words (beg end)
  "Reverse the order of words in region."
  (interactive "*r")
  (apply
   'insert
   (reverse
    (split-string
     (delete-and-extract-region beg end) "\\b"))))
#+end_src

* End
#+begin_src fish
paru -S --needed --noconfirm $2install
#+end_src

#+begin_src emacs-lisp :tangle init.el
:os
tty                        ; improve the terminal Emacs experience

:config
literate
(default +bindings +smartparens))
#+end_src

#+begin_src emacs-lisp
(map! :leader
      :desc "Eval expression"       ":"    #'pp-eval-expression
      :desc "M-x"                   ";"    #'execute-extended-command
      :desc "Org agenda"            "A"    #'org-agenda)
#+end_src

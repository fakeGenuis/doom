#+TITLE: Doom Emacs Configuration

Literate and modular Doom Emacs configuration.

* Table of contents :TOC:
- [[#about][About]]
- [[#tangle][Tangle]]
- [[#301-specific][30.1 specific]]
- [[#predefined][Predefined]]
- [[#input][Input]]
  - [[#chinese][Chinese]]
- [[#completion][Completion]]
  - [[#corfu][corfu]]
  - [[#vertico][vertico]]
- [[#ui][UI]]
  - [[#extra-themes][Extra themes]]
  - [[#doom][doom]]
  - [[#doom-dashboard][doom-dashboard]]
  - [[#modeline][modeline]]
  - [[#popup][popup]]
  - [[#unicode][unicode]]
  - [[#others][Others]]
- [[#editor][Editor]]
  - [[#evil][evil]]
  - [[#snippets][snippets]]
  - [[#fold][fold]]
- [[#emacs][Emacs]]
  - [[#dired][dired]]
  - [[#dirvish][dirvish]]
- [[#term][Term]]
  - [[#vterm][vterm]]
- [[#checkers][Checkers]]
  - [[#spell-checker][Spell checker]]
- [[#tools][Tools]]
  - [[#lookup][lookup]]
  - [[#lsp][lsp]]
  - [[#magit][magit]]
  - [[#pdf][pdf]]
- [[#lang][Lang]]
  - [[#latex][Latex]]
  - [[#lua][lua]]
  - [[#org][org]]
  - [[#python][python]]
  - [[#sh][sh]]
  - [[#yaml][yaml]]
  - [[#wolfram][wolfram]]
  - [[#markdown][markdown]]
  - [[#typst][typst]]
  - [[#others-1][Others]]
- [[#email][Email]]
  - [[#mu4e][mu4e]]
- [[#app][App]]
  - [[#rss][rss]]
  - [[#everywhere][everywhere]]
- [[#other-packages][Other packages]]
  - [[#go-translate][go-translate]]
  - [[#keycast][keycast]]
  - [[#screenshot][screenshot]]
  - [[#zotxt][zotxt]]
  - [[#figlet][figlet]]
  - [[#shell-command][shell-command+]]
  - [[#gptel][gptel]]
  - [[#gptel-quick][=gptel-quick=]]
  - [[#tldr][tldr]]
- [[#other-configs][Other configs]]
  - [[#unfill][unfill]]
  - [[#tramp][tramp]]
  - [[#transient][transient]]
  - [[#projectile][projectile]]
  - [[#proxy][proxy]]
  - [[#windows-librewolf-in-wsl][Windows =Librewolf= in wsl]]
  - [[#insert-arxiv-links][insert arxiv links]]
  - [[#search-online][search online]]
  - [[#shortcuts][shortcuts]]

* About
The *conventions* of this org file:
- First level heading respect Doom's order

- Configured module goes to second level heading ::
  - Prerequisite packages tangled into [[file:packages.toml]] (=Arch= only)

  - Bootstrap scripts tangled to [[file:install.d/]]

  - Comment a module with [[kbd:][C-c ;]] at heading

- One line config goes into [[* Tangle]] ::
  Often a declare in [[file:init.el]]

* Tangle
[[file:init.el]]
#+begin_src emacs-lisp :tangle init.el :noweb tangle :shebang ";;; init.el -*- lexical-binding: t; -*-\n"
(doom!
 :input
 <<input>>

 :completion
 <<completion>>

 :ui
 <<ui>>
 hl-todo
 indent-guides
 (ligatures +extra)
 nav-flash
 ophints
 (vc-gutter +pretty)
 (window-select +numbers)
 workspaces
 ;zen

 :editor
 <<editor>>
 (format +onsave)
 ;file-templates
 ;multiple-cursors
 parinfer
 word-wrap

 :emacs
 <<emacs>>
 ;electric
 ;ibuffer
 undo
 vc

 :term
 <<term>>

 :checkers
 <<checkers>>
 (syntax +childframe)

 :tools
 <<tools>>
 ;biblio
 debugger
 ;editorconfig
 (eval +overlay)
 tree-sitter
 ;upload
 tree-sitter

 :os
 ;tty

 :lang
 <<lang>>
 ;(cc +lsp)
 emacs-lisp
 json

 :email
 <<email>>

 :app
 calendar
 <<app>>

 :config
 literate
 (default +bindings +smartparens))
#+end_src
*The order of modules in above list make sense*

Extra packages from [[https://melpa.org][MELPA]]
#+begin_src emacs-lisp :tangle packages.el :shebang ";; -*- no-byte-compile: t; -*-"
#+end_src

#+PROPERTY: header-args:emacs-lisp :results none
Default tangle to [[file:config.el]]
#+begin_src emacs-lisp :shebang ";;; $DOOMDIR/config.el -*- lexical-binding: t; -*-\n"
(setq user-full-name "fakeGenius")
#+end_src

Default install all packages in [[file:packages.toml]]
#+PROPERTY: header-args:toml :tangle packages.toml
#+begin_src toml
enable_default=true
#+end_src

* 30.1 specific
[[https://github.com/doomemacs/doomemacs/issues/8287][doomemacs/doomemacs#8287 eldoc error: (invalid-function incf)]]
#+begin_src emacs-lisp :tangle packages.el
(package! eldoc :built-in t)
(package! track-changes :built-in t)
#+end_src

* Predefined
#+begin_src emacs-lisp
(defun +my/is-utility-daemon ()
  "If current session run from daemon called `utility`."
  (and (daemonp) (boundp 'server-name) (string= server-name "utility")))
#+end_src

#+begin_src emacs-lisp
(defun +my/reverse-words (beg end)
  "Reverse the order of words in region."
  (interactive "*r")
  (apply
   'insert
   (reverse
    (split-string
     (delete-and-extract-region beg end) "\\b"))))
#+end_src

* Input
** Chinese
#+begin_src toml
[chinese]
packages=["base-devel",
    "librime" # for +rime
]
#+end_src

#+begin_src emacs-lisp :tangle no :noweb-ref input
(chinese +rime +childframe)
#+end_src

Default simplified Chinese input
#+begin_src emacs-lisp
(after! liberime
  (liberime-try-select-schema "luna_pinyin_simp")
  (setq pyim-default-scheme 'rime-quanpin))
#+end_src

* Completion
** corfu
#+begin_src toml
[corfu]
packages=["words"]
#+end_src

#+begin_src emacs-lisp :tangle no :noweb-ref completion
(corfu +icons +dabbrev)
#+end_src

#+begin_src emacs-lisp
(setq corfu-on-exact-match 'show)
(map! :after cape :i "C-c p" cape-prefix-map)

;; dabb_ only match dabbrev not Dabbrev!
(after! dabbrev
  (setq dabbrev-case-fold-search nil))
#+end_src

** vertico
#+begin_src emacs-lisp :tangle no :noweb-ref completion
(vertico +icons +childframe)
#+end_src

[[https://github.com/tumashu/vertico-posframe/issues/16][tumashu/vertico-posframe#16 Disable vertico-posframe when Emacs runs in terminal]]
#+begin_src emacs-lisp
(after! vertico-multiform
  (add-to-list 'vertico-multiform-commands
               '(consult-line
                 posframe
                 (vertico-posframe-fallback-mode . vertico-buffer-mode))))
#+end_src

* UI
** Extra themes
#+begin_src emacs-lisp :tangle packages.el
(package! ewal-doom-themes)
#+end_src

#+begin_src emacs-lisp
(use-package! ewal-doom-themes)
#+end_src

load wal theme from command line
#+begin_src fish :tangle no
emacs-client -e "(load-theme 'ewal-doom-themes t)"
#+end_src

[[https://github.com/donniebreve/rose-pine-doom-emacs][GitHub - donniebreve/rose-pine-doom-emacs: Soho vibes for DOOM Emacs]]

** doom
#+begin_src emacs-lisp :tangle no :noweb-ref ui
doom
#+end_src

*** Themes
restore last selected theme
#+begin_src emacs-lisp
(defun load-in-doom-dir (file-name &optional dir)
  (let* ((dir (or dir doom-user-dir))
         (full-name (expand-file-name file-name dir)))
    (if (file-exists-p full-name)
        (load full-name))))

(load-in-doom-dir "theme.el" doom-cache-dir)
#+end_src

difficult to choose theme? random it
#+begin_src emacs-lisp
(defun +my/random-theme ()
  (interactive)
  (let* ((all-themes (custom-available-themes))
         (next-theme (nth (random (length all-themes)) all-themes)))
    (consult-theme next-theme)
    (message (format "switch to theme: %s" next-theme))))

(map! :leader
      (:prefix "t"
       :desc "Random theme" "t" #'+my/random-theme))
#+end_src

track current theme for later load
#+begin_src emacs-lisp
(defun +my/save-theme (prev new-theme &rest args)
  (let
      ((theme-config-file (expand-file-name "theme.el" doom-cache-dir)))
    (write-region
     (format "(setq doom-theme '%s)\n" new-theme) nil theme-config-file)
    (message "Switch to theme: %s" new-theme)))

(add-variable-watcher 'doom-theme #'+my/save-theme)
#+end_src

*** Fonts
*bold* /italic/ _underline_ +stride+

Set default font size, =WSL= currently not aware dpi settings in
[[file:~/.Xresources]] while float size makes it work on Linux.

- [[https://github.com/doomemacs/doomemacs/issues/6131][doomemacs/doomemacs#6131 DPI settings are not respected by "setq doom-font"]]
- [[https://github.com/doomemacs/doomemacs/blob/master/docs/faq.org#change-my-fonts][Change my fonts - doom/docs/faq]]

#+begin_src emacs-lisp
(setq +my/font-size (* (if (featurep :system 'wsl) 1.5 1) 12.0))

(setq doom-font (font-spec :family "Maple6 NF" :size +my/font-size))
#+end_src

#+begin_src emacs-lisp
(custom-set-faces
 ;; quoted text in info
 '(fixed-pitch-serif ((t (:slant italic :foreground "tomato"))))
 ;; prefer italic comment font
 '(font-lock-comment-face ((t (:slant italic)))))
#+end_src

** doom-dashboard
#+begin_src emacs-lisp :tangle no :noweb-ref ui
doom-dashboard
#+end_src

- [[https://discourse.doomemacs.org/t/how-to-change-your-splash-screen/57][How to change your splash screen - Configuration - Doom Emacs Discourse]]
- [[https://stackoverflow.com/a/25158644][elisp - Read from a file into a Emacs lisp list - Stack Overflow]]

#+begin_src emacs-lisp
(setq fancy-splash-image (expand-file-name "assets/bitmap_512x.png" doom-user-dir))
#+end_src

splash image not loaded in the first frame of daemon mode
- [[https://www.reddit.com/r/emacs/comments/uvjbgl/splash_image_not_visible_initially/][Splash image not visible initially]]
- [[https://discourse.doomemacs.org/t/splash-image-tinted-only-on-emacs-daemon-launch/3574][Splash image tinted only on emacs daemon launch - User Support - Doom Emacs D...]]
- [[https://github.com/doomemacs/doomemacs/issues/6221][doomemacs/doomemacs#6221 Theme differences in daemon vs standard GUI for the ...]]
- [[https://github.com/doomemacs/doomemacs/issues/7301][doomemacs/doomemacs#7301 {cosmetic bug} fancy-splash-image not loaded at firs...]]

#+begin_src emacs-lisp
;; Refresh the Doom dashboard on the first frame in daemon mode.
(defun +my/load-doom-theme (frame)
  (select-frame frame)
  (load-theme doom-theme t))

(add-hook 'after-make-frame-functions #'+my/load-doom-theme 90)
;; Remove make frame hook to avoid delays when opening a new frame.
(add-hook! 'doom-first-buffer-hook
           (remove-hook 'after-make-frame-functions #'+my/load-doom-theme))
#+end_src

** modeline
#+begin_src toml
[modeline]
packages=["otf-comicshanns-nerd"]
#+end_src

#+begin_src emacs-lisp :tangle no :noweb-ref ui
modeline
#+end_src

custom doom-modeline font, valid on startup and persist after [[cmd:doom/reload-theme]]
#+begin_src emacs-lisp
(defun +my/set-mode-line-font ()
  (set-face-font 'mode-line (font-spec :family "ComicShannsMono Nerd Font" :size (+ +my/font-size 1.5)))
  (set-face-font 'mode-line-inactive (font-spec :family "ComicShannsMono Nerd Font" :size (+ +my/font-size 1.5))))

(add-hook 'doom-load-theme-hook #'+my/set-mode-line-font 90)
#+end_src

** popup
#+begin_src emacs-lisp :tangle no :noweb-ref ui
(popup +defaults)
#+end_src

#+begin_src emacs-lisp
(setq split-width-threshold 120)
#+end_src

Prefer stack at right for following info windows, since they are fill-columned
#+begin_src emacs-lisp
(set-popup-rules!
  '(("^\\*\\([Hh]elp\\|Apropos\\)"  ; help messages
     :side right :size 80 :slot 2 :vslot -8 :select t)
    ("^\\*\\(?:Wo\\)?Man "
     :side right :size 80 :vslot -6 :select t)
    ("^\\*info\\*$"
     :side right :size 80 :slot 2 :vslot 2 :select t)))
#+end_src

** unicode
#+begin_src toml
[unicode]
packages=[
    "quivira",              # org ellipsis ⤵, ℤ
    "ttf-dejavu",           # org heading ◉ ✸ ∈
    "ttf-sarasa-gothic-sc", # ￢
    "noto-fonts-emoji",     # color emoji
    "ttf-nerd-fonts-symbols-mono" # nerd font
]
#+end_src

#+begin_src emacs-lisp :tangle no :noweb-ref ui
unicode
#+end_src

*** change font by block
To get unicode block name for a character, [[kbd:SPC h ']] on it to get it's lexical
code, and search in [[https://en.wikipedia.org/wiki/Plane_(Unicode)][Plane (Unicode) - Wikipedia]]

Doom's way of change unicode font, but it will be shadowed by
[[fn:doom-init-fonts-h]] if [[var:doom-symbol-font]] is set.
#+begin_src emacs-lisp
(after! unicode-fonts
  ;; ℕ, ⤵, 𝔹
  (dolist (unicode-block '("Letterlike Symbols" "Supplemental Arrows-B" "Mathematical Alphanumeric Symbols"))
    (push "Quivira" (cadr (assoc unicode-block unicode-fonts-block-font-mapping))))
  ;; ⨂
  (dolist (unicode-block '("Supplemental Mathematical Operators"))
    (push "DejaVu Math TeX Gyre" (cadr (assoc unicode-block unicode-fonts-block-font-mapping))))
  ;; ∈ ∅
  (dolist (unicode-block '("Mathematical Operators"))
    (push "DejaVu Sans" (cadr (assoc unicode-block unicode-fonts-block-font-mapping))))
  ;; ￢
  (dolist (unicode-block '("Halfwidth and Fullwidth Forms"))
    (push "Sarasa Gothic SC" (cadr (assoc unicode-block unicode-fonts-block-font-mapping)))))
#+end_src

Add to [[var:after-setting-font-hook]] not work well, font display diffs after
[[cmd:doom/reload-theme]]
#+begin_src emacs-lisp :tangle no
(defun +my/unicode-fonts ()
  (dolist (unicode-block '("Letterlike Symbols" "Supplemental Arrows-B"))
    (push "Quivira" (cadr (assoc unicode-block unicode-fonts-block-font-mapping)))))
(add-hook 'after-setting-font-hook #'+my/unicode-fonts 60)
#+end_src

Add hook but with [[fn:set-fontset-font]] succeed
#+begin_src emacs-lisp :tangle no
(defun +my/unicode-fonts ()
  ; Supplemental Arrows-B, include ⤵
  (set-fontset-font t '(#x2900 . #x297f) "Quivira")
  ; Mathematical symbols, 𝔹
  (set-fontset-font t '(#x1d400 . #x1d7ff) "Quivira")
  ; Mathematical operators, ⨂
  (set-fontset-font t '(#x2208 . #x22ff) "DejaVu Math TeX Gyre")
  (dolist (chars '("￢")) ; keywords =not= in code ligatures
     (set-fontset-font t (string-to-char chars) "Sarasa Gothic SC")))
(add-hook 'after-setting-font-hook #'+my/unicode-fonts 60)
#+end_src
see more in [[https://idiocy.org/emacs-fonts-and-fontsets.html][Emacs, fonts and fontsets]]

*** Chinese fonts
[[https://rongcuid.github.io/posts/2021-04-02-Doom-Emacs-CJK.html][Rongcui Dong's Site - 如何在 Doom Emacs 中设置中文]]

Check alignment between Chinese and English.
#+begin_src python :tangle no
Emacs is the advanced, extensible, customizable, self-documenting editor.
# Emacs is the advanced, extensible, customizable, self-documenting editor.
Emacs 是一款可扩展可自定义且自带文档的高级 editor.
#+end_src

These settings will not work in daemon mode if added instead to
=doom-init-ui-hook=, as they might be overridden by =unicode-fonts-setup=.
Additionally, consider changing the font for all =fontset= instead of just
~(frame-parameter nil 'font)~. If the emoji font is not set here, you will need
to use =doom/reload-font= later to enable proper color emoji display.

- [[https://github.com/hick/emacs-chinese#org-的中文问题][GitHub - hick/emacs-chinese: Emacs 相关中文问题以及解决方案]]
- [[https://emacs.stackexchange.com/questions/62219/how-do-i-get-colour-emoji-to-display-in-emacs][fonts - How do I get colour emoji to display in Emacs - Emacs Stack Exchange]]

#+begin_src emacs-lisp
(defun +my/cjk-font ()
  (dolist (charset '(kana han cjk-misc bopomofo))
    (set-fontset-font t charset
                      (font-spec :family "Maple6 SC NF")))
  ;; why not set color emoji font at the same time
  (set-fontset-font t 'emoji "Noto Color Emoji"))

(add-hook 'after-setting-font-hook #'+my/cjk-font)
#+end_src

** Others
#+begin_src emacs-lisp
(after! nerd-icons
  (setq nerd-icons-scale-factor 0.9))
#+end_src

Transparency
#+begin_src emacs-lisp
(set-frame-parameter (selected-frame) 'alpha '(85 . 50))
(add-to-list 'default-frame-alist '(alpha . (85 . 50)))

(defun toggle-transparency ()
  (interactive)
  (let ((alpha (frame-parameter nil 'alpha)))
    (set-frame-parameter
     nil 'alpha
     (if (eql (cond ((numberp alpha) alpha)
                    ((numberp (cdr alpha)) (cdr alpha))
                    ;; Also handle undocumented (<active> <inactive>) form.
                    ((numberp (cadr alpha)) (cadr alpha)))
              100)
         '(85 . 50) '(100 . 100)))))

(map! :leader
      (:prefix "t"
       :desc "Toggle transparency"    "T" #'toggle-transparency))
#+end_src

Line numbers
#+begin_src emacs-lisp
(setq display-line-numbers-type nil)
#+end_src

notify initial time
#+begin_src emacs-lisp
(defun notify-init-time ()
  (require 'notifications)
  (notifications-notify
   :image-path (expand-file-name "assets/notify.jpg" doom-user-dir)
   :title "Daemon"
   :sound-name "bell"
   :body (format "%s initialed in %0.3fs" server-name doom-init-time)))

;; NOTE Why this keep one workspace in `emacsclient -c'?
(add-hook! 'doom-init-ui-hook
  (if (and (daemonp) (not (+my/is-utility-daemon)))
      (notify-init-time)))
#+end_src

* Editor
** evil
#+begin_src emacs-lisp :tangle no :noweb-ref editor
(evil +everywhere)
#+end_src

#+begin_src emacs-lisp
(after! evil
  (setq evil-kill-on-visual-paste nil)
  ;; Disabling cursor movement when exiting insert mode
  (setq evil-move-cursor-back nil)
  ;; keep previous layout, always!
  (setq evil-auto-balance-windows nil)
  ;; I want surround (..), not ( .. )
  (evil--add-to-alist
   evil-surround-pairs-alist
   ?\( '("(" . ")")
   ?\[ '("[" . "]")
   ?\{ '("{" . "}")
   ?\) '("( " . " )")
   ?\] '("[ " . " ]")
   ?\} '("{ " . " }")))
#+end_src

** snippets
#+begin_src emacs-lisp :tangle no :noweb-ref editor
snippets
#+end_src

#+begin_src emacs-lisp
(setq +snippets-dir
      (expand-file-name "~/Documents/Templates/snippets"))
#+end_src

** fold
#+begin_src emacs-lisp :tangle no :noweb-ref editor
fold
#+end_src

work for =org-ellipsis= and fold in code mode
#+begin_src emacs-lisp
(setq +fold-ellipsis "⤵")
(after! org
  (setq org-startup-folded 'fold
        org-hide-drawer-startup nil))
      ;; org-hide-block-startup nil
#+end_src

* Emacs
** dired
#+begin_src emacs-lisp :tangle no :noweb-ref emacs
(dired +dirvish +icons)
#+end_src

#+begin_src emacs-lisp
(after! dired
  (setq delete-by-moving-to-trash nil)
  (setq dired-listing-switches
        "-l --almost-all --sort=time --human-readable --time-style=long-iso --group-directories-first --no-group")
  ;; Dirvish respects all the keybindings in `dired-mode-map'
  (map! :map dired-mode-map
        :n "." #'dired-omit-mode))
#+end_src

#+begin_src emacs-lisp
(after! dired-x
  ;; Make dired-omit-mode hide all "dotfiles"
  (setq dired-omit-files
        (concat dired-omit-files "\\|^\\..*$")))
#+end_src

** dirvish
#+begin_src toml
[dirvish]
packages=[
    "fd",
    "libvips",
    "imagemagick",
    "ffmpegthumbnailer", # may require pipewire-jack
    "mediainfo",
    # "tar", # include in =base=
    "unzip"
]
#+end_src

#+begin_src emacs-lisp
(after! dirvish
  (setq dirvish-quick-access-entries
   '(("h" "~/"                          "Home")
     ("d" "~/Downloads/"                "Downloads")
     ("c" "~/.config/"                  "Config")
     ("D" "~/Documents/"                "Documents")
     ("l" "~/lib/"                      "Personal Library")
     ("L" "~/.local/lib/"               "Library")
     ("m" "/mnt/"                       "Mounts")
     ("n" "~/.Nextcloud/"               "Nextcloud")
     ("p" "~/Pictures/"                 "Pictures")
     ("t" "~/.local/share/Trash/files/" "TrashCan")))
  (remove-hook 'dired-mode-hook #'+dired-update-mode-line-height-h))
#+end_src

#+begin_src emacs-lisp
(use-package! dirvish
  :commands (dirvish dirvish-side)
  :custom
  (dirvish-side-width 25)
  :config
  (setq dirvish-reuse-session nil)
  (map!
   :map dirvish-mode-map
   :gn "S"    #'dirvish-cd-into-vterm
   ;; remap previous =S= to =o=
   :gn "o" #'dirvish-quicksort))
#+end_src

#+begin_src emacs-lisp
(defun dirvish-open-binaries-externally (file fn)
  "When FN is not `dired', open binary FILE externally."
  (when-let* (((not (eq fn 'dired)))
              ((file-exists-p file))
              ((not (file-directory-p file)))
              ((member (downcase (or (file-name-extension file) ""))
                       dirvish-binary-exts)))
    ;; return t to terminate `dirvish--find-entry'.
    (prog1 t (dired-do-open))))

(add-hook 'dirvish-find-entry-hook #'dirvish-open-binaries-externally)
#+end_src

Replace =/home/$user= to =~=
#+begin_src emacs-lisp
(defun +my/home-to-tide (file)
  "Replace /home/$user in FILE to ~."
  (let ((home (getenv "HOME"))
        (file-name (concat file)))
    (if (s-starts-with? home file-name)
        (s-replace home "~" file-name)
      file-name)))

(defun +my/dirvish-copy-file-path (&optional multi-line)
  "Copy filepath of marked files.
If MULTI-LINE, make every path occupy a new line."
  (interactive "P")
  (let* ((files (mapcar #'file-local-name (dired-get-marked-files)))
         (related-files (mapcar #'+my/home-to-tide files))
         (names (mapconcat #'identity related-files (if multi-line "\n" " "))))
    (dirvish--kill-and-echo (if multi-line (concat "\n" names) names))))

(after! dirvish
 (advice-add 'dirvish-copy-file-path :override #'+my/dirvish-copy-file-path))
#+end_src

Goto random line, use with [[fn:dirvish-fd]]
#+begin_src emacs-lisp
(defun goto-random-line ()
  "Go to a random line in the current buffer."
  (interactive)
  (let* ((total-lines (count-lines (point-min) (point-max)))
         (random-line (1+ (random total-lines))))
    (goto-line random-line)))
#+end_src

* Term
** vterm
#+begin_src toml
[vterm]
packages=[
    "libvterm",
    "cmake",
    "inetutils" # =hostname= command
]
#+end_src

#+begin_src emacs-lisp :tangle no :noweb-ref term
vterm
#+end_src

[[https://emacs.stackexchange.com/questions/24330/have-a-function-to-disable-close-confirmation-on-terms-work-on-all-terms-but-sh][have a function to disable close confirmation on terms. work on all terms but...]]
#+begin_src emacs-lisp
(defun set-no-process-query-on-exit ()
  (let ((proc (get-buffer-process (current-buffer))))
    (when (processp proc)
      (set-process-query-on-exit-flag proc nil))))

(after! vterm
  (if (+my/is-utility-daemon)
      (add-hook 'vterm-mode-hook #'set-no-process-query-on-exit)))
#+end_src

#+begin_src emacs-lisp
(defun +my/vterm-switch ()
  "Switch to vterm buffer in `Term' workspace.
If `Term' workspace not exist, create it.
If no vterm buffer in `Term' workspace, create it."
  (interactive)
  (+workspace-switch "Term" t)
  (let ((vterm-buffer
         ;; return first vterm buffer in `Term' workspace
         (catch 'foo
           (dolist (buffer (+workspace-buffer-list))
             (let ((bn (buffer-name buffer)))
               (when (and bn
                          ;; https://stackoverflow.com/a/2238589
                          (with-current-buffer bn
                            (eq major-mode 'vterm-mode)))
                 (throw 'foo bn))))))
        (display-buffer-alist))
    (if vterm-buffer
        (switch-to-buffer vterm-buffer)
      ;; create vterm buffer if not exist
      (+vterm/here t))))

(map! :leader
 :prefix "TAB"
 :desc "Switch to vterm buffer" "v" #'+my/vterm-switch)
#+end_src

#+begin_src emacs-lisp
(defun +my/vterm-cd-project-root ()
  (interactive)
  (vterm-send-string "cd $PROOT")
  (vterm-send-return))

(after! vterm
  (setq vterm-buffer-name-string "%s - vterm"
        vterm-ignore-blink-cursor nil)
  (map! :leader
        (:prefix "o"
         ;; vterm to current file directory (not project root)
         ;; use `C-Return' to project root
         :desc "Toggle vterm popup" "t" (cmd!! #'+vterm/toggle t)
         :desc "Open vterm here" "T" (cmd!! #'+vterm/here t)))
  ;; TODO fixed-pitch in bpytop like
  ;; (add-hook 'vterm-mode-hook
  ;;           (lambda ()
  ;;             (set (make-local-variable 'buffer-face-mode-face) 'fixed-pitch
  ;;                  (buffer-face-mode t))))
  (define-key vterm-mode-map (kbd "M-q") #'vterm-send-escape)
  (define-key vterm-mode-map [ (control return) ] #'+my/vterm-cd-project-root)
  (dolist (num (number-sequence 0 9))
      (define-key vterm-mode-map (kbd (format "M-%d" num)) nil)))
#+end_src

*** save vterm buffers with command history
- [[https://github.com/akermu/emacs-libvterm/issues/666][akermu/emacs-libvterm#666 Integrate with desktop-save-mode]]
- [[https://bmag.github.io/2015/12/26/desktop.html][Desktop-Save Mode]]
- [[https://github.com/Bad-ptr/persp-mode.el#custom-saveload-buffer-function-example][GitHub - Bad-ptr/persp-mode.el: named perspectives(set of buffers/window conf...]]
- [[doom:modules/ui/workspaces/config.el::263][examples in doom config]]

No text properties saved.
#+begin_src emacs-lisp
(after! persp-mode
  ;; vterm
  (persp-def-buffer-save/load
   :mode 'vterm-mode :tag-symbol 'def-vterm-buffer
   :save-vars '(default-directory)
   :save-function (lambda (buf tag vars)
                    (list tag (buffer-name buf) vars
                          (string-trim-right (buffer-string))))
                          ;; no face and other text properties saved
                          ;; (string-trim-right (buffer-substring-no-properties (point-min) (point-max)))))
   :load-function (lambda (savelist &rest _)
                    (cl-destructuring-bind (_ buf-name vars buf-string) savelist
                      (let ((default-directory (alist-get 'default-directory vars)))
                        (require 'vterm)
                        (with-current-buffer (get-buffer-create buf-name)
                          (insert buf-string)
                          (vterm-mode)))))))
#+end_src

*** =S= cd into =dirvish= current directory
like =ranger=
#+begin_src emacs-lisp
(defun dirvish-cd-into-vterm ()
  "Switch into recent vterm buffer, and cd into `default-directory` of dirvish buffer."
  (interactive)
  (let ((cur-dirvish-dir default-directory)
        (vterm-buffer (catch 'foo
                       (dolist (buffer (+workspace-buffer-list))
                         (let ((bn (buffer-name buffer)))
                           (when (and bn
                                      ;; https://stackoverflow.com/a/2238589
                                      (with-current-buffer bn
                                        (eq major-mode 'vterm-mode)))
                             (throw 'foo bn)))))))
    (dirvish-quit)
    (if vterm-buffer
        (let ((cur-vterm-dir (with-current-buffer vterm-buffer
                                  default-directory)))
          (switch-to-buffer vterm-buffer)
          (unless (or (string= cur-vterm-dir cur-dirvish-dir)
                      (not (vterm--safe-send-p)))
            ; NOTE only fish shell support directory jump by dir-name
            ;      add space to ignore command from history
            (vterm-send-string (concat " " (file-relative-name cur-dirvish-dir cur-vterm-dir)))
            (vterm-send-return)))
      (with-temp-buffer (setq-local default-directory cur-dirvish-dir)
                        (+vterm/here t)))))
#+end_src

!!! Just ensure no one type ~rm -rf~ before navigate in =dirvish=.
#+begin_src emacs-lisp
(defun vterm--safe-send-p ()
  "Tell if current point safe to send string (no input after prompt)."
  (let ((flag (save-excursion
                (vterm-reset-cursor-point)
                (evil-collection-vterm-append)
                (vterm--at-prompt-p))))
    (evil-normal-state)
    flag))
#+end_src

* Checkers
** Spell checker
#+begin_src toml
[spell]
packages=["aspell", "aspell-en"]
#+end_src

#+begin_src emacs-lisp :tangle no :noweb-ref checkers
(spell +aspell
       +everywhere)
#+end_src

#+begin_src emacs-lisp
(after! ispell
  (setq ispell-personal-dictionary
        (expand-file-name ".pws" "~/.Nextcloud/ispell/")))
#+end_src

#+begin_src emacs-lisp
(setf (alist-get 'org-mode +spell-excluded-faces-alist)
      (append '(org-level-1 org-level-2 org-level-3 font-lock-function-name-face help-key-binding)
              (alist-get 'org-mode +spell-excluded-faces-alist)))

(setf (alist-get 'latex-mode +spell-excluded-faces-alist)
      (append '(font-lock-constant-face tex-math font-lock-comment-face)
              (alist-get 'latex-mode +spell-excluded-faces-alist)))
#+end_src

* Tools
** COMMENT docker
#+begin_src toml
[docker]
packages=["dockfmt"]
#+end_src

#+begin_src emacs-lisp :tangle no :noweb-ref tools
docker
#+end_src

** lookup
#+begin_src toml
[lookup]
packages=["sqlite", "wordnet-common"]
#+end_src

#+begin_src emacs-lisp :tangle no :noweb-ref tools
(lookup
 +docsets
 +dictionary)
#+end_src

#+begin_src emacs-lisp
(add-to-list '+lookup-provider-url-alist '("Brave" "https://search.brave.com/search?q=%s"))
#+end_src

** lsp
#+begin_src emacs-lisp :tangle no :noweb-ref tools
(lsp +eglot)
#+end_src

** magit
#+begin_src emacs-lisp :tangle no :noweb-ref tools
magit
#+end_src

- [[https://github.com/TheLocehiliosan/yadm][GitHub - TheLocehiliosan/yadm: Yet Another Dotfiles Manager]]
- [[https://www.reddit.com/r/emacs/comments/gjukb3/yadm_magit/][reddit:yadm+magit]]

#+begin_src emacs-lisp
(use-package! tramp
  :commands yadm-status
  :init
  (defun yadm-status ()
    (interactive)
    (magit-status "/yadm::"))
  (map! :leader
        (:prefix "g"
         :desc "yadm-status" "a" #'yadm-status))
  :config
  ;; see `man yadm'
  (add-to-list 'tramp-methods
               '("yadm"
                 (tramp-remote-shell "/bin/bash")
                 (tramp-remote-shell-args ("-c"))
                 (tramp-login-program "yadm")
                 (tramp-login-args (("enter"))))))
#+end_src

If you use =fish= shell, you may change ~fish_prompt~. see [[file:~/.config/fish/config.fish]]

[[cmd:magit-stage]] (visually stage hunks) may not work in =yadm=, which cause emacs
to hang, use [[kbd:E s]] ([[cmd:magit-ediff-stage]]) instead.
[[https://github.com/magit/magit/issues/719][magit/magit#719 Magit process hangs when trying to stage a hunk]]

** pdf
#+begin_src emacs-lisp :tangle no :noweb-ref tools
pdf
#+end_src

default pdf viewer in emacs
- [[http://alberto.am/2020-04-11-pdf-tools-as-default-pdf-viewer.html][pdf-tools as the default PDF viewer in Emacs]]

#+begin_src emacs-lisp
(after! pdf-tools
  (setq-default pdf-view-display-size 'fit-width))

(after! latex (setq +latex-viewers '(pdf-tools evince okular)))

;; to have the buffer refresh after compilation
(add-hook 'TeX-after-compilation-finished-functions
          #'TeX-revert-document-buffer)

;; always use midnight view mode
(add-hook! 'pdf-view-mode-hook #'pdf-view-midnight-minor-mode)
#+end_src

Selection in =pdf-tools= when evil mode enabled
- [[https://github.com/doomemacs/doomemacs/issues/6286#issuecomment-1870216583][doomemacs/doomemacs#6286 `evil` interfering with PDF text selection/highlight...]]

Correct the file name path if it is a WSL path in Windows or an absolute path
inadvertently synced with a network disk. For =pdf-sync-view=, the source file
was correctly identified only after making this adjustment.
#+begin_src emacs-lisp
(defun +my/synced-true-path (filename)
  "Rewrite the FILENAME assuming it from synced netdisk (or WSL).

When from netdisk, ensure they have same directory structure with
respect to your home."
  (if (s-starts-with-p "//wsl.localhost" filename)
      (setq filename (replace-regexp-in-string "^//wsl.localhost/\\w+" "" filename)))
  (unless (s-starts-with-p (getenv "HOME") filename)
    (setq filename (replace-regexp-in-string "^/home/\\w+" (getenv "HOME") filename)))
  filename)

(defun +my/pdf-sync-backward-search (x y)
  "Go to the source corresponding to image coordinates X, Y.

Try to find the exact position, if
`pdf-sync-backward-use-heuristic' is non-nil."
  (cl-destructuring-bind (source finder)
      (pdf-sync-backward-correlate x y)
    (setq source (+my/synced-true-path source))
    (pop-to-buffer (or (find-buffer-visiting source)
                       (find-file-noselect source))
                   pdf-sync-backward-display-action)
    (push-mark)
    (funcall finder)
    (run-hooks 'pdf-sync-backward-hook)))

(advice-add 'pdf-sync-backward-search :override #'+my/pdf-sync-backward-search)
#+end_src

Auto view =.ps= file
#+begin_src emacs-lisp
(add-hook 'ps-mode-hook 'doc-view-toggle-display)
#+end_src

* Lang
** COMMENT julia
#+begin_src toml
[julia]
packages=["julia-bin"]
#+end_src

#+begin_src emacs-lisp :tangle no :noweb-ref lang
(julia +lsp +tree-sitter)
#+end_src

If we want table output without ~:results output~
#+begin_src julia :tangle no
import Pkg; Pkg.add("DataFrames")
import Pkg; Pkg.add("CSV")
#+end_src

also one need to enable [[doom-module::lang ess]], see
[[https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-julia.html][Julia Code Blocks in Babel]]

** Latex
#+begin_src toml
[latex]
enabled="not is_wsl"
packages=[
    "miktex", "texlab",
    # for `latexindent.pl` to work, which is called by `+format/buffer`
    "perl-yaml-tiny", "perl-file-homedir"
]
#+end_src

#+begin_src emacs-lisp :tangle no :noweb-ref lang
(latex
 +lsp
 +fold
 +cdlatex)
#+end_src

Invoke =latex.exe= on windows.
#+begin_src emacs-lisp
(if (featurep :system 'wsl)
    (setq LaTeX-command "latex.exe"
          TeX-command "latex.exe"))
#+end_src

#+begin_src emacs-lisp
(after! evil-tex
  (setq evil-tex-include-newlines-in-envs nil
        evil-tex-select-newlines-with-envs nil))
#+end_src

=cdlatex=
#+begin_src emacs-lisp
(map! :map cdlatex-mode-map
  :i "TAB" #'cdlatex-tab)
#+end_src

retain =.bbl= as it required by APS journals.
=synctex.gz= kept to sync tex view.
#+begin_src emacs-lisp
(after! latex
  (setq LaTeX-clean-intermediate-suffixes
        (seq-difference LaTeX-clean-intermediate-suffixes
                        '("\\.bbl" "\\.synctex\\.gz"))))
#+end_src

add =XeTeX= mode in =TeX/LaTeX=
- [[https://tex.stackexchange.com/a/21205][emacs - AUCTeX and XeTeX - TeX - LaTeX Stack Exchange]]
#+begin_src emacs-lisp
(after! tex
  (add-to-list 'TeX-command-list
               '("XeLaTeX" "%`xelatex%(mode) %(extraopts) %S%(PDFout)%' %t" TeX-run-TeX nil t)))
#+end_src

[[fn:latex-indent]] [[cmd:LaTeX-fill-buffer]]
- [[https://github.com/lassik/emacs-format-all-the-code/issues/127][lassik/emacs-format-all-the-code#127 LaTeX formatting]]

[[cmd:+format/buffer]] default installed by =miktex=
- [[https://github.com/cmhughes/latexindent.pl][GitHub - cmhughes/latexindent.pl: Perl script to add indentation (leading hor...]]
#+begin_src emacs-lisp
(after! apheleia
  (set-formatter! 'latexindent '("latexindent" "-l" "-r" "--logfile=/dev/null")
    :modes '(LaTeX-mode)))
#+end_src

[[https://tex.stackexchange.com/questions/254539/latextidy-in-emacs][formatting - LaTeXTidy in Emacs - TeX - LaTeX Stack Exchange]]

** lua
#+begin_src toml
[lua]
enabled="not is_wsl"
packages=["lua-language-server"]
#+end_src

#+begin_src emacs-lisp :tangle no :noweb-ref lang
(lua +lsp)
#+end_src

lsp support
#+begin_src emacs-lisp
(after! lua-mode
  (setq lsp-clients-lua-language-server-bin "/usr/bin/lua-language-server")
  (setq lsp-clients-lua-language-server-main-location "/usr/lib/lua-language-server/bin/main.lua")
  (setq lsp-clients-lua-language-server-args '("-E" "--logpath" "/tmp/lua-language-server"))
  ;; (lsp-clients-lua-language-server-command '("lua-language-server" "-E"))
  (setq lsp-clients-lua-language-server-command nil))
#+end_src

ligatures
#+begin_src emacs-lisp
(after! lua-mode
  (set-ligatures! 'lua-mode
    :def "function"
    :return "return"
    :and "and"
    :or "or"
    :not "not"
    :true "true"
    :false "false"
    :for "for"))
#+end_src

** org
#+begin_src toml
[org]
packages=[
    "xclip",
    "maim",
    "graphviz"
]
#+end_src

#+begin_src emacs-lisp :tangle no :noweb-ref lang
(org
 +hugo
 +dragndrop
 +jupyter
 +noter
 +present
 +pandoc
 +pretty
 +roam2)
#+end_src

*** org modern
Fix function link recognized as footnote.
#+begin_src emacs-lisp
(use-package org-modern
  :init
  (setq org-modern-footnote nil))
#+end_src

#+begin_src emacs-lisp
(after! org-modern
  (setq org-modern-star 'replace))
#+end_src

*** agenda
#+begin_src emacs-lisp
(setq org-directory "~/Documents/org/"
      org-agenda-files '("agenda/todos.org" "agenda/projects.org")
      org-agenda-start-with-log-mode t
      org-agenda-prefix-format '((agenda . " %i %-12:c%?-12t% s")
                                 (todo   . " ")
                                 (tags   . " %i %-12:c")
                                 (search . " %i %-12:c"))
      org-log-done 'time
      org-log-into-drawer t
      org-startup-numerated t
      org-image-actual-width 400
      org-duration-format '((special . h:mm))
      org-startup-with-inline-images t
      org-refile-targets '(("archive.org" :maxlevel . 1)
                           ("projects.org")))
#+end_src

[[https://emacs.stackexchange.com/a/7840][saving - How do I automatically save org-mode buffers? - Emacs Stack Exchange]]
#+begin_src emacs-lisp
(after! org
  ;;(org-clock-persist 'history)
  (org-clock-persistence-insinuate)
  (advice-add 'org-refile :after 'org-save-all-org-buffers)
  (advice-add 'org-agenda-quit :before 'org-save-all-org-buffers))
#+end_src

custom agenda view from
- [[https://www.labri.fr/perso/nrougier/GTD/index.html#org9f2e38c][Get Things Done with Emacs]]
#+begin_src emacs-lisp
(setq org-agenda-custom-commands
      '(("g" "Get Things Done (GTD)"
         ((agenda ""
                  ((org-agenda-skip-function
                    '(org-agenda-skip-entry-if 'deadline))
                   (org-deadline-warning-days 0)
                   (org-agenda-start-day "-1d")
                   (org-agenda-span 4)))
          (todo "STRT"
                ((org-agenda-skip-function
                  '(org-agenda-skip-entry-if 'deadline))
                 (org-agenda-prefix-format "  %i %-12:c [%e] ")
                 (org-agenda-overriding-header "\nTasks\n")))
          (tags-todo "inbox"
                     ((org-agenda-prefix-format "  %?-12t% s")
                      (org-agenda-overriding-header "\nInbox\n")))
          (tags "CLOSED>=\"<today>\""
                ((org-agenda-overriding-header "\nCompleted today\n")))))))
#+end_src

#+begin_src emacs-lisp
(after! org-capture
  (setq org-capture-templates
        `(("i" "Inbox" entry (file "agenda/todos.org")
           "* TODO %?\n%U\n%i" :empty-lines 1 :prepend t)
          ("@" "Inbox [mu4e]" entry (file "agenda/todos.org")
           "* TODO Reply to \"%a\"\n%U\n%i" :empty-lines 1 :prepend t)
          ("n" "Inbox [note]" entry (file "agenda/todos.org")
           "* TODO [%a] %? %^G\n%U\n%i" :empty-lines 1 :prepend t))))
#+end_src

- [[https://stackoverflow.com/a/50875921][emacs - org-mode capture : dynamic file name - Stack Overflow]]
- [[https://github.com/daviwil/emacs-from-scratch/blob/c55d0f5e309f7ed8ffa3c00bc35c75937a5184e4/init.el][emacs-from-scratch/init.el at c55d0f5e309f7ed8ffa3c00bc35c75937a5184e4 · davi...]]

*** org-babel
Skip executing org source blocks within commented headings. To optimize,
consider advising [[fn:org-babel-map-executables]]
#+begin_src emacs-lisp
(defun +my/org-babel-execute-buffer (&optional arg)
  "Execute source code blocks in a buffer.
Call `org-babel-execute-src-block' on every source block in
the current buffer."
  (interactive "P")
  (org-babel-eval-wipe-error-buffer)
  (org-save-outline-visibility t
    (org-babel-map-executables nil
      (unless (org-in-commented-heading-p)
        (if (memq (org-element-type (org-element-context))
                  '(babel-call inline-babel-call))
            (org-babel-lob-execute-maybe)
          (org-babel-execute-src-block arg))))))

(advice-add 'org-babel-execute-buffer :override #'+my/org-babel-execute-buffer)
#+end_src

Restore window-start after execute subtree. For hook based implement for all
[[fn:narrow-to-region]] see:
- [[https://emacs.stackexchange.com/questions/13556/restoring-position-in-window-after-narrowing][Restoring position in window after narrowing - Emacs Stack Exchange]]

#+begin_src emacs-lisp
(defun +my/org-babel-execute-subtree (&optional arg)
  "Execute source code blocks in a subtree.
Call `org-babel-execute-src-block' on every source block in
the current subtree, passing over the prefix argument ARG."
  (interactive "P")
  (let ((original-start (window-start)))
    (save-restriction
      (save-excursion
        (org-narrow-to-subtree)
        (org-babel-execute-buffer arg)))
    (set-window-start (selected-window) original-start)))

(advice-add 'org-babel-execute-subtree :override #'+my/org-babel-execute-subtree)
#+end_src

*** jupyter
#+begin_src toml
[jupyter]
packages=["jupyter-notebook"]
#+end_src

#+begin_src emacs-lisp :tangle packages.el
(package! jupyter
  :pin nil
  :recipe (:host github :repo "fakeGenuis/jupyter"))
#+end_src

start session only when exactly execute it.
#+begin_src emacs-lisp
(after! jupyter
  (setq jupyter-org-auto-connect nil))
#+end_src

[[https://github.com/doomemacs/doomemacs/issues/7354][doomemacs/doomemacs#7354 Jupyter fails to function after upgrade]]
#+begin_src emacs-lisp
(with-eval-after-load 'ob-jupyter
 (org-babel-jupyter-aliases-from-kernelspecs))
#+end_src

#+begin_src emacs-lisp
(after! ob-jupyter
  ;; (push :text/html jupyter-org-mime-types)
  (set-popup-rule!
    "^\\*jupyter-traceback"
    :side 'bottom :size 10 :slot -2 :select t))
#+end_src

To view contents of =.ipynb= file, see
- [[https://github.com/astoff/code-cells.el][GitHub - astoff/code-cells.el: Emacs utilities for code split into cells, inc...]]

Possible issues
- [[https://github.com/emacs-jupyter/jupyter/issues/584][emacs-jupyter/jupyter#584 `jupyter-or...]]
- [[https://github.com/doomemacs/doomemacs/issues/3171][doomemacs/doomemacs#3171 if: Need a v...]]
- [[https://github.com/emacs-jupyter/jupyter/issues/575][emacs-jupyter/jupyter#575 Remote kern...]]

*** jupyter-ext
#+begin_src emacs-lisp :tangle packages.el
(package! jupyter-ext
  :recipe (:host github
           :repo "fakeGenuis/jupyter-ext"))
#+end_src

#+begin_src emacs-lisp
(use-package! jupyter-ext
  :commands jupyter-org-transient
  :init
  (map! :map jupyter-org-interaction-mode-map
        :n ";" #'jupyter-org-transient)
  :config
  ;; A tweaked completion at point function for corfu
  (advice-add 'jupyter-completion-at-point :override #'jupyter-ext-completion-at-point))
#+end_src

#+begin_src emacs-lisp
(after! ob-core
  ;; with multiple output and =:async yes=, text mass up after `example` block
  (setq org-babel-min-lines-for-block-output 256))
#+end_src

Intent mainly with [[file:::wolfram in jupyter]], respect to doom's org babel lazy load
#+begin_src emacs-lisp
(defvar +my/jupyter-langs '()
  "A list of language that use jupyter override.")

(add-hook '+org-babel-load-functions
  (defun +org-babel-load-jupyter-override-h (lang)
    ;; don't multi run `org-babel-jupyter-override-src-block'
    (unless (boundp 'org-babel-header-args:jupyter)
      (require 'ob-jupyter))
        ;; or even org-babel-header-args:%s will be reset
    (when-let ((lang-name (symbol-name lang))
               (_ (member lang-name +my/jupyter-langs)))
      (set (intern (format "org-babel-default-header-args:jupyter-%s" lang-name))
           (symbol-value (intern (format "org-babel-default-header-args:%s" lang-name))))
      (org-babel-jupyter-override-src-block lang-name)))
  -90)
#+end_src

*** ob-async
Session async have been include in org mode, see how to implement async using
built in method.
- [[https://github.com/jackkamm/ob-session-async][GitHub - jackkamm/ob-session-async: Asynchronous org-mode session evaluation]]
- [[https://github.com/emacs-mirror/emacs/blob/a7cb220523d881449a2dba683e7358b3312fd482/etc/ORG-NEWS#L863][emacs/etc/ORG-NEWS at a7cb220523d881449a2dba683e7358b3312fd482 · emacs-mirror...]]

This branch mainly fix =apply: Wrong number of arguments= of advice
[[cmd:ob-async-org-babel-execute-src-block]]
- [[https://github.com/astahlman/ob-async/pull/96][astahlman/ob-async#96 Update signature and skip :session blocks by stsquad]]

#+begin_src emacs-lisp :tangle no
(package! ob-async
  :pin nil
  :recipe (:host github
           :repo "stsquad/ob-async"
           :branch "update-signature-skip-session"))
#+end_src

*** org-noter
#+begin_src emacs-lisp
(after! org-noter
  (org-noter-set-doc-split-fraction '(0.75 . 0.25)))
#+end_src

*** org-roam
#+begin_src emacs-lisp
(setq org-roam-directory (expand-file-name "roam/" org-directory))
(after! org-roam
  (setq org-roam-dailies-capture-templates
   '(("d" "default" entry "* %?\n[%<%Y-%m-%d %H:%M>]\n"
      :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n")))))
#+end_src

#+begin_src emacs-lisp
(after! org-roam
  (setq org-roam-graph-viewer "librewolf")
  (setq org-roam-graph-link-hidden-types
        '("file" "http" "https" "attachment" "zotero"
          "fuzzy" "doom-module" "kbd" "fn")))
#+end_src

*** others
[[kbd:SPC s b]] should work as expected
- [[https://github.com/doomemacs/doomemacs/issues/6478#issuecomment-1328110153][doomemacs/doomemacs#6478 `evil-ex-search` skips matches in folded regions (in...)]]

revert native ~org-cycle~ style, see [[doom-modules:lang/org/README.org]]
#+begin_src emacs-lisp
(after! evil-org
  (remove-hook 'org-tab-first-hook #'+org-cycle-only-current-subtree-h))
#+end_src

[[https://github.com/hlissner/doom-emacs/issues/5436][hlissner/doom-emacs#5436 org-src-window-setup not working correctly]]
#+begin_src emacs-lisp
(after! org-src
  (setq org-src-window-setup 'reorganize-frame)
  (set-popup-rule! "^\\*Org Src" :ignore t))
#+end_src

format org-src
#+begin_src emacs-lisp
(map! :after org :map evil-org-mode-map
  :n "g Q" #'+format:region)
#+end_src

org-format
#+begin_src emacs-lisp
(use-package org-format
  :defer 10
  ;; dawn lazy load
  ;; :commands (apheleia-format-org-buffer)
  :init
  (add-to-list 'load-path (expand-file-name "org-format" org-directory)))
#+end_src

#+begin_src emacs-lisp
(cl-defun apheleia-format-org-buffer
    (&key buffer scratch callback &allow-other-keys)
  "Copy BUFFER to SCRATCH, then format scratch, then call CALLBACK."
  ;; ugly implement!
  (with-current-buffer scratch
    ;; FIXME so many local value to copy
    (let ((buffer-file-name (buffer-local-value 'buffer-file-name buffer))
          (org-format-ignore-link (buffer-local-value 'org-format-ignore-link buffer))
          (org-format-keep-empty-below-heading (buffer-local-value 'org-format-keep-empty-below-heading buffer)))
      (org-format-buffer))
    (funcall callback)))

(after! org
  (set-formatter! 'orgfmt #'apheleia-format-org-buffer :modes '(org-mode)))
#+end_src

org-archive
#+begin_src emacs-lisp
(after! org
  (setq org-archive-location ".bak/%s_archive::"))
#+end_src

Avoid lengthy title
#+begin_src emacs-lisp
(after! org-cliplink
  (setq org-cliplink-max-length 40))
#+end_src

** python
#+begin_src toml
[python]
packages=[
    "python-pytest",
    "python-nose",
    "python-black",
    "python-pyflakes",
    "python-isort",
    "python-pipenv",
    "pyright"
]
#+end_src

#+begin_src emacs-lisp :tangle no :noweb-ref lang
(python +lsp +pyright +tree-sitter)
#+end_src

** sh
#+begin_src toml
[sh]
packages=["shellcheck-bin", "bash-language-server", "shfmt"]
#+end_src

#+begin_src emacs-lisp :tangle no :noweb-ref lang
(sh +fish +lsp +powershell)
#+end_src

fish shell ligatures
#+begin_src emacs-lisp
(after! fish-mode
  (set-ligatures! 'fish-mode
    :def "function"
    :return "return"
    :and "&&"
    :or "||"
    :not "not"
    :true "true"
    :false "false"
    :for "for"))
#+end_src

** yaml
#+begin_src toml
[yaml]
packages=["yaml-language-server"]
#+end_src

#+begin_src emacs-lisp :tangle no :noweb-ref lang
(yaml +lsp)
#+end_src

** wolfram
#+begin_src toml
[wolfram]
enabled="not is_wsl"
packages=["mathematica"]
#+end_src

#+begin_src emacs-lisp :tangle packages.el
(package! wolfram-mode
  :recipe (:local-repo "~/lib/wolfram-mode/"))
#+end_src

#+begin_src emacs-lisp
(use-package! wolfram-mode
  :defer t)
#+end_src

wolfram-format
#+begin_src emacs-lisp
(after! apheleia
  (load "~/lib/wolframFormatter/wolfram-format.el"))
#+end_src
Note that =apheleia-formatter= not work well with org-src block, turn
=org-indent-mode= off and then run [[kbd:g Q]] and then turn on =org-indent-mode=.

*** ligatures
#+begin_src emacs-lisp
(after! (wolfram-mode ligature)
  (set-ligatures! 'wolfram-mode
    :and "&&"
    :or "||"
    :not "!"
    :null "None"
    :true "True"
    :false "False"))
#+end_src

*** =lsp-wl= with =eglot=
#+begin_src bash :tangle no
WLPATH="~/.local/lib/lsp-wl/"
[[ -d "$WLPATH" ]] || git clone https://github.com/kenkangxgwe/lsp-wl.git "$WLPATH"
#+end_src

#+begin_src Wolfram-Language :tangle no
PacletInstall["CodeParser"]
PacletInstall["CodeInspector"]
PacletInstall["ZeroMQLink"] (* 1.2.6+ *)
#+end_src

=eglot= is far faster than =LSP=!
- [[https://github.com/kenkangxgwe/lsp-wl/wiki#eglot][Home · kenkangxgwe/lsp-wl Wiki · GitHub]]
#+begin_src emacs-lisp
(let ((wlserver (expand-file-name "~/.local/lib/lsp-wl/init.wls")))
  (when (and (file-exists-p wlserver) (executable-find "wolframscript"))
    (with-eval-after-load 'eglot
      (add-to-list 'eglot-server-programs
                   `(wolfram-mode . ("wolframscript" "-f" ,wlserver
                                     "--tcp-server" :autoport))))))
#+end_src
Completion seems not work with =12.3=.

*** wolfram in jupyter
#+begin_src emacs-lisp
(add-to-list '+my/jupyter-langs "Wolfram-Language")

(after! org-src
  (add-to-list 'org-src-lang-modes '("Wolfram-Language" . wolfram))
  (setq org-babel-default-header-args:Wolfram-Language
        '((:kernel . "wolframforjupyter")
          (:async . "yes")
          (:results . "scalar"))))
#+end_src

#+begin_src emacs-lisp
(add-to-list '+org-babel-native-async-langs 'Wolfram-Language)
#+end_src

*** snippets
#+begin_src emacs-lisp
(after! (wolfram-mode yasnippet)
  (let ((key-templates '()))
    (dolist (key wolfram-structure-keywords)
      (push `(,key ,(format "(* ::%s:: *)\n(*$1*)\n\n" key)) key-templates))
    (yas-define-snippets 'wolfram-mode key-templates)))
#+end_src

** markdown
#+begin_src toml
[markdown]
packages=[
    "pandoc-bin"
]
#+end_src

#+begin_src emacs-lisp :tangle no :noweb-ref lang
markdown
#+end_src

** typst
#+begin_src toml
["typst-mode"]
packages=[
    "typst",
    "tree-sitter-typst-git", # tree sitter grammar for typst, demand by typst-ts-mode
    "tinymist" # language server
    # "typst-lsp-bin" # alternative language server
]
#+end_src

#+begin_src emacs-lisp :tangle packages.el
(package! typst-ts-mode
  :recipe (:host codeberg
           :repo "meow_king/typst-ts-mode"
           :files (:defaults "*.el")))
#+end_src

#+begin_src emacs-lisp
(use-package! typst-ts-mode
  :mode ("\\.typ\\'")
  :custom
  (typst-ts-watch-options "--open")
  (typst-ts-mode-grammar-location (expand-file-name "tree-sitter/libtree-sitter-typst.so" user-emacs-directory))
  (typst-ts-mode-enable-raw-blocks-highlight t)
  :config
  (setq typst-ts-mode-indent-offset 2)
  (keymap-set typst-ts-mode-map "C-c C-c" #'typst-ts-tmenu))
#+end_src

use =pdf-tools= to preview
#+begin_src emacs-lisp
(defun typst-pdf-tools-preview (&optional buffer)
  "Use `pdf-tools' to preview compiled pdf."
  (interactive)
  (find-file-other-window (typst-ts-compile-get-result-pdf-filename buffer)))

(advice-add 'typst-ts-preview :override #'typst-pdf-tools-preview)
#+end_src

language server
#+begin_src emacs-lisp
(with-eval-after-load 'eglot
  (with-eval-after-load 'typst-ts-mode
    (add-to-list 'eglot-server-programs
                 `((typst-ts-mode) .
                   ,(eglot-alternatives `(,typst-ts-lsp-download-path
                                          "tinymist"
                                          "typst-lsp"))))))
#+end_src
more configuration on [[https://myriad-dreamin.github.io/tinymist//frontend/emacs.html][Tinymist Docs]]

** Others
css
#+begin_src emacs-lisp
(prependq! auto-mode-alist '(("\\.rasi\\'" . css-mode)))
#+end_src

* Email
** mu4e
#+begin_src toml
[mu4e]
packages=[
    "isync",
    "mu",
    "pass",
    "msmtp"
    #"imagemagick"
]
#+end_src

Example for initialing =mu= and =mbsync=
#+begin_src fish :tangle no
mkdir -p ~/.mail/$mailname
mu init --maildir=~/.mail --my-address=...@...
mu index
mbsync -c ~/.config/isync/$mbsyncrc -V -a
#+end_src

#+begin_src emacs-lisp :tangle no :noweb-ref email
(mu4e +gmail +org)
#+end_src

#+begin_src emacs-lisp :tangle no
(set-popup-rule! "^\\*mu4e-\\(main\\|headers\\)\\*" :ignore t)
#+end_src

#+begin_src emacs-lisp
(setq mu4e-update-interval 300)
(after! mu4e
  (setq mu4e-split-view 'vertical
        mu4e-change-filenames-when-moving t
        mu4e-attachment-dir "~/Downloads"
        ;; every new email composition gets its own frame!
        mu4e-compose-in-new-frame t
        mu4e-use-fancy-chars t))
#+end_src

send email by =msmtp=, see [[file:~/.config/msmtp/config]]
#+begin_src emacs-lisp
(after! mu4e
  (setq sendmail-program (executable-find "msmtp")
        send-mail-function #'smtpmail-send-it
        message-sendmail-f-is-evil t
        message-sendmail-extra-arguments '("--read-envelope-from")
        message-send-mail-function #'message-send-mail-with-sendmail))
#+end_src

private variables ~mu4e-get-mail-command~ and ~mu4e-contexts~
#+begin_src emacs-lisp
(after! mu4e
  (load-in-doom-dir "private/mu4e.el"))
#+end_src

* App
** rss
#+begin_src emacs-lisp :tangle no :noweb-ref app
(rss +org)
#+end_src

[[https://pragmaticemacs.wordpress.com/2016/08/17/read-your-rss-feeds-in-emacs-with-elfeed/][Read your RSS feeds in emacs with elfeed | Pragmatic Emacs]]
#+begin_src emacs-lisp
(after! elfeed
  (add-hook! 'elfeed-search-mode-hook 'elfeed-update)
  (setq elfeed-db-directory (concat (getenv "NCDIR") "elfeed/db/")
        elfeed-enclosure-default-dir (concat (getenv "NCDIR") "elfeed/enclosures/")
        ;; elfeed-search-filter "@1-month-ago +unread"
        rmh-elfeed-org-files (list (expand-file-name "elfeed.org" org-directory)))
  (map! :leader
        (:prefix "o"
         :desc "elfeed"    "e" #'elfeed)))

(after! elfeed-goodies
  (setq elfeed-goodies/entry-pane-size 0.5))
#+end_src

** everywhere
#+begin_src emacs-lisp :tangle no :noweb-ref app
everywhere
#+end_src

#+begin_src toml
[everywhere]
packages=[
    "xclip",
    "xdotool",
    "xorg-xprop",
    "xorg-xwininfo"
]
#+end_src

* Other packages
** go-translate
#+begin_src emacs-lisp :tangle packages.el
(package! go-translate)
#+end_src

#+begin_src emacs-lisp
(use-package go-translate
  :bind ("C-c t" . gt-do-translate)
  :config
  (setq gt-langs '(en zh))
  (setq gt-default-translator
        (gt-translator
         :engines (gt-google-engine)
         :render (gt-buffer-render)))
  (set-popup-rule!
    "^\\*gt-result\\*"
    :side 'left :size 80 :slot -2 :select t))
#+end_src

** keycast
#+begin_src emacs-lisp :tangle packages.el
(package! keycast)
#+end_src

[[https://github.com/tarsius/keycast/issues/7#issuecomment-881469067][tarsius/keycast#7 Add support for moody and doom-modeline.]]
#+begin_src emacs-lisp
(use-package! keycast
  :commands (keycast-mode)
  :init
  (map! :leader
        (:prefix "t"
         :desc "Toggle keycast" "k" #'keycast-mode))
  :config
  (define-minor-mode keycast-mode
    "Show current command and its key binding in the mode line (fix for use with doom-mode-line)."
    :global t
    (if keycast-mode
        (progn (add-hook 'pre-command-hook 'keycast--update t)
               (setq keycast-mode-line-window-predicate
                     'keycast-active-frame-bottom-right-p))
     (remove-hook 'pre-command-hook 'keycast--update)
     (setq keycast-mode-line-window-predicate 'ignore)))
  (add-to-list 'global-mode-string '("" keycast-mode-line)))
#+end_src

** COMMENT shrface
#+begin_src emacs-lisp :tangle packages.el
(package! shrface)
#+end_src

#+begin_src emacs-lisp
(use-package! shrface
  :hook eww-after-render-hook
  :commands request-url-as-org
  :config
  (shrface-basic)
  (shrface-trial)
  (shrface-default-keybindings) ; setup default keybindings
  (setq shrface-href-versatile t)

  (defun request-url-as-org (url)
    (interactive "sRequest url: ")
    (require 'shrface)
    (require 'request)
    (setq-local shrface-request-url url)
    (request url
      :parser 'buffer-string
      :headers '(("User-Agent" . "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.101 Safari/537.36"))
      :sync nil
      :success (cl-function
                (lambda (&key data &allow-other-keys)
                  (shrface-html-export-as-org data))))))
#+end_src

** screenshot
#+begin_src emacs-lisp :tangle packages.el
(package! screenshot
  :recipe (:host github :repo "yangsheng6810/screenshot"))
#+end_src

#+begin_src emacs-lisp
(use-package! screenshot
  :commands screenshot
  :init
  (map! (:leader :prefix "o"
         :desc "sreenshot within emacs" "S" #'screenshot)))
#+end_src

Allow attach the screenshot.
#+begin_src emacs-lisp
(after! screenshot
  (screenshot--def-action
   "attach"
   (set-process-sentinel
    ;; NOTE feh not transparent well when shadow is included
    (start-process "feh" nil "feh"
                   "--class=attached_window"
                   screenshot--tmp-file)
    (lambda (process event) (delete-file screenshot--tmp-file))))

  (transient-append-suffix 'screenshot-transient '(-1 1)
    '("a" "Attach" screenshot-attach)))
#+end_src

=alias --save convert magick= in fish shell to suppress the warning
#+begin_quote
WARNING: The convert command is deprecated in IMv7, use "magick" instead of
"convert" or "magick convert"
#+end_quote

*Issues*
1. Region not correctly selected in =vterm= buffer
2. When select in visual line mode, newline not stripped

** zotxt
#+begin_src emacs-lisp :tangle packages.el
(package! zotxt)
#+end_src

#+begin_src emacs-lisp
(defun org-zotxt-get-attachment-path ()
  "Get attachment file path"
  (interactive "P")
  (let ((item-id (org-zotxt-extract-link-id-at-point)))
    (deferred:$
      (zotxt--request-deferred
       (format "%s/items" zotxt-url-base)
       :params `(("key" . ,item-id) ("format" . "paths"))
       :parser 'json-read)
      (deferred:nextc it
        (lambda (response)
          (let ((paths (cdr (assq 'paths (elt (request-response-data response) 0)))))
            (org-zotxt-choose-path paths))))
      (deferred:error it #'zotxt--deferred-handle-error)
      (if zotxt--debug-sync (deferred:sync! it)
        (deferred:nextc it
          (lambda (path) path))))))

(defun +my/tilde-home-path (path)
  "covert path starts with /home/$usr/ to '~'"
  (interactive)
  (let ((home (getenv "HOME")))
    (if (string-prefix-p home path)
        (string-join `("~" ,(string-remove-prefix home path)) "")
      path)))

(defun org-zotxt-copy-attachment-path ()
  "Open attachment of Zotero items linked at point.
Opens with `org-open-file', see for more information about ARG."
  (interactive)
  (deferred:$
    (deferred:next
      (lambda ()
        (org-zotxt-get-attachment-path)))
    (deferred:nextc it
      (lambda (path)
        (let ((new-path (+my/tilde-home-path path)))
          (kill-new new-path)
          (message "\"%s\" send to system clipboard!" new-path))))))
#+end_src

[[http://www.mkbehr.com/posts/a-research-workflow-with-zotero-and-org-mode/][A research workflow with Zotero and Org mode | mkbehr.com]]
#+begin_src emacs-lisp
(use-package zotxt
  :hook (org-mode . org-zotxt-mode)
  :config
  (setq zotxt-default-bibliography-style "american-physical-society-et-al"))

(map! :map org-zotxt-mode-map
      :desc "org-zotxt-insert-selected"
      ;; use <quote> in in case it pollute balanced brackets
      "C-c <quote> <quote>" (cmd!! #'org-zotxt-insert-reference-link '(4))
      :desc "org-zotxt-copy-attachment-path"
      "C-c <quote> c" #'org-zotxt-copy-attachment-path)
#+end_src

open attachment with point at arxiv link
- [[https://emacs.stackexchange.com/a/38297][Get description of an org-mode link - Emacs Stack Exchange]]
#+begin_src emacs-lisp
(defun org-zotxt-open-arxiv-attachment ()
  "open attachment from arxiv link, by zotxt"
  (interactive)
  (let* ((link (org-element-context))
         (desc (buffer-substring-no-properties (org-element-property :contents-begin link)
                                               (org-element-property :contents-end link))))
     (org-zotxt-insert-reference-link)))
#+end_src

** figlet
converting comments into ascii arts
#+begin_src toml
[figlet]
packages=["figlet"]
#+end_src

#+begin_src emacs-lisp :tangle packages.el
(package! figlet)
#+end_src

#+begin_src emacs-lisp
(use-package! figlet
  :defer t
  :config
  (setq figlet-options '("-W" "-f" "script")))
#+end_src

** shell-command+
#+begin_src emacs-lisp :tangle packages.el
(package! shell-command+
  :recipe (:host sourcehut
           :repo "pkal/shell-command-plus"))
#+end_src
This package is located in =GNU ELPA=, but it cannot be installed, see
[[https://www.reddit.com/r/DoomEmacs/comments/q4jrer/cant_install_elpa_package/][cant install elpa package]]

substitute "%" to buffer file in ~shell-command~
- [[https://puntoblogspot.blogspot.com/2021/05/current-file-name-on-emacss-shell.html][puntoblogspot: Current file name on emacs's shell-command]]
- [[https://unix.stackexchange.com/questions/45125/how-to-get-current-buffers-filename-in-emacs][function - How to get current buffer's filename in emacs? - Unix & Linux Stac...]]

#+begin_src emacs-lisp
(use-package! shell-command+
  :commands shell-command+
  :init
  (global-set-key (kbd "M-!") #'shell-command+))
#+end_src

** gptel
#+begin_src emacs-lisp :tangle packages.el
(package! gptel :recipe (:nonrecursive t))
#+end_src

#+begin_src emacs-lisp
(use-package! gptel
  :commands (gptel gptel-send gptel-quick)
  :init
  (map!
   (:leader
    :prefix "o"
    :desc "gptel" "g" #'gptel))
  (map! "C-c g q" #'gptel-quick
        "C-c g m" #'gptel-menu
        "C-c g t" #'gptel-org-set-topic)
  :config
  (setq gptel-default-mode #'org-mode)
  (setq gptel-include-reasoning 'ignore)
  ;; prefer level-1 heading
  (setf (alist-get 'org-mode gptel-prompt-prefix-alist) "** ")
  (setf (alist-get 'org-mode gptel-response-prefix-alist) "@assistant\n")
  (load-in-doom-dir "private/gpt.el")
  (add-hook 'gptel-post-stream-hook 'gptel-auto-scroll)
  (add-hook 'gptel-post-response-functions 'gptel-end-of-response))
#+end_src

After [[cmd:gptel-org-set-topic]], remove the top heading for collect conversation.
#+begin_src emacs-lisp
(defun +my/gptel-org-rm-upper-heading ()
  "Remove upper level heading line."
  (while (re-search-backward "\\(?:^\\* .+$\\)[[:space:]]+" nil t)
    (delete-region (match-beginning 0) (match-end 0))))

(add-hook 'gptel-prompt-filter-hook #'+my/gptel-org-rm-upper-heading)
#+end_src

Ask standalone question anywhere.
#+begin_src emacs-lisp
(defun +my/gptel-org-make-standalone ()
  "Restrict prompt to system message and things belong previous heading only."
  (when (and (org-back-to-heading t)
             (member "standalone"
                     (mapcar #'substring-no-properties (org-get-tags))))
    (forward-line)
    ;; (org-set-tags nil)
    (delete-region (point-min) (point))))

(add-hook 'gptel-prompt-filter-hook #'+my/gptel-org-make-standalone)
#+end_src

Chat buffer should be real!
#+begin_src emacs-lisp
(defun gptel-buffer-p (buf)
  (with-current-buffer buf (and (boundp 'gptel-mode) (eq gptel-mode t))))
(add-hook 'doom-real-buffer-functions #'gptel-buffer-p)
#+end_src

** =gptel-quick=
#+begin_src emacs-lisp :tangle packages.el
(package! gptel-quick
  :recipe (:host github
           :repo "karthink/gptel-quick"))
#+end_src

#+begin_src emacs-lisp
(use-package! gptel-quick
  :commands (gptel-quick)
  :config
  (setq gptel-quick-model 'olmo2:13b)
  (setq gptel-quick-backend (cdr (assoc-string "ollama" gptel--known-backends))))
#+end_src

** tldr
#+begin_src emacs-lisp :tangle packages.el
(package! tldr)
#+end_src

** COMMENT telega
#+begin_src emacs-lisp :tangle packages.el
(package! telega)
#+end_src

#+begin_src toml :tangle packages.toml
[telega]
packages=["docker"]
#+end_src

#+begin_src shell :tangle no
docker pull zevlg/telega-server:latest
#+end_src

#+begin_src emacs-lisp
(use-package! telega
  :commands telega
  :init
  (setq telega-directory (expand-file-name "~/.local/share/telega"))
  :config
  (setq telega-use-docker t)
  ;; ("\\.pdf\\'" . default) is already member in `org-file-apps'
  ;; Use "xdg-open" to open files by default
  (setcdr (assq t org-file-apps-gnu) 'browse-url-xdg-open)
  (setq telega-open-file-function 'org-open-file)
  (setq telega-proxies '((:server "127.0.0.1" :port 1089 :enable t
                          :type (:@type "proxyTypeSocks5")))))
  ;; (setq telega-server-libs-prefix "/usr"))
#+end_src

* Other configs
** unfill
- [[https://www.emacswiki.org/emacs/UnfillParagraph][EmacsWiki: Unfill Paragraph]]
- [[https://github.com/purcell/unfill][GitHub - purcell/unfill: Functions providing the inverse of Emacs' fill-parag...]]
#+begin_src emacs-lisp
;;; Stefan Monnier <foo at acm.org>. It is the opposite of fill-paragraph
(defun unfill-paragraph (&optional region)
  "Takes a multi-line paragraph and makes it into a single line of text."
  (interactive (progn (barf-if-buffer-read-only) '(t)))
  (let ((fill-column (point-max))
        ;; This would override `fill-column' if it's an integer.
        (emacs-lisp-docstring-fill-column t))
    (fill-paragraph nil region)))

;; Handy key definition
(define-key global-map "\M-Q" 'unfill-paragraph)
#+end_src

** tramp
thank you, fish 4.0😄️
#+begin_src emacs-lisp
(after! tramp
  (add-to-list 'process-environment "SHELL=/bin/bash"))
#+end_src

- [[https://github.com/akermu/emacs-libvterm/issues/689][akermu/emacs-libvterm#689 Tramp-login-shells custom doesn't match type]]
- [[https://github.com/akermu/emacs-libvterm/pull/706][akermu/emacs-libvterm#706 Allow using the default login shell for remote conn...]]

** transient
- [[file:~/.config/emacs/modules/tools/magit/config.el::transient-display-buffer-action]]
- [[https://github.com/magit/transient/issues/338#issuecomment-2528948033][magit/transient#338 Transient window doesn't come back if display-action is s...]]
#+begin_src emacs-lisp
(after! transient
  (setq transient-display-buffer-action
        '(display-buffer-below-selected
          (dedicated . t)
          (inhibit-same-window . t)))
  (setq transient-show-during-minibuffer-read t))
#+end_src

see also [[https://github.com/karthink/gptel/issues/583][karthink/gptel#583 Transient issue when selecting a model in `gptel-menu`]]

** projectile
[[https://docs.projectile.mx/projectile/configuration.html][Configuration :: Projectile]]
#+begin_src emacs-lisp
(after! projectile
  (setq projectile-indexing-method 'alien
        projectile-sort-order 'recently-active
        projectile-file-exists-remote-cache-expire (* 10 60)
        projectile-track-known-projects-automatically nil
        ;; projectile-require-project-root t
        projectile-auto-discover t)
        ;; (projectile-file-exists-local-cache-expire (* 5 60)))
  (add-to-list 'projectile-globally-ignored-directories
               "*\\.run\\.tmp$")
  (pushnew! projectile-globally-ignored-modes
            "helpful-mode" "dired-mode")
  (add-to-list 'projectile-globally-ignored-buffers "*doom*"))
#+end_src

For non git project, better add following in project root [[file:.dir-locals.el]]
- [[https://emacs.stackexchange.com/questions/16497/how-to-exclude-files-from-projectile][How to exclude files from Projectile? - Emacs Stack Exchange]]
#+begin_src emacs-lisp :tangle no
((nil . ((projectile-indexing-method . hybrid))))
#+end_src
and add ignored files in [[file:.projectile]].

** proxy
#+begin_src emacs-lisp
(setq url-proxy-services
   `(("no_proxy" . "^\\(localhost\\|10\\..*\\|192\\.168\\..*\\)")
     ("http" . ,(shell-command-to-string "echo -n $ALL_PROXY"))
     ("https" . ,(shell-command-to-string "echo -n $ALL_PROXY"))))
#+end_src

** Windows =Librewolf= in wsl
Open link with host =Librewolf= browser
#+begin_src emacs-lisp
(if (featurep :system 'wsl)
  (setq browse-url-firefox-program "librewolf.exe"))
#+end_src

** insert arxiv links
#+begin_src emacs-lisp
(defvar rx-arxiv-regexp
  (rx (= 4 num) "." (= 5 num))
  "Regular expression for arxiv id.")

(defun org-insert-arxiv-link ()
  "Insert arxiv link with arxiv id as description."
  (interactive)
  (let* ((ring (current-kill 0))
         (id (if (string-match rx-arxiv-regexp ring)
                 (match-string 0 ring)
               (read-string "Input arxiv id:"))))
    (insert " ")
    (org-insert-link nil (concat "https://arxiv.org/abs/" id) id)))
#+end_src

** search online
#+begin_src emacs-lisp
(add-to-list '+lookup-provider-url-alist '("Inspire" "https://inspirehep.net/literature?q=%s"))
#+end_src

** shortcuts
#+begin_src emacs-lisp
(map! :leader
      :desc "Eval expression"       ":"    #'pp-eval-expression
      :desc "M-x"                   ";"    #'execute-extended-command
      :desc "Org agenda"            "="    #'org-agenda)
#+end_src

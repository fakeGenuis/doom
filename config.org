#+TITLE: Config
#+PROPERTY: header-args :tangle config.el

* Info
#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
(setq user-full-name "name"
      user-mail-address "***REMOVED***")
#+end_src
* Display
** Custom face
#+begin_src emacs-lisp
#+end_src
** Hidpi
for hidpi monitor, doom-font setting are bugy
https://unix.stackexchange.com/questions/242067/emacs-on-hidpi-screen-renders-unreadable-fonts-arch-linux
#+begin_src emacs-lisp :tangle yes
(if (equal (display-pixel-width) 3840)
    (progn
      (add-to-list 'default-frame-alist '(font . "Inconsolata-14"))
      (set-face-attribute 'default t :font "Fira Code-10"))
  (progn
    (add-to-list 'default-frame-alist '(font . "Inconsolata-14"))
    (set-face-attribute 'default t :font "Fira Code-10"))
  )
#+end_src
** fonts
*bold* and /italic/ enabled
#+begin_src emacs-lisp :tangle no
(if (equal (display-pixel-width) 3840)
    (setq doom-font (font-spec :family "Inconsolata" :size 16)
          doom-variable-pitch-font (font-spec :family "Source Code Pro" :size 12))
  (setq doom-font (font-spec :family "Inconsolata")
        doom-variable-pitch-font (font-spec :family "Source Code Pro")))
(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))
#+end_src
** Themes
#+begin_src emacs-lisp
(setq doom-theme 'doom-dracula)
#+end_src
** Icons
#+begin_src emacs-lisp :tangle no
(use-package all-the-icons
  :config
  (setq all-the-icons-scale-factor 0.75))
#+end_src
** Line
#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
#+end_src
* Editing
** About Parenthese
#+begin_src emacs-lisp :tangle no
(setq show-paren-style 'expression)
(electric-pair-mode 1)
#+end_src

** 中文输入法
https://emacs-china.org/t/topic/1271
#+begin_src emacs-lisp :tangle no
(use-package pyim
  :ensure nil
  :demand t
  :config
  ;; 激活 basedict 拼音词库，五笔用户请继续阅读 README
  (use-package pyim-basedict
    :ensure nil
    :config (pyim-basedict-enable))

  (setq default-input-method "pyim")

  ;; 我使用全拼
  (setq pyim-default-scheme 'quanpin)

  ;; 设置 pyim 探针设置，这是 pyim 高级功能设置，可以实现 *无痛* 中英文切换 :-)
  ;; 我自己使用的中英文动态切换规则是：
  ;; 1. 光标只有在注释里面时，才可以输入中文。
  ;; 2. 光标前是汉字字符时，才能输入中文。
  ;; 3. 使用 M-j 快捷键，强制将光标前的拼音字符串转换为中文。
  (setq-default pyim-english-input-switch-functions
                '(pyim-probe-dynamic-english
                  pyim-probe-isearch-mode
                  pyim-probe-program-mode
                  pyim-probe-org-structure-template))

  (setq-default pyim-punctuation-half-width-functions
                '(pyim-probe-punctuation-line-beginning
                  pyim-probe-punctuation-after-punctuation))

  ;; 开启拼音搜索功能
  (pyim-isearch-mode 1)

  ;; 使用 popup-el 来绘制选词框, 如果用 emacs26, 建议设置
  ;; 为 'posframe, 速度很快并且菜单不会变形，不过需要用户
  ;; 手动安装 posframe 包。
  (setq pyim-page-tooltip 'posframe)
  ;; (setq pyim-page-tooltip 'popup)

  ;; 选词框显示5个候选词
  (setq pyim-page-length 5)

  :bind
  (("M-j" . pyim-convert-string-at-point) ;与 pyim-probe-dynamic-english 配合
   ("C-;" . pyim-delete-word-from-personal-buffer)))
#+end_src
* Org
#+begin_src emacs-lisp
(after! org
  (setq org-directory "~/org/")
  (setq org-agenda-files '("~/org/gtd/inbox.org"
                           ;;"~/org/gtd/todo.org"
                           "~/org/gtd/projects.org"))
  (setq org-capture-templates '(("t" "Todo [inbox]" entry
                               (file+headline "~/org/gtd/inbox.org" "Inbox")
                               "* TODO %i%?")
                              ("s" "Someday" entry
                               (file+headline "~/org/gtd/inbox.org" "Someday")
                               "* HOLD %i%? \n %U")
                              ("r" "Readings" entry
                               (file+headline "~/org/gtd/inbox.org" "Readings")
                               "* PROJ %i%? \n %U")))
  (setq org-log-done 'time)
  ;;(setq org-todo-keywords '((sequence "TODO(t)" "STRT(s)" "WAIT(w@)" "HOLD(h)" "|" "DONE(d!)" "KILL(k@)")
  ;;                          (sequence "[ ](T)" "[-](S)" "[?](W@)" "|" "[x](D)")))
  ;;(setq org-modules '(org-habit))
  )
#+end_src
* Plugins
** doom-modeline
#+begin_src emacs-lisp :tangle yes
(use-package! doom-modeline
  :hook (after-init . doom-modeline-mode)
  :config
  ;(set-face-attribute 'mode-line nil :family "Inconsolata" :height 140)
  ;(set-face-attribute 'mode-line-inactive nil :family "Inconsolata" :height 140)
  (setq inhibit-compacting-font-caches t
        doom-modeline-height 1
        doom-modeline-buffer-file-name-style 'auto
        doom-modeline-buffer-encoding nil))
#+end_src

** treemacs
#+begin_src emacs-lisp
(use-package treemacs
  :config
  (progn
    (setq treemacs-width 17))
  ;;(treemacs-resize-icons 11)
  )
#+end_src
** ivy-posframe
#+begin_src emacs-lisp :tangle no
(after! ivy
  ;; Causes open buffers and recentf to combined in ivy-switch-buffer
  (progn
    (setq ivy-posframe-display-functions-alist
        '((complete-symbol . ivy-posframe-display-at-point)
          (counsel-M-x     . ivy-posframe-display-at-frame-top-center)
          (t               . ivy-posframe-display-at-window-center))
        ivy-posframe-width (frame-width))
      (ivy-posframe-mode 1)
    )
)
#+end_src

** leetcode
#+begin_src emacs-lisp
(setq leetcode-prefer-language "cpp")
(setq leetcode-save-solutions t)
(setq leetcode-directory "~/Coding/leetcode")
#+end_src
** mu4e
#+begin_src emacs-lisp
(use-package mu4e
  ;;:ensure nil
  :defer 20
  :custom
  ;;(mu4e-update-interval 300)
  (mu4e-change-filenames-when-moving t)
  (mu4e-maildir "~/.mail")
  (mu4e-attachment-dir "~/Downloads")
  ;;(mu4e-get-mail-command "mbsync -c ~/.config/isync/***REMOVED***-mbsyncrc -a")

  ;; enable inline images
  (mu4e-view-show-images t)
  ;; every new email composition gets its own frame!
  (mu4e-compose-in-new-frame t)

  ;;(mu4e-compose-signature-auto-include nil)

  (mu4e-use-fancy-chars t)
  (mu4e-view-show-addresses t)
  (mu4e-view-show-images t)

  (setq mu4e-context-policy 'pick-first)
  (setq mu4e-compose-context-policy nil)
)

(with-eval-after-load 'mu4e
 (setq mu4e-get-mail-command "all_proxy='127.0.0.1:8889' mbsync -c ~/.config/isync/***REMOVED***-mbsyncrc -c ~/.config/isync/***REMOVED***-mbsyncrc -a")
 (setq mu4e-contexts
        `(
         ,(make-mu4e-context
          :name "private"
          :enter-func (lambda () (mu4e-message "Entering context private"))
          :leave-func (lambda () (mu4e-message "Leaving context private"))
          :match-func (lambda (msg)
                        (when msg
                          (mu4e-message-contact-field-matches
                           msg '(:from :to :cc :bcc) "***REMOVED***")))
          :vars '((user-mail-address . "***REMOVED***")
                  (user-full-name . "name")
                  (mu4e-sent-folder . "/***REMOVED***/[***REMOVED***]/Sent Mail")
                  (mu4e-trash-folder . "/***REMOVED***/[***REMOVED***]/Bin")
                  (mu4e-compose-signature . (concat "name\n" "From Emacs\n"))
                  (mu4e-compose-format-flowed . t)
                  (mu4e-maildir-shortcuts . ( ("/***REMOVED***/INBOX"            . ?i)
                                             ("/***REMOVED***/[***REMOVED***]/All Mail"  . ?a)
                                              ("/***REMOVED***/[***REMOVED***]/Sent Mail" . ?s)
                                              ("/***REMOVED***/[***REMOVED***]/Starred"   . ?r)
                                              ("/***REMOVED***/[***REMOVED***]/Bin"       . ?t)
                                              ("/***REMOVED***/[***REMOVED***]/Spam"   . ?v)
                                              ))))
         ,(make-mu4e-context
          :name "work"
          :enter-func (lambda () (mu4e-message "Entering context work"))
          :leave-func (lambda () (mu4e-message "Leaving context work"))
          :match-func (lambda (msg)
                        (when msg
                          (mu4e-message-contact-field-matches
                           msg '(:from :to :cc :bcc) "***REMOVED***")))
          :vars '((user-mail-address . "***REMOVED***")
                  (user-full-name . "name")
                  (mu4e-drafts-folder . "/***REMOVED***/Drafts")
                  (mu4e-refile-folder . "/***REMOVED***/Archive")
                  (mu4e-sent-folder . "/***REMOVED***/Sent Items")
                  (mu4e-trash-folder . "/***REMOVED***/Trash")
                  (mu4e-compose-signature . (concat "name\n" "From Emacs\n"))
                  (mu4e-compose-format-flowed . t)
                  (mu4e-maildir-shortcuts . ( ("/***REMOVED***/Inbox"            . ?i)
                                              ("/***REMOVED***/Drafts" . ?D)
                                              ("/***REMOVED***/Sent Items" . ?s)
                                              ("/***REMOVED***/Notifications" . ?n)
                                              ("/***REMOVED***/Junk E-mail" . ?j)
                                              ))))
         ))
 )
#+end_src

*** alert
#+begin_src emacs-lisp :tangle no
(use-package mu4e-alert
  :after mu4e
  :hook ((after-init . mu4e-alert-enable-mode-line-display)
         (after-init . mu4e-alert-enable-notifications))
  :config (mu4e-alert-set-default-style 'libnotify))
#+end_src
** yadm (with magit)
#+begin_src emacs-lisp
(require 'tramp)
(add-to-list 'tramp-methods
'("yadm"
  (tramp-login-program "yadm")
  (tramp-login-args (("enter")))
  (tramp-login-env (("SHELL") ("/usr/bin/fish")))
  (tramp-remote-shell "/usr/bin/fish")
  (tramp-remote-shell-args ("-c"))))
#+end_src
* Others
** [[https://github.com/hlissner/doom-emacs/issues/397][maximize when start up]]
#+begin_src emacs-lisp :tangle no
(add-to-list 'initial-frame-alist '(fullscreen . maximized))
#+end_src

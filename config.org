#+TITLE: Doom Emacs Configuration

Literate and modular Doom Emacs configuration.

* Table of contents :TOC:
- [[#about][About]]
- [[#tangle][Tangle]]
- [[#predefined][Predefined]]
- [[#completion][Completion]]
  - [[#corfu][corfu]]
  - [[#vertico][vertico]]
- [[#ui][UI]]
  - [[#extra-themes][Extra themes]]
  - [[#doom][doom]]
  - [[#doom-dashboard][doom-dashboard]]
  - [[#modeline][modeline]]
  - [[#popup][popup]]
  - [[#unicode][unicode]]
  - [[#others][Others]]
- [[#editor][Editor]]
  - [[#evil][evil]]
  - [[#format][format]]
  - [[#snippets][snippets]]
  - [[#fold][fold]]
- [[#emacs][Emacs]]
  - [[#dired][dired]]
  - [[#dirvish][dirvish]]
- [[#term][Term]]
  - [[#vterm][vterm]]
- [[#checkers][Checkers]]
  - [[#spell-checker][Spell checker]]
- [[#tools][Tools]]
  - [[#lookup][lookup]]
  - [[#lsp][lsp]]
  - [[#magit][magit]]
  - [[#pdf][pdf]]
- [[#lang][Lang]]
  - [[#latex][Latex]]
  - [[#lua][lua]]
  - [[#org][org]]
  - [[#python][python]]
  - [[#sh][sh]]
  - [[#yaml][yaml]]
  - [[#wolfram][wolfram]]
  - [[#markdown][markdown]]
  - [[#others-1][Others]]
- [[#email][Email]]
  - [[#mu4e][mu4e]]
- [[#app][App]]
  - [[#rss][rss]]
  - [[#everywhere][everywhere]]
- [[#other-packages][Other packages]]
  - [[#keycast][keycast]]
  - [[#screenshot][screenshot]]
  - [[#zotxt][zotxt]]
  - [[#figlet][figlet]]
  - [[#shell-command][shell-command+]]
  - [[#gptel][gptel]]
  - [[#tldr][tldr]]
  - [[#telega][telega]]
- [[#other-configs][Other configs]]
  - [[#projectile][projectile]]
  - [[#proxy][proxy]]
  - [[#windows-librewolf-in-wsl][Windows =Librewolf= in wsl]]
  - [[#insert-arxiv-links][insert arxiv links]]
  - [[#shortcuts][shortcuts]]

* About
The *conventions* of this org file:
- First level heading respect Doom's order

- Configured module goes to second level heading ::
  - Prerequisite packages tangled into [[file:packages.toml]] (=Arch= only)

  - Bootstrap scripts tangled to [[file:install.d/]]

  - Comment a module with [[kbd:][C-c ;]] at heading

- One line config goes into [[* Tangle]] ::
  Often a declare in [[file:init.el]]

* Tangle
[[file:init.el]]
#+begin_src emacs-lisp :tangle init.el :noweb tangle :shebang ";;; init.el -*- lexical-binding: t; -*-\n"
(doom!
 :input
 (chinese +rime +childframe)

 :completion
 <<completion>>

 :ui
 <<ui>>
 hl-todo
 indent-guides
 (ligatures +extra)
 nav-flash
 ophints
 (vc-gutter +pretty)
 (window-select +numbers)
 workspaces
 ;zen

 :editor
 <<editor>>
 ;file-templates
 ;multiple-cursors
 parinfer
 word-wrap

 :emacs
 <<emacs>>
 ;electric
 ;ibuffer
 (undo +tree)
 vc

 :term
 <<term>>

 :checkers
 <<checkers>>
 (syntax +childframe)

 :tools
 <<tools>>
 ;biblio
 debugger
 ;editorconfig
 (eval +overlay)
 ;upload

 :os
 ;tty

 :lang
 <<lang>>
 ;(cc +lsp)
 emacs-lisp

 :email
 <<email>>

 :app
 calendar
 <<app>>

 :config
 literate
 (default +bindings +smartparens))
#+end_src
*The order of modules in above list make sense*

Extra packages from [[https://melpa.org][MELPA]]
#+begin_src emacs-lisp :tangle packages.el :shebang ";; -*- no-byte-compile: t; -*-\n"
#+end_src

#+PROPERTY: header-args:emacs-lisp :results none
Default tangle to [[file:config.el]]
#+begin_src emacs-lisp :shebang ";;; $DOOMDIR/config.el -*- lexical-binding: t; -*-\n"
(setq user-full-name "fakeGenius")
#+end_src

Default install all packages in [[file:packages.toml]]
#+PROPERTY: header-args:toml :tangle packages.toml
#+begin_src toml
enable_default=true
#+end_src

* Predefined
#+begin_src emacs-lisp
(setq IS-WSL (string-match "WSL" (shell-command-to-string "uname -a")))
#+end_src

#+begin_src emacs-lisp
(defun +my/is-utility-daemon ()
  "If current session run from daemon called `utility`."
  (and (daemonp) (boundp 'server-name) (string= server-name "utility")))
#+end_src

[[https://stackoverflow.com/a/24357106][How to append multiple elements to a list in Emacs lisp - Stack Overflow]]
#+begin_src emacs-lisp
(defun +my/append-to-list (list-var elements)
  "Append ELEMENTS to the end of LIST-VAR.

change to no return value
The return value is the new value of LIST-VAR."
  (unless (consp elements)
    (error "ELEMENTS must be a list"))
  (let ((list (symbol-value list-var)))
    (if list
        (setcdr (last list) elements)
      (set list-var elements))))
  ;(symbol-value list-var))
#+end_src

#+begin_src emacs-lisp
(defun +my/reverse-words (beg end)
  "Reverse the order of words in region."
  (interactive "*r")
  (apply
   'insert
   (reverse
    (split-string
     (delete-and-extract-region beg end) "\\b"))))
#+end_src

* Completion
** corfu
#+begin_src toml
[corfu]
packages=["words"]
#+end_src

#+begin_src emacs-lisp :tangle no :noweb-ref completion
(corfu +icons +dabbrev)
#+end_src

#+begin_src emacs-lisp
(after! cape
  ;; cape-dict trigger easily
  (setq cape-dict-limit 233)

  ;; orderless completion in dict makes me crazy
  (advice-add 'cape-dict :around
              (defun +my/cape-dict (orig-fun &rest args)
                (let ((completion-styles '(basic)))
                  (apply orig-fun args)))))

;; (add-hook! org-mode
;;   (setq-local completion-at-point-functions (list (cape-capf-super #'yasnippet-capf
;;                                                                    #'cape-dabbrev #'cape-dict))))
#+end_src

#+begin_src emacs-lisp
(setq corfu-on-exact-match 'show)
(map! :after cape :i "C-c p" cape-prefix-map)
#+end_src

** COMMENT company
+ [ ] fix scroll bar width

=company-ispell= needs word dictionary
#+begin_src toml
[company]
packages=["words"]
#+end_src

#+begin_src emacs-lisp :tangle no :noweb-ref completion
(company +childframe)
#+end_src

** vertico
#+begin_src emacs-lisp :tangle no :noweb-ref completion
(vertico +icons +childframe)
#+end_src

[[https://github.com/tumashu/vertico-posframe/issues/16][tumashu/vertico-posframe#16 Disable vertico-posframe when Emacs runs in terminal]]
#+begin_src emacs-lisp
(use-package! vertico-posframe
  :hook (vertico-mode . vertico-multiform-mode)
  :config
  (remove-hook 'vertico-mode #'vertico-posframe-mode)
  (setq vertico-multiform-commands
      '((consult-line
         posframe
         (vertico-posframe-fallback-mode . vertico-buffer-mode))
        (t posframe))))
#+end_src

* UI
** Extra themes
#+begin_src emacs-lisp :tangle packages.el
(package! ewal-doom-themes)
#+end_src

#+begin_src emacs-lisp
(use-package! ewal-doom-themes)
#+end_src

load wal theme from command line
#+begin_src fish :tangle no
emacs-client -e "(load-theme 'ewal-doom-themes t)"
#+end_src

** doom
#+begin_src emacs-lisp :tangle no :noweb-ref ui
doom
#+end_src

#+begin_src toml
[doom]
packages=[
    "ttf-lxgw-wenkai",      # fixed-patch-serif font
    "ttf-sarasa-gothic-sc", # variable-pitch-font
    "ttf-firacode-nerd"     # for org section 1-2 and lambda
]
#+end_src

*** Themes
restore last selected theme
#+begin_src emacs-lisp
(defun load-in-doom-dir (file-name &optional dir)
  (let* ((dir (or dir doom-user-dir))
         (full-name (expand-file-name file-name dir)))
    (if (file-exists-p full-name)
        (load full-name))))

(load-in-doom-dir "theme.el" doom-cache-dir)
#+end_src

difficult to choose theme? random it
#+begin_src emacs-lisp
(defun +my/random-theme ()
  (interactive)
  (let* ((all-themes (custom-available-themes))
         (next-theme (nth (random (length all-themes)) all-themes)))
    (consult-theme next-theme)))

(map! :leader
      (:prefix "t"
       :desc "Random theme" "t" #'+my/random-theme))
#+end_src

track current theme for later load
#+begin_src emacs-lisp
(defun +my/save-theme (prev new-theme &rest args)
  (let
      ((theme-config-file (expand-file-name "theme.el" doom-cache-dir)))
    (write-region
     (format "(setq doom-theme '%s)\n" new-theme) nil theme-config-file)
    (message "Switch to theme: %s" new-theme)))

(add-variable-watcher 'doom-theme #'+my/save-theme)
#+end_src

*** Fonts
*bold* /italic/ _underline_ +stride+

Set default font size, =WSL= currently not aware dpi settings in
[[file:~/.Xresources]] while float size makes it work on Linux.
[[https://github.com/doomemacs/doomemacs/issues/6131][doomemacs/doomemacs#6131 DPI settings are not respected by "setq doom-font"]]
#+begin_src emacs-lisp
(setq +my/font-size (* (if IS-WSL 2 1) 12.0))

(setq doom-font (font-spec :family "Maple NF" :size +my/font-size)
      doom-serif-font (font-spec :family "LXGW WenKai Mono" :weight 'bold :size +my/font-size)
      doom-variable-pitch-font (font-spec :family "Sarasa Gothic SC" :size +my/font-size)
      ;; doom-emoji-font (font-spec :family "Noto Color Emoji")
      doom-symbol-font (font-spec :family "FiraCode Nerd Font"))
#+end_src
Prefer italic comment font

- [ ] fix italic not applied on vertico pos-frame
#+begin_src emacs-lisp
(defun +my/set-comment-font ()
  (set-face-font 'font-lock-comment-face (font-spec :family "Maple NF" :slant 'italic)))

(add-hook 'doom-load-theme-hook #'+my/set-comment-font 90)
#+end_src

Load font setting when (re)load theme
#+begin_src emacs-lisp :tangle no
(add-hook 'doom-load-theme-hook #'doom-init-fonts-h)
#+end_src

** COMMENT emacs-gfs
- [[https://emacs.stackexchange.com/questions/29511/text-scale-for-all-faces-in-buffer][text-scale for all faces in buffer - Emacs Stack Exchange]]
- [[https://so.nwalsh.com/2020/01/08-gfs][Emacs “Global Face Scaling”]]
- [[https://github.com/doomemacs/doomemacs/issues/4211][doomemacs/doomemacs#4211 Make `doom/increase-font-size` to adjust more fonts]]

#+begin_src emacs-lisp :tangle packages.el
(package! emacs-gfs
  :recipe (:host github
           :repo "ndw/emacs-gfs"))
#+end_src
Conflict with [[var:nerd-icons-scale-factor]]

Visual effect preview
#+begin_src python :tangle no
Emacs is the advanced, extensible, customizable, self-documenting editor.
# Emacs is the advanced, extensible, customizable, self-documenting editor.
# Emacs 是一款可扩展可自定义且自带文档的高级editor.
#+end_src

- [ ] display =text-scale-mode-amount= in mode-line
#+begin_src emacs-lisp
;; set a rescale font to cjk charset fonts,
;; so no explicit font size is needed
;; rescale doom-font cause bold font size != regular
(dolist (rescales '(("Ubuntu" . 1.05)
                    ("mononoki" . 1.00)
                    ("Cascadia" . 0.95)
                    ("Sarasa" . 0.95)
                    ("Symbols" . 0.85)
                    ("Kosefont" . 1.10)
                    ("小濑字体" . 1.10)))
  (push rescales face-font-rescale-alist))

(use-package! emacs-gfs
  :config
  (setq gfs/default-face-height 140)
  (setq gfs/resizeable-ignore-faces nil)
  :bind
  (:map evil-normal-state-map
        ("C--" . gfs/shrink-faces)
        ("C-=" . gfs/magnify-faces)))
#+end_src

- [ ] fix font scale in big-font/zen mode
  [[https://emacs.stackexchange.com/a/47092][How to automatically remove a hook provided by a minor mode after disabling t...]]

** doom-dashboard
#+begin_src emacs-lisp :tangle no :noweb-ref ui
doom-dashboard
#+end_src

- [[https://discourse.doomemacs.org/t/how-to-change-your-splash-screen/57][How to change your splash screen - Configuration - Doom Emacs Discourse]]
- [[https://stackoverflow.com/a/25158644][elisp - Read from a file into a Emacs lisp list - Stack Overflow]]

#+begin_src emacs-lisp
(setq fancy-splash-image (expand-file-name "assets/bitmap_512x.png" doom-user-dir))
#+end_src

#+begin_src emacs-lisp :tangle no
(defun my-weebery-is-always-greater (splash-file-name)
  (let* ((banner (s-split "\n" (f-read splash-file-name) t))
         (longest-line (apply #'max (mapcar #'length banner))))
    (put-text-property
     (point)
     (dolist (line banner (point))
       (insert (+doom-dashboard--center
                +doom-dashboard--width
                (concat line (make-string (max 0 (- longest-line (length line))) 32)))
               "\n"))
     'face 'doom-dashboard-banner)))

(let ((splash-file-name (expand-file-name "assets/bcc.txt" doom-user-dir)))
  (if (file-exists-p splash-file-name)
    (setq +doom-dashboard-ascii-banner-fn (lambda () (my-weebery-is-always-greater splash-file-name)))))
#+end_src

** modeline
#+begin_src toml
[modeline]
packages=["otf-comicshanns-nerd"]
#+end_src

#+begin_src emacs-lisp :tangle no :noweb-ref ui
modeline
#+end_src

custom doom-modeline font, valid on startup and persist after [[fn:doom/reload-theme]]
#+begin_src emacs-lisp
(defun +my/set-mode-line-font ()
  (set-face-font 'mode-line (font-spec :family "ComicShannsMono Nerd Font" :size (+ +my/font-size 1.5)))
  (set-face-font 'mode-line-inactive (font-spec :family "ComicShannsMono Nerd Font" :size (+ +my/font-size 1.5))))

(add-hook 'doom-load-theme-hook #'+my/set-mode-line-font 90)
#+end_src

[[https://github.com/seagle0128/doom-modeline/issues/194][one single modeline when split]]

** popup
#+begin_src emacs-lisp :tangle no :noweb-ref ui
(popup +defaults)
#+end_src

#+begin_src emacs-lisp
(setq split-width-threshold 120)
#+end_src

Prefer stack at right for following info windows, since they are fill-columned
#+begin_src emacs-lisp
(set-popup-rules!
  '(("^\\*\\([Hh]elp\\|Apropos\\)"  ; help messages
     :side right :size 80 :slot 2 :vslot -8 :select t)
    ("^\\*\\(?:Wo\\)?Man "
     :side right :size 80 :vslot -6 :select t)
    ("^\\*info\\*$"
     :side right :size 80 :slot 2 :vslot 2 :select t)))
#+end_src

** unicode
#+begin_src toml
[unicode]
packages=[
    "quivira",              # org ellipsis ⤵
    "ttf-sarasa-gothic-sc", # ￢
    "ttf-dejavu-nerd",      # org section 3 ✸
    "tex-gyre-fonts"        # ∈
]
#+end_src

#+begin_src emacs-lisp :tangle no :noweb-ref ui
unicode
#+end_src

*** change font by block
To get unicode block name for a character, [[kbd:SPC h ']] on it to get it's lexical
code, and search in [[https://en.wikipedia.org/wiki/Plane_(Unicode)][Plane (Unicode) - Wikipedia]]

Doom's way of change unicode font, but it will be shadowed by
[[fn:doom-init-fonts-h]] if [[var:doom-symbol-font]] is set.
#+begin_src emacs-lisp :tangle no
(after! unicode-fonts
  (dolist (unicode-block '("Letterlike Symbols" "Supplemental Arrows-B"))
    (push "Quivira" (cadr (assoc unicode-block unicode-fonts-block-font-mapping)))))
#+end_src

Add to [[var:after-setting-font-hook]] not work well, font display diffs after
[[fn:doom/reload-theme]]
#+begin_src emacs-lisp :tangle no
(defun +my/unicode-fonts ()
  (dolist (unicode-block '("Letterlike Symbols" "Supplemental Arrows-B"))
    (push "Quivira" (cadr (assoc unicode-block unicode-fonts-block-font-mapping)))))
(add-hook 'after-setting-font-hook #'+my/unicode-fonts 60)
#+end_src

Add hook but with [[fn:set-fontset-font]] succeed
#+begin_src emacs-lisp
(defun +my/unicode-fonts ()
  (dolist (range '((#x2900 . #x297f))) (set-fontset-font t range "Quivira"))
  (dolist (chars '("￢")) ; keywords in code ligatures
     (set-fontset-font t (string-to-char chars) "Sarasa Gothic SC"))
  (dolist (chars '("∈" "∉" "⋃" "∖" "⨂"))
     (set-fontset-font t (string-to-char chars) "TeX Gyre Adventor"))
  (dolist (chars '("𝔹" "ℕ" "ℝ" "𝕊" "ℤ"))
     (set-fontset-font t (string-to-char chars) "Quivira")))
(add-hook 'after-setting-font-hook #'+my/unicode-fonts 60)
#+end_src
see more in [[https://idiocy.org/emacs-fonts-and-fontsets.html][Emacs, fonts and fontsets]]

*** Chinese fonts
- [[https://rongcuid.github.io/posts/2021-04-02-Doom-Emacs-CJK.html][Rongcui Dong's Site - 如何在 Doom Emacs 中设置中文]]
- [[https://github.com/hick/emacs-chinese#org-的中文问题][GitHub - hick/emacs-chinese: Emacs 相关中文问题以及解决方案]]

#+begin_src emacs-lisp
(defun +my/cjk-font ()
  (dolist (charset '(han))
    (set-fontset-font (frame-parameter nil 'font) charset
                      (font-spec :family "Maple SC NF"))))

(add-hook 'after-setting-font-hook #'+my/cjk-font)
#+end_src

** Others
#+begin_src emacs-lisp
(after! nerd-icons
  (setq nerd-icons-scale-factor 0.9))
#+end_src

Transparency
#+begin_src emacs-lisp
(set-frame-parameter (selected-frame) 'alpha '(85 . 50))
(add-to-list 'default-frame-alist '(alpha . (85 . 50)))

(defun toggle-transparency ()
  (interactive)
  (let ((alpha (frame-parameter nil 'alpha)))
    (set-frame-parameter
     nil 'alpha
     (if (eql (cond ((numberp alpha) alpha)
                    ((numberp (cdr alpha)) (cdr alpha))
                    ;; Also handle undocumented (<active> <inactive>) form.
                    ((numberp (cadr alpha)) (cadr alpha)))
              100)
         '(85 . 50) '(100 . 100)))))

(map! :leader
      (:prefix "t"
       :desc "Toggle transparency"    "T" #'toggle-transparency))
#+end_src

Line numbers
#+begin_src emacs-lisp
(setq display-line-numbers-type nil)
#+end_src

notify initial time
#+begin_src emacs-lisp
(defun notify-init-time ()
  (require 'notifications)
  (notifications-notify
   :image-path (expand-file-name "assets/notify.jpg" doom-user-dir)
   :title "Daemon"
   :sound-name "bell"
   :body (format "Initialed in %0.3fs" doom-init-time)))

(if (+my/is-utility-daemon)
  (add-hook 'doom-init-ui-hook #'notify-init-time))
#+end_src

* Editor
** evil
#+begin_src emacs-lisp :tangle no :noweb-ref editor
(evil +everywhere)
#+end_src

#+begin_src emacs-lisp
(after! evil
  (setq evil-kill-on-visual-paste nil)
  ;; Disabling cursor movement when exiting insert mode
  (setq evil-move-cursor-back nil))
#+end_src

** format
#+begin_src emacs-lisp :tangle no :noweb-ref editor
(format +onsave)
#+end_src

- [ ] Add packages from headings in [[* Lang]] section

#+begin_src toml
[format]
packages=[
    "prettier",
    "shfmt",
    "clang-format-static-bin",
    "python-black"
]
#+end_src

** snippets
#+begin_src emacs-lisp :tangle no :noweb-ref editor
snippets
#+end_src

#+begin_src emacs-lisp
(setq +snippets-dir
      (expand-file-name "~/Documents/Templates/snippets"))
#+end_src

** fold
#+begin_src emacs-lisp :tangle no :noweb-ref editor
fold
#+end_src

work for =org-ellipsis= and fold in code mode
#+begin_src emacs-lisp
(setq +fold-ellipsis "⤵")
#+end_src

* Emacs
** dired
#+begin_src emacs-lisp :tangle no :noweb-ref emacs
(dired +dirvish +icons)
#+end_src

#+begin_src emacs-lisp
(after! dired
  (setq delete-by-moving-to-trash t)
  ;; (dired-kill-when-opening-new-dired-buffer t)
  (setq dired-listing-switches
        "-l --almost-all --sort=time --human-readable --time-style=long-iso --group-directories-first --no-group")
  ;; Dirvish respects all the keybindings in `dired-mode-map'
  (map! :map dired-mode-map
        :n "e" #'dired-create-empty-file
        :n "." #'dired-omit-mode))
#+end_src

no =dired-mode= buffers in [[kbd:SPC b b]]
#+begin_src emacs-lisp
(remove-hook 'doom-real-buffer-functions 'doom-dired-buffer-p)
#+end_src

#+begin_src emacs-lisp
(after! dired-x
  ;; Make dired-omit-mode hide all "dotfiles"
  (setq dired-omit-files
        (concat dired-omit-files "\\|^\\..*$")))
#+end_src

Additional syntax highlighting for dired
#+begin_src emacs-lisp
(after! diredfl
  (set-face-attribute 'diredfl-dir-name nil :bold t))
#+end_src

** dirvish
#+begin_src toml
[dirvish]
packages=[
    "fd",
    "imagemagick",
    # "ffmpegthumbnailer", # may require pipewire-jack
    "mediainfo",
    # "tar", # include in =base=
    "unzip"
]
#+end_src

#+begin_src emacs-lisp
(use-package! dirvish
  :commands (dirvish dirvish-side)
  :init
  (map!
   (:leader
    :desc "dirvish" "-" #'dirvish
    :prefix "o"
    :desc "dirvish-side" "s" #'dirvish-side))
  :custom
  (dirvish-side-width 25)
  (dirvish-quick-access-entries
   '(("h" "~/"                          "Home")
     ("d" "~/Downloads/"                "Downloads")
     ("c" "~/.config/"                  "Config")
     ("D" "~/Documents/"                "Documents")
     ("l" "~/lib/"                      "Personal Library")
     ("L" "~/.local/lib/"               "Library")
     ("m" "/mnt/"                       "Mounts")
     ("n" "~/.Nextcloud/"               "Nextcloud")
     ("p" "~/Pictures/"                 "Pictures")
     ("t" "~/.local/share/Trash/files/" "TrashCan")))
  :config
  (dirvish-side-follow-mode)
  (appendq! dirvish-attributes '(collapse git-msg))
  (map!
   :map dirvish-mode-map
   :gn "M-l"  #'dirvish-ls-switches-menu
   :gn "M-m"  #'dirvish-mark-menu
   :gn "M-v"  #'dirvish-vc-menu
   :n "g TAB" #'dirvish-emerge-toggle-current-group
   :gn "o"    #'dirvish-quicksort
   :gn "y"    #'dirvish-yank-menu))
#+end_src

Replace =/home/$user= to =~=
#+begin_src emacs-lisp
(defun +my/home-to-tide (file)
  "Replace /home/$user in FILE to ~."
  (let ((home (getenv "HOME"))
        (file-name (concat file)))
    (if (s-starts-with? home file-name)
        (s-replace home "~" file-name)
      file-name)))

(defun +my/dirvish-copy-file-path (&optional multi-line)
  "Copy filepath of marked files.
If MULTI-LINE, make every path occupy a new line."
  (interactive "P")
  (let* ((files (mapcar #'file-local-name (dired-get-marked-files)))
         (related-files (mapcar #'+my/home-to-tide files))
         (names (mapconcat #'identity related-files (if multi-line "\n" " "))))
    (dirvish--kill-and-echo (if multi-line (concat "\n" names) names))))

(after! dirvish
 (advice-add 'dirvish-copy-file-path :override #'+my/dirvish-copy-file-path))
#+end_src

* Term
** vterm
#+begin_src toml
[vterm]
packages=[
    "libvterm",
    "cmake",
    "inetutils" # =hostname= command
]
#+end_src

#+begin_src emacs-lisp :tangle no :noweb-ref term
vterm
#+end_src

tweak from ~doom doctor~
#+begin_src emacs-lisp :tangle no
(setq shell-file-name (executable-find "bash"))
(setq-default vterm-shell (executable-find "fish"))
(setq-default explicit-shell-file-name (executable-find "fish"))
#+end_src

[[https://emacs.stackexchange.com/questions/24330/have-a-function-to-disable-close-confirmation-on-terms-work-on-all-terms-but-sh][have a function to disable close confirmation on terms. work on all terms but...]]
#+begin_src emacs-lisp
(defun set-no-process-query-on-exit ()
  (let ((proc (get-buffer-process (current-buffer))))
    (when (processp proc)
      (set-process-query-on-exit-flag proc nil))))

(after! vterm
  (if (+my/is-utility-daemon)
      (add-hook 'vterm-mode-hook #'set-no-process-query-on-exit)))
#+end_src

#+begin_src emacs-lisp
(defun +my/vterm-switch ()
  "Switch to vterm buffer in `Term' workspace.
If `Term' workspace not exist, create it.
If no vterm buffer in `Term' workspace, create it."
  (interactive)
  (+workspace-switch "Term" t)
  (let ((vterm-buffer
         ;; return first vterm buffer in `Term' workspace
         (catch 'foo
           (dolist (buffer (+workspace-buffer-list))
             (let ((bn (buffer-name buffer)))
               (when (and bn
                          ;; https://stackoverflow.com/a/2238589
                          (with-current-buffer bn
                            (eq major-mode 'vterm-mode)))
                 (throw 'foo bn))))))
        (display-buffer-alist))
    (if vterm-buffer
        (switch-to-buffer vterm-buffer)
      ;; create vterm buffer if not exist
      (+vterm/here t))))

(map! :leader
 :prefix "TAB"
 :desc "Switch to vterm buffer" "v" #'+my/vterm-switch)
#+end_src

#+begin_src emacs-lisp
(defun +my/vterm-cd-project-root ()
  (interactive)
  (vterm-send-string "cd $PROOT")
  (vterm-send-return))

(after! vterm
  (setq vterm-buffer-name-string "%s - vterm"
        vterm-ignore-blink-cursor nil)
  (map! :leader
        (:prefix "o"
         ;; vterm to current file directory (not project root)
         ;; use `C-Return' to project root
         :desc "Toggle vterm popup" "t" (cmd!! #'+vterm/toggle t)
         :desc "Open vterm here" "T" (cmd!! #'+vterm/here t)))
  ;; TODO fixed-pitch in bpytop like
  ;; (add-hook 'vterm-mode-hook
  ;;           (lambda ()
  ;;             (set (make-local-variable 'buffer-face-mode-face) 'fixed-pitch
  ;;                  (buffer-face-mode t))))
  (define-key vterm-mode-map (kbd "M-q") #'vterm-send-escape)
  (define-key vterm-mode-map [ (control return) ] #'+my/vterm-cd-project-root)
  (dolist (num (number-sequence 0 9))
      (define-key vterm-mode-map (kbd (format "M-%d" num)) nil)))
#+end_src

*** save vterm buffers with command history
[[https://github.com/akermu/emacs-libvterm/issues/666][akermu/emacs-libvterm#666 Integrate with desktop-save-mode]]
[[https://bmag.github.io/2015/12/26/desktop.html][Desktop-Save Mode]]
[[https://github.com/Bad-ptr/persp-mode.el#custom-saveload-buffer-function-example][GitHub - Bad-ptr/persp-mode.el: named perspectives(set of buffers/window conf...]]
[[doom:modules/ui/workspaces/config.el::263][examples in doom config]]

No text properties saved.
#+begin_src emacs-lisp
(after! persp-mode
  ;; vterm
  (persp-def-buffer-save/load
   :mode 'vterm-mode :tag-symbol 'def-vterm-buffer
   :save-vars '(default-directory)
   :save-function (lambda (buf tag vars)
                    (list tag (buffer-name buf) vars
                          (string-trim-right (buffer-string))))
                          ;; no face and other text properties saved
                          ;; (string-trim-right (buffer-substring-no-properties (point-min) (point-max)))))
   :load-function (lambda (savelist &rest _)
                    (cl-destructuring-bind (_ buf-name vars buf-string) savelist
                      (let ((default-directory (alist-get 'default-directory vars)))
                        (require 'vterm)
                        (with-current-buffer (get-buffer-create buf-name)
                          (insert buf-string)
                          (vterm-mode)))))))
#+end_src

* Checkers
** Spell checker
#+begin_src toml
[spell]
packages=["aspell", "aspell-en"]
#+end_src

#+begin_src emacs-lisp :tangle no :noweb-ref checkers
(spell +flyspell
       +everywhere)
#+end_src

** COMMENT grammar
#+begin_src toml
[grammar]
packages=["languagetool"]
#+end_src

#+begin_src emacs-lisp :tangle no :noweb-ref checkers
grammar
#+end_src

disable annoying =writegood-mode=
#+begin_src emacs-lisp :tangle packages.el
(package! writegood-mode
  :disable t)
#+end_src

* Tools
** COMMENT editorconfig
#+begin_src toml
[editorconfig]
packages=["emacs-editorconfig-git"]
#+end_src

#+begin_src emacs-lisp :tangle no :noweb-ref tools
editorconfig
#+end_src

** COMMENT docker
#+begin_src toml
[docker]
packages=["dockfmt"]
#+end_src

#+begin_src emacs-lisp :tangle no :noweb-ref tools
docker
#+end_src

** lookup
#+begin_src toml
[lookup]
packages=["sqlite", "wordnet-cli"]
#+end_src

#+begin_src emacs-lisp :tangle no :noweb-ref tools
(lookup
 +docsets
 +dictionary)
#+end_src

#+begin_src emacs-lisp
(add-to-list '+lookup-provider-url-alist '("Brave" "https://search.brave.com/search?q=%s"))
#+end_src

** lsp
#+begin_src emacs-lisp :tangle no :noweb-ref tools
(lsp +eglot)
#+end_src

** magit
#+begin_src emacs-lisp :tangle no :noweb-ref tools
magit
#+end_src

[[https://github.com/TheLocehiliosan/yadm][GitHub - TheLocehiliosan/yadm: Yet Another Dotfiles Manager]]
[[https://www.reddit.com/r/emacs/comments/gjukb3/yadm_magit/][reddit:yadm+magit]]

#+begin_src emacs-lisp
(use-package! tramp
  :commands yadm-status
  :init
  (defun yadm-status ()
    (interactive)
    (magit-status "/yadm::"))
  (map! :leader
        (:prefix "g"
         :desc "yadm-status" "a" #'yadm-status))
  :config
  (add-to-list 'tramp-methods
               '("yadm"
                 (tramp-remote-shell "/bin/bash")
                 (tramp-remote-shell-args ("-c"))
                 (tramp-login-program "yadm")
                 (tramp-login-args (("enter"))))))
#+end_src

If you use =fish= shell, you may change ~fish_prompt~. see [[file:~/.config/fish/config.fish]]

[[fn:magit-stage]] (visually stage hunks) may not work in =yadm=, which cause emacs
to hang, use [[kbd:E s]] ([[fn:magit-ediff-stage]]) instead.
[[https://github.com/magit/magit/issues/719][magit/magit#719 Magit process hangs when trying to stage a hunk]]

** pdf
#+begin_src emacs-lisp :tangle no :noweb-ref tools
pdf
#+end_src

default pdf viewer in emacs
[[http://alberto.am/2020-04-11-pdf-tools-as-default-pdf-viewer.html][pdf-tools as the default PDF viewer in Emacs]]

#+begin_src emacs-lisp
(after! pdf-tools
  (setq-default pdf-view-display-size 'fit-width))

(after! latex (setq +latex-viewers '(pdf-tools evince okular)))

;; to have the buffer refresh after compilation
(add-hook 'TeX-after-compilation-finished-functions
          #'TeX-revert-document-buffer)

;; always use midnight view mode
(add-hook! 'pdf-view-mode-hook #'pdf-view-midnight-minor-mode)
#+end_src

Selection in =pdf-tools= when evil mode enabled
[[https://github.com/doomemacs/doomemacs/issues/6286#issuecomment-1870216583][doomemacs/doomemacs#6286 `evil` interfering with PDF text selection/highlight...]]

* Lang
** COMMENT julia
#+begin_src toml
[julia]
packages=["julia-bin"]
#+end_src

#+begin_src emacs-lisp :tangle no :noweb-ref lang
(julia +lsp +tree-sitter)
#+end_src

If we want table output without ~:results output~
#+begin_src julia :tangle no
import Pkg; Pkg.add("DataFrames")
import Pkg; Pkg.add("CSV")
#+end_src

also one need to enable [[doom-module::lang ess]], see
[[https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-julia.html][Julia Code Blocks in Babel]]

** Latex
#+begin_src toml
[latex]
packages=["miktex", "texlab"]
#+end_src

#+begin_src emacs-lisp :tangle no :noweb-ref lang
(latex
 +lsp
 +fold
 +cdlatex)
#+end_src

#+begin_src emacs-lisp
(after! evil-tex
  (setq evil-tex-include-newlines-in-envs nil
        evil-tex-select-newlines-with-envs nil))
#+end_src

=cdlatex=
#+begin_src emacs-lisp
(map! :map cdlatex-mode-map
  :i "TAB" #'cdlatex-tab)
#+end_src

[[https://github.com/minad/cape?tab=readme-ov-file#super-capf---merging-multiple-capfs][GitHub - minad/cape: 🦸cape.el - Completion At Point Extensions]]
#+begin_src emacs-lisp
(setq-hook! 'LaTeX-mode-hook completion-at-point-functions
            (list (cape-capf-super #'cape-dabbrev #'cape-dict)))
#+end_src

clean intermediate files
#+begin_src emacs-lisp
(after! latex
  (setq LaTeX-clean-intermediate-suffixes (delete "\\.synctex\\.gz"  LaTeX-clean-intermediate-suffixes)
        LaTeX-clean-intermediate-suffixes (append LaTeX-clean-intermediate-suffixes (list "\\.dvi" "\\.fdb_latexmk"))
        TeX-clean-confirm nil))
#+end_src

add =XeTeX= mode in =TeX/LaTeX=
[[https://tex.stackexchange.com/a/21205][emacs - AUCTeX and XeTeX - TeX - LaTeX Stack Exchange]]
#+begin_src emacs-lisp
(after! tex
  (add-to-list 'TeX-command-list
               '("XeLaTeX" "%`xelatex%(mode) %(extraopts) %S%(PDFout)%' %t" TeX-run-TeX nil t)))
#+end_src

** lua
#+begin_src toml
[lua]
packages=["lua-language-server"]
#+end_src

#+begin_src emacs-lisp :tangle no :noweb-ref lang
(lua +lsp)
#+end_src

lsp support
#+begin_src emacs-lisp
(after! lua-mode
  (setq lsp-clients-lua-language-server-bin "/usr/bin/lua-language-server")
  (setq lsp-clients-lua-language-server-main-location "/usr/lib/lua-language-server/bin/main.lua")
  (setq lsp-clients-lua-language-server-args '("-E" "--logpath" "/tmp/lua-language-server"))
  ;; (lsp-clients-lua-language-server-command '("lua-language-server" "-E"))
  (setq lsp-clients-lua-language-server-command nil))
#+end_src

ligatures
#+begin_src emacs-lisp
(after! lua-mode
  (set-ligatures! 'lua-mode
    :def "function"
    :return "return"
    :and "and"
    :or "or"
    :not "not"
    :true "true"
    :false "false"
    :for "for"))
#+end_src

** org
#+begin_src toml
[org]
packages=[
    "xclip",
    "maim",
    "graphviz"
]
#+end_src

#+begin_src emacs-lisp :tangle no :noweb-ref lang
(org
 +hugo
 +dragndrop
 +jupyter
 +noter
 +present
 +pandoc
 +pretty
 +roam2)
#+end_src

*** COMMENT org superstar
#+begin_src emacs-lisp
(package! org-superstar :disable t)
#+end_src

#+begin_src emacs-lisp
(setq org-highlight-latex-and-related '(native))
#+end_src

[2024-04-19 Fri]
wait for new org module bump
[[https://github.com/doomemacs/doomemacs/commit/5b7d6763f8f899e556c7c5d89556bf39a1c81f64][revert: org · doomemacs/doomemacs@5b7d676 · GitHub]]

*Never* enable =+pretty=
[[https://github.com/doomemacs/doomemacs/commit/68136f7ff9444504a5dac93c80e0bca600ae4e1a][lang/org: add +pretty flag; move org-superstar · doomemacs/doomemacs@68136f7 ...]]

It cause many other hooks (like [[var:sh-mode-local-vars-hook]]) called when opening
org file (just because you have that lang src block inside).

*** agenda
#+begin_src emacs-lisp
(setq org-directory "~/Documents/org/"
      org-agenda-files '("agenda/todos.org" "agenda/projects.org")
      org-agenda-start-with-log-mode t
      org-agenda-prefix-format '((agenda . " %i %-12:c%?-12t% s")
                                 (todo   . " ")
                                 (tags   . " %i %-12:c")
                                 (search . " %i %-12:c"))
      org-log-done 'time
      org-log-into-drawer t
      org-startup-numerated t
      org-image-actual-width 400
      org-duration-format '((special . h:mm))
      org-startup-with-inline-images t
      org-refile-targets '(("archive.org" :maxlevel . 1)
                           ("projects.org")))
#+end_src

[[https://emacs.stackexchange.com/a/7840][saving - How do I automatically save org-mode buffers? - Emacs Stack Exchange]]
#+begin_src emacs-lisp
(after! org
  ;;(org-clock-persist 'history)
  (org-clock-persistence-insinuate)
  (advice-add 'org-refile :after 'org-save-all-org-buffers)
  (advice-add 'org-agenda-quit :before 'org-save-all-org-buffers))
#+end_src

custom agenda view from
[[https://www.labri.fr/perso/nrougier/GTD/index.html#org9f2e38c][Get Things Done with Emacs]]
#+begin_src emacs-lisp
(setq org-agenda-custom-commands
      '(("g" "Get Things Done (GTD)"
         ((agenda ""
                  ((org-agenda-skip-function
                    '(org-agenda-skip-entry-if 'deadline))
                   (org-deadline-warning-days 0)
                   (org-agenda-start-day "-1d")
                   (org-agenda-span 4)))
          (todo "STRT"
                ((org-agenda-skip-function
                  '(org-agenda-skip-entry-if 'deadline))
                 (org-agenda-prefix-format "  %i %-12:c [%e] ")
                 (org-agenda-overriding-header "\nTasks\n")))
          (tags-todo "inbox"
                     ((org-agenda-prefix-format "  %?-12t% s")
                      (org-agenda-overriding-header "\nInbox\n")))
          (tags "CLOSED>=\"<today>\""
                ((org-agenda-overriding-header "\nCompleted today\n")))))))
#+end_src

#+begin_src emacs-lisp
(after! org-capture
  (setq org-capture-templates
        `(("i" "Inbox" entry (file "agenda/todos.org")
           "* TODO %?\n%U\n%i" :empty-lines 1 :prepend t)
          ("@" "Inbox [mu4e]" entry (file "agenda/todos.org")
           "* TODO Reply to \"%a\"\n%U\n%i" :empty-lines 1 :prepend t)
          ("n" "Inbox [note]" entry (file "agenda/todos.org")
           "* TODO [%a] %? %^G\n%U\n%i" :empty-lines 1 :prepend t))))
#+end_src

[[https://stackoverflow.com/a/50875921][emacs - org-mode capture : dynamic file name - Stack Overflow]]
[[https://github.com/daviwil/emacs-from-scratch/blob/c55d0f5e309f7ed8ffa3c00bc35c75937a5184e4/init.el][emacs-from-scratch/init.el at c55d0f5e309f7ed8ffa3c00bc35c75937a5184e4 · davi...]]

*** org-babel
Skip executing org source blocks within commented headings. To optimize, consider advicing [[fn:org-babel-map-executables]]
#+begin_src emacs-lisp
(defun +my/org-babel-execute-buffer (&optional arg)
  "Execute source code blocks in a buffer.
Call `org-babel-execute-src-block' on every source block in
the current buffer."
  (interactive "P")
  (org-babel-eval-wipe-error-buffer)
  (org-save-outline-visibility t
    (org-babel-map-executables nil
      (unless (org-in-commented-heading-p)
        (if (memq (org-element-type (org-element-context))
                  '(babel-call inline-babel-call))
            (org-babel-lob-execute-maybe)
          (org-babel-execute-src-block arg))))))

(advice-add 'org-babel-execute-buffer :override #'+my/org-babel-execute-buffer)
#+end_src

*** jupyter
#+begin_src toml
[jupyter]
packages=["jupyter-notebook"]
#+end_src

start session only when exactly execute it.
#+begin_src emacs-lisp
(after! 'jupyter
  (setq jupyter-org-auto-connect nil))
#+end_src

[[https://github.com/doomemacs/doomemacs/issues/7354][doomemacs/doomemacs#7354 Jupyter fails to function after upgrade]]
#+begin_src emacs-lisp
(with-eval-after-load 'ob-jupyter
 (org-babel-jupyter-aliases-from-kernelspecs))
#+end_src

~:text/html~ output support
#+begin_src emacs-lisp :tangle no
(after! ob-jupyter
  (push :text/html jupyter-org-mime-types))
#+end_src

To view contents of =.ipynb= file, see
[[https://github.com/astoff/code-cells.el][GitHub - astoff/code-cells.el: Emacs utilities for code split into cells, inc...]]

*** jupyter+
#+begin_src emacs-lisp :tangle packages.el
(package! jupyter+
  :recipe (:local-repo "~/lib/jupyter+/"))
#+end_src

#+begin_src emacs-lisp
(use-package! jupyter+
  :after jupyter)

(map! :map jupyter-org-interaction-mode-map
      :n "\\" #'jupyter-org-transient)
#+end_src

Intent mainly with [[file:::wolfram in jupyter]], respect to doom's org babel lazy load
#+begin_src emacs-lisp
(defvar +my/jupyter-langs '()
  "A list of language that use jupyter override.")

(add-hook '+org-babel-load-functions
  (defun +org-babel-load-jupyter-override-h (lang)
    ;; don't multi run `org-babel-jupyter-override-src-block'
    (unless (boundp (intern (format "org-babel-header-args:%s" lang)))
      (when-let ((lang-name (symbol-name lang))
                 (_ (member lang-name +my/jupyter-langs)))
        (require 'jupyter)
        (require 'ob-jupyter)
        (org-babel-jupyter-override-src-block lang-name))))
  90)
#+end_src

*** ob-async
Session async have been include in org mode, see how to implement async using built in method.
[[https://github.com/jackkamm/ob-session-async][GitHub - jackkamm/ob-session-async: Asynchronous org-mode session evaluation]]
[[https://github.com/emacs-mirror/emacs/blob/a7cb220523d881449a2dba683e7358b3312fd482/etc/ORG-NEWS#L863][emacs/etc/ORG-NEWS at a7cb220523d881449a2dba683e7358b3312fd482 · emacs-mirror...]]

This branch mainly fix =apply: Wrong number of arguments= of advice [[fn:ob-async-org-babel-execute-src-block]]
[[https://github.com/astahlman/ob-async/pull/96][astahlman/ob-async#96 Update signature and skip :session blocks by stsquad]]

#+begin_src emacs-lisp :tangle packages.el
(unpin! ob-async)
(package! ob-async
  :recipe (:host github
           :repo "stsquad/ob-async"
           :branch "update-signature-skip-session"))
#+end_src

Disable doom's "maybe" advice around, run after it add the advice.
#+begin_src emacs-lisp
(add-hook 'org-load-hook
          (lambda ()
            (advice-remove 'ob-async-org-babel-execute-src-block #'+org-babel-disable-async-maybe-a)) 90)
#+end_src

*** org-noter
#+begin_src emacs-lisp
(after! org-noter
  (org-noter-set-doc-split-fraction '(0.75 . 0.25)))
#+end_src

*** org-roam
#+begin_src emacs-lisp
(setq org-roam-directory (expand-file-name "roam/" org-directory))
(after! org-roam
  (setq org-roam-dailies-capture-templates
   '(("d" "default" entry "* %?\n[%<%Y-%m-%d %H:%M>]\n"
      :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n")))))
#+end_src

*** others
[[kbd:SPC s b]] should work as expected
[[https://github.com/doomemacs/doomemacs/issues/6478#issuecomment-1328110153][doomemacs/doomemacs#6478 `evil-ex-search` skips matches in folded regions (in...)]]

[[https://emacs.stackexchange.com/a/63793][How to copy links OUT of org-mode? - Emacs Stack Exchange]]
#+begin_src emacs-lisp
(defun org-copy-link-url ()
  (interactive)
  (kill-new (org-element-property :raw-link (org-element-context))))

(after! org
  (map! :map org-mode-map
        :localleader
        "y" #'org-copy-link-url))
#+end_src

revert native ~org-cycle~ style, see [[doom-modules:lang/org/README.org]]
#+begin_src emacs-lisp
(after! evil-org
  (remove-hook 'org-tab-first-hook #'+org-cycle-only-current-subtree-h))
#+end_src

org-src
[[https://github.com/hlissner/doom-emacs/issues/5436][hlissner/doom-emacs#5436 org-src-window-setup not working correctly]]
#+begin_src emacs-lisp
(after! org-src
  (setq org-src-window-setup 'reorganize-frame)
  (set-popup-rule! "^\\*Org Src" :ignore t))
#+end_src

format org-src
#+begin_src emacs-lisp
(map! :after org :map evil-org-mode-map
  :n "g Q" #'+format:region)
#+end_src

org-format
#+begin_src emacs-lisp
(use-package! org-format
  :commands org-format-buffer
  :init
  (add-to-list 'load-path (expand-file-name "org-format" org-directory))
  (map! :map org-mode-map
        :localleader
        "F" #'org-format-buffer))
#+end_src

** python
#+begin_src toml
[python]
packages=[
    "python-pytest",
    "python-nose",
    "python-black",
    "python-pyflakes",
    "python-isort",
    "python-pipenv",
    "pyright"
]
#+end_src

#+begin_src emacs-lisp :tangle no :noweb-ref lang
(python +lsp +pyright)
#+end_src

** sh
#+begin_src toml
[sh]
packages=["shellcheck-bin", "bash-language-server"]
#+end_src

#+begin_src emacs-lisp :tangle no :noweb-ref lang
(sh +fish +lsp +powershell)
#+end_src

fish shell ligatures
#+begin_src emacs-lisp
(after! fish-mode
  (set-ligatures! 'fish-mode
    :def "function"
    :return "return"
    :and "&&"
    :or "||"
    :not "not"
    :true "true"
    :false "false"
    :for "for"))
#+end_src

** yaml
#+begin_src toml
[yaml]
packages=["yaml-language-server"]
#+end_src

#+begin_src emacs-lisp :tangle no :noweb-ref lang
(yaml +lsp)
#+end_src

** COMMENT typst
#+begin_src toml
["typst-mode"]
packages=["typst", "typst-lsp-bin"]
#+end_src

#+begin_src emacs-lisp :tangle packages.el
(package! typst-mode)
#+end_src

#+begin_src emacs-lisp
(use-package! typst-mode)
#+end_src

** wolfram
#+begin_src toml
[wolfram]
enabled="not is_wsl"
packages=["mathematica"]
#+end_src

#+begin_src emacs-lisp :tangle packages.el
(package! wolfram-mode
  :recipe (:local-repo "~/lib/wolfram-mode/"))
#+end_src

#+begin_src emacs-lisp
(use-package! wolfram-mode
  :defer t)
#+end_src

notebook open in =dirvish=
#+begin_src emacs-lisp
(after! dirvish
  (push '(("nb") "/usr/local/bin/mathematica" "%f")
        dirvish-open-with-programs))
#+end_src

wolfram-format
#+begin_src emacs-lisp
(after! apheleia
  (load "~/lib/wolframFormatter/wolfram-format.el"))
#+end_src

*** ligatures
#+begin_src emacs-lisp
(after! (wolfram-mode ligature)
  (set-ligatures! 'wolfram-mode
    :and "&&"
    :or "||"
    :not "!"
    :null "None"
    :true "True"
    :false "False"))
#+end_src

*** =lsp-wl= with =eglot=
#+begin_src bash :tangle no
WLPATH="~/.local/lib/lsp-wl/"
[[ -d "$WLPATH" ]] || git clone https://github.com/kenkangxgwe/lsp-wl.git "$WLPATH"
#+end_src

#+begin_src Wolfram-Language :tangle no
PacletInstall["CodeParser"]
PacletInstall["CodeInspector"]
PacletInstall["ZeroMQLink"] (* 1.2.6+ *)
#+end_src

=eglot= is far faster than =LSP=!
[[https://github.com/kenkangxgwe/lsp-wl/wiki#eglot][Home · kenkangxgwe/lsp-wl Wiki · GitHub]]
#+begin_src emacs-lisp
(let ((wlserver (expand-file-name "~/.local/lib/lsp-wl/init.wls")))
  (when (and (file-exists-p wlserver) (executable-find "wolframscript"))
    (with-eval-after-load 'eglot
      (add-to-list 'eglot-server-programs
                   `(wolfram-mode . ("wolframscript" "-f" ,wlserver
                                     "--tcp-server" :autoport))))))
#+end_src
Completion seems not work with =12.3=.

*** wolfram in jupyter
#+begin_src emacs-lisp
(add-to-list '+my/jupyter-langs "Wolfram-Language")

(after! org-src
  (add-to-list 'org-src-lang-modes '("Wolfram-Language" . wolfram)))
#+end_src

- error when run after execute hook
  [[https://github.com/emacs-jupyter/jupyter/issues/492][emacs-jupyter/jupyter#492 org-babel-after-execute-hook not executed in contex...]]

** markdown
#+begin_src toml
[markdown]
packages=[
    "pandoc-bin"
]
#+end_src

#+begin_src emacs-lisp :tangle no :noweb-ref lang
markdown
#+end_src

** Others
css
#+begin_src emacs-lisp
(prependq! auto-mode-alist '(("\\.rasi\\'" . css-mode)))
#+end_src

* Email
** mu4e
#+begin_src toml
[mu4e]
packages=[
    "isync",
    "mu",
    "pass",
    "msmtp"
    #"imagemagick"
]
#+end_src

Example for initialing =mu= and =mbsync=
#+begin_src fish :tangle no
mkdir -p ~/.mail/$mailname
mu init --maildir=~/.mail --my-address=...@...
mu index
mbsync -c ~/.config/isync/$mbsyncrc -V -a
#+end_src

#+begin_src emacs-lisp :tangle no :noweb-ref email
(mu4e +gmail +org)
#+end_src

#+begin_src emacs-lisp :tangle no
(set-popup-rule! "^\\*mu4e-\\(main\\|headers\\)\\*" :ignore t)
#+end_src

#+begin_src emacs-lisp
(setq mu4e-update-interval 300)
(after! mu4e
  (setq mu4e-split-view 'vertical
        mu4e-change-filenames-when-moving t
        mu4e-attachment-dir "~/Downloads"
        ;; every new email composition gets its own frame!
        mu4e-compose-in-new-frame t
        mu4e-use-fancy-chars t))
#+end_src

send email by =msmtp=, see [[file:~/.config/msmtp/config]]
#+begin_src emacs-lisp
(after! mu4e
  (setq sendmail-program (executable-find "msmtp")
        send-mail-function #'smtpmail-send-it
        message-sendmail-f-is-evil t
        message-sendmail-extra-arguments '("--read-envelope-from")
        message-send-mail-function #'message-send-mail-with-sendmail))
#+end_src

private variables ~mu4e-get-mail-command~ and ~mu4e-contexts~
#+begin_src emacs-lisp
(after! mu4e
  (load-in-doom-dir "private/mu4e.el"))
#+end_src

* App
** rss
#+begin_src emacs-lisp :tangle no :noweb-ref app
(rss +org)
#+end_src

[[https://pragmaticemacs.wordpress.com/2016/08/17/read-your-rss-feeds-in-emacs-with-elfeed/][Read your RSS feeds in emacs with elfeed | Pragmatic Emacs]]
#+begin_src emacs-lisp
(after! elfeed
  (add-hook! 'elfeed-search-mode-hook 'elfeed-update)
  (setq elfeed-db-directory (concat (getenv "NCDIR") "elfeed/db/")
        elfeed-enclosure-default-dir (concat (getenv "NCDIR") "elfeed/enclosures/")
        ;; elfeed-search-filter "@1-month-ago +unread"
        rmh-elfeed-org-files (list (expand-file-name "elfeed.org" org-directory)))
  (map! :leader
        (:prefix "o"
         :desc "elfeed"    "e" #'elfeed)))

(after! elfeed-goodies
  (setq elfeed-goodies/entry-pane-size 0.5))
#+end_src

** everywhere
#+begin_src emacs-lisp :tangle no :noweb-ref app
everywhere
#+end_src

#+begin_src toml
[everywhere]
packages=[
    "xclip",
    "xdotool",
    "xorg-xprop",
    "xorg-xwininfo"
]
#+end_src

* Other packages
** keycast
#+begin_src emacs-lisp :tangle packages.el
(package! keycast)
#+end_src

[[https://github.com/tarsius/keycast/issues/7#issuecomment-881469067][tarsius/keycast#7 Add support for moody and doom-modeline.]]
#+begin_src emacs-lisp
(use-package! keycast
  :commands (keycast-mode)
  :init
  (map! :leader
        (:prefix "t"
         :desc "Toggle keycast" "k" #'keycast-mode))
  :config
  (define-minor-mode keycast-mode
    "Show current command and its key binding in the mode line (fix for use with doom-mode-line)."
    :global t
    (if keycast-mode
        (progn (add-hook 'pre-command-hook 'keycast--update t)
               (setq keycast-mode-line-window-predicate
                     'keycast-active-frame-bottom-right-p))
     (remove-hook 'pre-command-hook 'keycast--update)
     (setq keycast-mode-line-window-predicate 'ignore)))
  (add-to-list 'global-mode-string '("" keycast-mode-line)))
#+end_src

** COMMENT shrface
#+begin_src emacs-lisp :tangle packages.el
(package! shrface)
#+end_src

#+begin_src emacs-lisp
(use-package! shrface
  :hook eww-after-render-hook
  :commands request-url-as-org
  :config
  (shrface-basic)
  (shrface-trial)
  (shrface-default-keybindings) ; setup default keybindings
  (setq shrface-href-versatile t)

  (defun request-url-as-org (url)
    (interactive "sRequest url: ")
    (require 'shrface)
    (require 'request)
    (setq-local shrface-request-url url)
    (request url
      :parser 'buffer-string
      :headers '(("User-Agent" . "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.101 Safari/537.36"))
      :sync nil
      :success (cl-function
                (lambda (&key data &allow-other-keys)
                  (shrface-html-export-as-org data))))))
#+end_src

** screenshot
#+begin_src emacs-lisp :tangle packages.el
(package! screenshot
  :recipe (:host github :repo "yangsheng6810/screenshot"))
#+end_src

#+begin_src emacs-lisp
(use-package! screenshot
  :commands screenshot
  :init
  (map! (:leader :prefix "o"
         :desc "sreenshot within emacs" "S" #'screenshot)))
#+end_src

** zotxt
#+begin_src emacs-lisp :tangle packages.el
(package! zotxt)
#+end_src

[[http://www.mkbehr.com/posts/a-research-workflow-with-zotero-and-org-mode/][A research workflow with Zotero and Org mode | mkbehr.com]]
#+begin_src emacs-lisp
(use-package zotxt
  :hook (org-mode . (lambda () (org-zotxt-mode 1)))
  :config
  (setq zotxt-default-bibliography-style "mkbehr-short")

  (defun org-zotxt-get-attachment-path ()
    "Get attachment file path"
    (interactive "P")
    (let ((item-id (org-zotxt-extract-link-id-at-point)))
      (deferred:$
        (zotxt--request-deferred
         (format "%s/items" zotxt-url-base)
         :params `(("key" . ,item-id) ("format" . "paths"))
         :parser 'json-read)
        (deferred:nextc it
          (lambda (response)
            (let ((paths (cdr (assq 'paths (elt (request-response-data response) 0)))))
              (org-zotxt-choose-path paths))))
        (deferred:error it #'zotxt--deferred-handle-error)
        (if zotxt--debug-sync (deferred:sync! it)
          (deferred:nextc it
            (lambda (path) path))))))

  (defun +my/tilde-home-path (path)
    "covert path starts with /home/$usr/ to '~'"
    (interactive)
    (let ((home (getenv "HOME")))
      (if (string-prefix-p home path)
          (string-join `("~" ,(string-remove-prefix home path)) "")
        path)))

  (defun org-zotxt-copy-attachment-path ()
    "Open attachment of Zotero items linked at point.
  Opens with `org-open-file', see for more information about ARG."
    (interactive)
    (deferred:$
      (deferred:next
        (lambda ()
          (org-zotxt-get-attachment-path)))
      (deferred:nextc it
        (lambda (path)
          (let ((new-path (+my/tilde-home-path path)))
            (kill-new new-path)
            (message "\"%s\" send to system clipboard!" new-path))))))

  (map! (:map org-zotxt-mode-map
         :desc "org-zotxt-insert-selected"
         "C-c \" \"" (cmd!! #'org-zotxt-insert-reference-link '(4))
         :desc "org-zotxt-copy-attachment-path"
         "C-c \" c" #'org-zotxt-copy-attachment-path)))
#+end_src

open attachment with point at arxiv link
[[https://emacs.stackexchange.com/a/38297][Get description of an org-mode link - Emacs Stack Exchange]]
#+begin_src emacs-lisp
(defun org-zotxt-open-arxiv-attachment ()
  "open attachment from arxiv link, by zotxt"
  (interactive)
  (let* ((link (org-element-context))
         (desc (buffer-substring-no-properties (org-element-property :contents-begin link)
                                               (org-element-property :contents-end link))))
     (org-zotxt-insert-reference-link)))
#+end_src

** figlet
converting comments into ascii arts
#+begin_src toml
[figlet]
packages=["figlet"]
#+end_src

#+begin_src emacs-lisp :tangle packages.el
(package! figlet)
#+end_src

#+begin_src emacs-lisp
(use-package! figlet
  :defer t
  :config
  (setq figlet-options '("-W" "-f" "script")))
#+end_src

** shell-command+
#+begin_src emacs-lisp :tangle packages.el
(package! shell-command+
  :recipe (:host sourcehut
           :repo "pkal/shell-command-plus"))
#+end_src
This package is located in =GNU ELPA=, but it cannot be installed, see
[[https://www.reddit.com/r/DoomEmacs/comments/q4jrer/cant_install_elpa_package/][cant install elpa package]]

substitute "%" to buffer file in ~shell-command~
[[https://puntoblogspot.blogspot.com/2021/05/current-file-name-on-emacss-shell.html][puntoblogspot: Current file name on emacs's shell-command]]
[[https://unix.stackexchange.com/questions/45125/how-to-get-current-buffers-filename-in-emacs][function - How to get current buffer's filename in emacs? - Unix & Linux Stac...]]

#+begin_src emacs-lisp
(use-package! shell-command+
  :commands shell-command+
  :init
  (global-set-key (kbd "M-!") #'shell-command+))
#+end_src

** gptel
#+begin_src emacs-lisp :tangle packages.el
(package! gptel)
#+end_src

#+begin_src emacs-lisp
(use-package! gptel
  :commands (gptel gptel-send gptel-quick)
  :init
  (map!
   (:leader
    :prefix "o"
    :desc "gptel" "g" #'gptel))
  (map! "C-c s" #'gptel-quick
        "C-c g" #'gptel-send)
  :config
  (setq gptel-default-mode #'org-mode)
  (load-in-doom-dir "private/gpt.el")
  (add-hook 'gptel-post-stream-hook 'gptel-auto-scroll)
  (add-hook 'gptel-post-response-functions 'gptel-end-of-response))
#+end_src

Chat buffer should be real!
#+begin_src emacs-lisp
(defun gptel-buffer-p (buf)
  (with-current-buffer buf (and (boundp 'gptel-mode) (eq gptel-mode t))))
(add-hook 'doom-real-buffer-functions 'gptel-buffer-p)
#+end_src

gptel-quick
#+begin_src emacs-lisp :tangle packages.el
(package! gptel-quick
  :recipe (:host github
           :repo "karthink/gptel-quick"))
#+end_src

** tldr
#+begin_src emacs-lisp :tangle packages.el
(package! tldr)
#+end_src

** telega
#+begin_src emacs-lisp :tangle packages.el
(package! telega)
#+end_src

#+begin_src shell :tangle no
docker pull zevlg/telega-server:latest
#+end_src

#+begin_src emacs-lisp
(use-package! telega
  :commands telega
  :init
  (setq telega-directory (expand-file-name "~/.local/share/telega"))
  :config
  (setq telega-use-docker t)
  ;; ("\\.pdf\\'" . default) is already member in `org-file-apps'
  ;; Use "xdg-open" to open files by default
  (setcdr (assq t org-file-apps-gnu) 'browse-url-xdg-open)
  (setq telega-open-file-function 'org-open-file)
  (setq telega-proxies '((:server "127.0.0.1" :port 1089 :enable t
                          :type (:@type "proxyTypeSocks5")))))
  ;; (setq telega-server-libs-prefix "/usr"))
#+end_src

* Other configs
** projectile
[[https://docs.projectile.mx/projectile/configuration.html][Configuration :: Projectile]]
#+begin_src emacs-lisp
(after! projectile
  (setq projectile-indexing-method 'alien
        projectile-sort-order 'recently-active
        projectile-file-exists-remote-cache-expire (* 10 60)
        projectile-track-known-projects-automatically nil
        ;; projectile-require-project-root t
        projectile-auto-discover t)
        ;; (projectile-file-exists-local-cache-expire (* 5 60)))
  (add-to-list 'projectile-globally-ignored-directories
               "*\\.run\\.tmp$")
  (+my/append-to-list 'projectile-globally-ignored-modes
                      '("helpful-mode" "dired-mode"))
  (add-to-list 'projectile-globally-ignored-buffers "*doom*"))
#+end_src

[[https://emacs.stackexchange.com/questions/16497/how-to-exclude-files-from-projectile][How to exclude files from Projectile? - Emacs Stack Exchange]]
For non git project, better add following in project root [[file:.dir-locals.el]]
#+begin_src emacs-lisp :tangle no
((nil . ((projectile-indexing-method . hybrid))))
#+end_src
and add ignored files in [[file:.projectile]].

** proxy
#+begin_src emacs-lisp
(setq url-proxy-services
   `(("no_proxy" . "^\\(localhost\\|10\\..*\\|192\\.168\\..*\\)")
     ("http" . ,(shell-command-to-string "echo -n $ALL_PROXY"))
     ("https" . ,(shell-command-to-string "echo -n $ALL_PROXY"))))
#+end_src

** Windows =Librewolf= in wsl
Open link with host =Librewolf= browser
#+begin_src emacs-lisp
(if IS-WSL
  (setq browse-url-firefox-program "librewolf.exe"))
#+end_src

** insert arxiv links
#+begin_src emacs-lisp
(defvar rx-arxiv-regexp
  (rx (= 4 num) "." (= 5 num))
  "Regular expression for arxiv id.")

(defun org-insert-arxiv-link ()
  "Insert arxiv link with arxiv id as description."
  (interactive)
  (let* ((ring (current-kill 0))
         (id (if (string-match rx-arxiv-regexp ring)
                 (match-string 0 ring)
               (read-string "Input arxiv id:"))))
    (insert " ")
    (org-insert-link nil (concat "https://arxiv.org/abs/" id) id)))
#+end_src

** shortcuts
#+begin_src emacs-lisp
(map! :leader
      :desc "Eval expression"       ":"    #'pp-eval-expression
      :desc "M-x"                   ";"    #'execute-extended-command
      :desc "Org agenda"            "="    #'org-agenda)
#+end_src

